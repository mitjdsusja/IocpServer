// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: messageTest.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef messageTest_2eproto_2epb_2eh
#define messageTest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messageTest_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_messageTest_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_messageTest_2eproto;
}  // extern "C"
namespace msgTest {
class CS_Send_User_Info;
struct CS_Send_User_InfoDefaultTypeInternal;
extern CS_Send_User_InfoDefaultTypeInternal _CS_Send_User_Info_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CS_Send_User_Info_class_data_;
class SC_Add_User;
struct SC_Add_UserDefaultTypeInternal;
extern SC_Add_UserDefaultTypeInternal _SC_Add_User_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SC_Add_User_class_data_;
class SC_Broadcast_User_Info;
struct SC_Broadcast_User_InfoDefaultTypeInternal;
extern SC_Broadcast_User_InfoDefaultTypeInternal _SC_Broadcast_User_Info_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SC_Broadcast_User_Info_class_data_;
class SC_Response_User_Info;
struct SC_Response_User_InfoDefaultTypeInternal;
extern SC_Response_User_InfoDefaultTypeInternal _SC_Response_User_Info_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SC_Response_User_Info_class_data_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull UserInfo_class_data_;
class UserInfo_Pos;
struct UserInfo_PosDefaultTypeInternal;
extern UserInfo_PosDefaultTypeInternal _UserInfo_Pos_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull UserInfo_Pos_class_data_;
class UserInfo_Vel;
struct UserInfo_VelDefaultTypeInternal;
extern UserInfo_VelDefaultTypeInternal _UserInfo_Vel_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull UserInfo_Vel_class_data_;
}  // namespace msgTest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace msgTest {

// ===================================================================


// -------------------------------------------------------------------

class UserInfo_Vel final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.UserInfo.Vel) */ {
 public:
  inline UserInfo_Vel() : UserInfo_Vel(nullptr) {}
  ~UserInfo_Vel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserInfo_Vel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserInfo_Vel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserInfo_Vel(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserInfo_Vel(const UserInfo_Vel& from) : UserInfo_Vel(nullptr, from) {}
  inline UserInfo_Vel(UserInfo_Vel&& from) noexcept
      : UserInfo_Vel(nullptr, std::move(from)) {}
  inline UserInfo_Vel& operator=(const UserInfo_Vel& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo_Vel& operator=(UserInfo_Vel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo_Vel& default_instance() {
    return *reinterpret_cast<const UserInfo_Vel*>(
        &_UserInfo_Vel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(UserInfo_Vel& a, UserInfo_Vel& b) { a.Swap(&b); }
  inline void Swap(UserInfo_Vel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo_Vel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo_Vel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserInfo_Vel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserInfo_Vel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserInfo_Vel& from) { UserInfo_Vel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserInfo_Vel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.UserInfo.Vel"; }

 protected:
  explicit UserInfo_Vel(::google::protobuf::Arena* arena);
  UserInfo_Vel(::google::protobuf::Arena* arena, const UserInfo_Vel& from);
  UserInfo_Vel(::google::protobuf::Arena* arena, UserInfo_Vel&& from) noexcept
      : UserInfo_Vel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVecXFieldNumber = 1,
    kVecYFieldNumber = 2,
    kVecZFieldNumber = 3,
  };
  // optional int32 vecX = 1 [default = 0];
  bool has_vecx() const;
  void clear_vecx() ;
  ::int32_t vecx() const;
  void set_vecx(::int32_t value);

  private:
  ::int32_t _internal_vecx() const;
  void _internal_set_vecx(::int32_t value);

  public:
  // optional int32 vecY = 2 [default = 0];
  bool has_vecy() const;
  void clear_vecy() ;
  ::int32_t vecy() const;
  void set_vecy(::int32_t value);

  private:
  ::int32_t _internal_vecy() const;
  void _internal_set_vecy(::int32_t value);

  public:
  // optional int32 vecZ = 3 [default = 0];
  bool has_vecz() const;
  void clear_vecz() ;
  ::int32_t vecz() const;
  void set_vecz(::int32_t value);

  private:
  ::int32_t _internal_vecz() const;
  void _internal_set_vecz(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.UserInfo.Vel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserInfo_Vel& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t vecx_;
    ::int32_t vecy_;
    ::int32_t vecz_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull UserInfo_Vel_class_data_;
// -------------------------------------------------------------------

class UserInfo_Pos final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.UserInfo.Pos) */ {
 public:
  inline UserInfo_Pos() : UserInfo_Pos(nullptr) {}
  ~UserInfo_Pos() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserInfo_Pos* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserInfo_Pos));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserInfo_Pos(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserInfo_Pos(const UserInfo_Pos& from) : UserInfo_Pos(nullptr, from) {}
  inline UserInfo_Pos(UserInfo_Pos&& from) noexcept
      : UserInfo_Pos(nullptr, std::move(from)) {}
  inline UserInfo_Pos& operator=(const UserInfo_Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo_Pos& operator=(UserInfo_Pos&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo_Pos& default_instance() {
    return *reinterpret_cast<const UserInfo_Pos*>(
        &_UserInfo_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UserInfo_Pos& a, UserInfo_Pos& b) { a.Swap(&b); }
  inline void Swap(UserInfo_Pos* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo_Pos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo_Pos* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserInfo_Pos>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserInfo_Pos& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserInfo_Pos& from) { UserInfo_Pos::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserInfo_Pos* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.UserInfo.Pos"; }

 protected:
  explicit UserInfo_Pos(::google::protobuf::Arena* arena);
  UserInfo_Pos(::google::protobuf::Arena* arena, const UserInfo_Pos& from);
  UserInfo_Pos(::google::protobuf::Arena* arena, UserInfo_Pos&& from) noexcept
      : UserInfo_Pos(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // optional int32 posX = 1 [default = 0];
  bool has_posx() const;
  void clear_posx() ;
  ::int32_t posx() const;
  void set_posx(::int32_t value);

  private:
  ::int32_t _internal_posx() const;
  void _internal_set_posx(::int32_t value);

  public:
  // optional int32 posY = 2 [default = 0];
  bool has_posy() const;
  void clear_posy() ;
  ::int32_t posy() const;
  void set_posy(::int32_t value);

  private:
  ::int32_t _internal_posy() const;
  void _internal_set_posy(::int32_t value);

  public:
  // optional int32 posZ = 3 [default = 0];
  bool has_posz() const;
  void clear_posz() ;
  ::int32_t posz() const;
  void set_posz(::int32_t value);

  private:
  ::int32_t _internal_posz() const;
  void _internal_set_posz(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.UserInfo.Pos)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserInfo_Pos& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t posx_;
    ::int32_t posy_;
    ::int32_t posz_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull UserInfo_Pos_class_data_;
// -------------------------------------------------------------------

class UserInfo final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserInfo(const UserInfo& from) : UserInfo(nullptr, from) {}
  inline UserInfo(UserInfo&& from) noexcept
      : UserInfo(nullptr, std::move(from)) {}
  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *reinterpret_cast<const UserInfo*>(
        &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(UserInfo& a, UserInfo& b) { a.Swap(&b); }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserInfo& from) { UserInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.UserInfo"; }

 protected:
  explicit UserInfo(::google::protobuf::Arena* arena);
  UserInfo(::google::protobuf::Arena* arena, const UserInfo& from);
  UserInfo(::google::protobuf::Arena* arena, UserInfo&& from) noexcept
      : UserInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Pos = UserInfo_Pos;
  using Vel = UserInfo_Vel;

  // accessors -------------------------------------------------------
  enum : int {
    kPosFieldNumber = 2,
    kVecFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required .msgTest.UserInfo.Pos pos = 2;
  bool has_pos() const;
  void clear_pos() ;
  const ::msgTest::UserInfo_Pos& pos() const;
  [[nodiscard]] ::msgTest::UserInfo_Pos* release_pos();
  ::msgTest::UserInfo_Pos* mutable_pos();
  void set_allocated_pos(::msgTest::UserInfo_Pos* value);
  void unsafe_arena_set_allocated_pos(::msgTest::UserInfo_Pos* value);
  ::msgTest::UserInfo_Pos* unsafe_arena_release_pos();

  private:
  const ::msgTest::UserInfo_Pos& _internal_pos() const;
  ::msgTest::UserInfo_Pos* _internal_mutable_pos();

  public:
  // required .msgTest.UserInfo.Vel vec = 3;
  bool has_vec() const;
  void clear_vec() ;
  const ::msgTest::UserInfo_Vel& vec() const;
  [[nodiscard]] ::msgTest::UserInfo_Vel* release_vec();
  ::msgTest::UserInfo_Vel* mutable_vec();
  void set_allocated_vec(::msgTest::UserInfo_Vel* value);
  void unsafe_arena_set_allocated_vec(::msgTest::UserInfo_Vel* value);
  ::msgTest::UserInfo_Vel* unsafe_arena_release_vec();

  private:
  const ::msgTest::UserInfo_Vel& _internal_vec() const;
  ::msgTest::UserInfo_Vel* _internal_mutable_vec();

  public:
  // required int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.UserInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo_Pos* pos_;
    ::msgTest::UserInfo_Vel* vec_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull UserInfo_class_data_;
// -------------------------------------------------------------------

class SC_Response_User_Info final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Response_User_Info) */ {
 public:
  inline SC_Response_User_Info() : SC_Response_User_Info(nullptr) {}
  ~SC_Response_User_Info() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Response_User_Info* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Response_User_Info));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Response_User_Info(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Response_User_Info(const SC_Response_User_Info& from) : SC_Response_User_Info(nullptr, from) {}
  inline SC_Response_User_Info(SC_Response_User_Info&& from) noexcept
      : SC_Response_User_Info(nullptr, std::move(from)) {}
  inline SC_Response_User_Info& operator=(const SC_Response_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Response_User_Info& operator=(SC_Response_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Response_User_Info& default_instance() {
    return *reinterpret_cast<const SC_Response_User_Info*>(
        &_SC_Response_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SC_Response_User_Info& a, SC_Response_User_Info& b) { a.Swap(&b); }
  inline void Swap(SC_Response_User_Info* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Response_User_Info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Response_User_Info* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Response_User_Info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Response_User_Info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Response_User_Info& from) { SC_Response_User_Info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Response_User_Info* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Response_User_Info"; }

 protected:
  explicit SC_Response_User_Info(::google::protobuf::Arena* arena);
  SC_Response_User_Info(::google::protobuf::Arena* arena, const SC_Response_User_Info& from);
  SC_Response_User_Info(::google::protobuf::Arena* arena, SC_Response_User_Info&& from) noexcept
      : SC_Response_User_Info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo userInfo = 1;
  bool has_userinfo() const;
  void clear_userinfo() ;
  const ::msgTest::UserInfo& userinfo() const;
  [[nodiscard]] ::msgTest::UserInfo* release_userinfo();
  ::msgTest::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::msgTest::UserInfo* value);
  void unsafe_arena_set_allocated_userinfo(::msgTest::UserInfo* value);
  ::msgTest::UserInfo* unsafe_arena_release_userinfo();

  private:
  const ::msgTest::UserInfo& _internal_userinfo() const;
  ::msgTest::UserInfo* _internal_mutable_userinfo();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Response_User_Info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Response_User_Info& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* userinfo_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SC_Response_User_Info_class_data_;
// -------------------------------------------------------------------

class SC_Broadcast_User_Info final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Broadcast_User_Info) */ {
 public:
  inline SC_Broadcast_User_Info() : SC_Broadcast_User_Info(nullptr) {}
  ~SC_Broadcast_User_Info() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Broadcast_User_Info* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Broadcast_User_Info));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Broadcast_User_Info(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Broadcast_User_Info(const SC_Broadcast_User_Info& from) : SC_Broadcast_User_Info(nullptr, from) {}
  inline SC_Broadcast_User_Info(SC_Broadcast_User_Info&& from) noexcept
      : SC_Broadcast_User_Info(nullptr, std::move(from)) {}
  inline SC_Broadcast_User_Info& operator=(const SC_Broadcast_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Broadcast_User_Info& operator=(SC_Broadcast_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Broadcast_User_Info& default_instance() {
    return *reinterpret_cast<const SC_Broadcast_User_Info*>(
        &_SC_Broadcast_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SC_Broadcast_User_Info& a, SC_Broadcast_User_Info& b) { a.Swap(&b); }
  inline void Swap(SC_Broadcast_User_Info* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Broadcast_User_Info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Broadcast_User_Info* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Broadcast_User_Info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Broadcast_User_Info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Broadcast_User_Info& from) { SC_Broadcast_User_Info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Broadcast_User_Info* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Broadcast_User_Info"; }

 protected:
  explicit SC_Broadcast_User_Info(::google::protobuf::Arena* arena);
  SC_Broadcast_User_Info(::google::protobuf::Arena* arena, const SC_Broadcast_User_Info& from);
  SC_Broadcast_User_Info(::google::protobuf::Arena* arena, SC_Broadcast_User_Info&& from) noexcept
      : SC_Broadcast_User_Info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsersInfoFieldNumber = 1,
  };
  // repeated .msgTest.UserInfo usersInfo = 1;
  int usersinfo_size() const;
  private:
  int _internal_usersinfo_size() const;

  public:
  void clear_usersinfo() ;
  ::msgTest::UserInfo* mutable_usersinfo(int index);
  ::google::protobuf::RepeatedPtrField<::msgTest::UserInfo>* mutable_usersinfo();

  private:
  const ::google::protobuf::RepeatedPtrField<::msgTest::UserInfo>& _internal_usersinfo() const;
  ::google::protobuf::RepeatedPtrField<::msgTest::UserInfo>* _internal_mutable_usersinfo();
  public:
  const ::msgTest::UserInfo& usersinfo(int index) const;
  ::msgTest::UserInfo* add_usersinfo();
  const ::google::protobuf::RepeatedPtrField<::msgTest::UserInfo>& usersinfo() const;
  // @@protoc_insertion_point(class_scope:msgTest.SC_Broadcast_User_Info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Broadcast_User_Info& from_msg);
    ::google::protobuf::RepeatedPtrField< ::msgTest::UserInfo > usersinfo_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SC_Broadcast_User_Info_class_data_;
// -------------------------------------------------------------------

class SC_Add_User final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Add_User) */ {
 public:
  inline SC_Add_User() : SC_Add_User(nullptr) {}
  ~SC_Add_User() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Add_User* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Add_User));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Add_User(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Add_User(const SC_Add_User& from) : SC_Add_User(nullptr, from) {}
  inline SC_Add_User(SC_Add_User&& from) noexcept
      : SC_Add_User(nullptr, std::move(from)) {}
  inline SC_Add_User& operator=(const SC_Add_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Add_User& operator=(SC_Add_User&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Add_User& default_instance() {
    return *reinterpret_cast<const SC_Add_User*>(
        &_SC_Add_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SC_Add_User& a, SC_Add_User& b) { a.Swap(&b); }
  inline void Swap(SC_Add_User* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Add_User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Add_User* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Add_User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Add_User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Add_User& from) { SC_Add_User::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Add_User* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Add_User"; }

 protected:
  explicit SC_Add_User(::google::protobuf::Arena* arena);
  SC_Add_User(::google::protobuf::Arena* arena, const SC_Add_User& from);
  SC_Add_User(::google::protobuf::Arena* arena, SC_Add_User&& from) noexcept
      : SC_Add_User(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsersInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo usersInfo = 1;
  bool has_usersinfo() const;
  void clear_usersinfo() ;
  const ::msgTest::UserInfo& usersinfo() const;
  [[nodiscard]] ::msgTest::UserInfo* release_usersinfo();
  ::msgTest::UserInfo* mutable_usersinfo();
  void set_allocated_usersinfo(::msgTest::UserInfo* value);
  void unsafe_arena_set_allocated_usersinfo(::msgTest::UserInfo* value);
  ::msgTest::UserInfo* unsafe_arena_release_usersinfo();

  private:
  const ::msgTest::UserInfo& _internal_usersinfo() const;
  ::msgTest::UserInfo* _internal_mutable_usersinfo();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Add_User)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Add_User& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* usersinfo_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SC_Add_User_class_data_;
// -------------------------------------------------------------------

class CS_Send_User_Info final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_Send_User_Info) */ {
 public:
  inline CS_Send_User_Info() : CS_Send_User_Info(nullptr) {}
  ~CS_Send_User_Info() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Send_User_Info* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Send_User_Info));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Send_User_Info(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Send_User_Info(const CS_Send_User_Info& from) : CS_Send_User_Info(nullptr, from) {}
  inline CS_Send_User_Info(CS_Send_User_Info&& from) noexcept
      : CS_Send_User_Info(nullptr, std::move(from)) {}
  inline CS_Send_User_Info& operator=(const CS_Send_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Send_User_Info& operator=(CS_Send_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Send_User_Info& default_instance() {
    return *reinterpret_cast<const CS_Send_User_Info*>(
        &_CS_Send_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CS_Send_User_Info& a, CS_Send_User_Info& b) { a.Swap(&b); }
  inline void Swap(CS_Send_User_Info* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Send_User_Info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Send_User_Info* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Send_User_Info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Send_User_Info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Send_User_Info& from) { CS_Send_User_Info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Send_User_Info* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Send_User_Info"; }

 protected:
  explicit CS_Send_User_Info(::google::protobuf::Arena* arena);
  CS_Send_User_Info(::google::protobuf::Arena* arena, const CS_Send_User_Info& from);
  CS_Send_User_Info(::google::protobuf::Arena* arena, CS_Send_User_Info&& from) noexcept
      : CS_Send_User_Info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo userInfo = 1;
  bool has_userinfo() const;
  void clear_userinfo() ;
  const ::msgTest::UserInfo& userinfo() const;
  [[nodiscard]] ::msgTest::UserInfo* release_userinfo();
  ::msgTest::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::msgTest::UserInfo* value);
  void unsafe_arena_set_allocated_userinfo(::msgTest::UserInfo* value);
  ::msgTest::UserInfo* unsafe_arena_release_userinfo();

  private:
  const ::msgTest::UserInfo& _internal_userinfo() const;
  ::msgTest::UserInfo* _internal_mutable_userinfo();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_Send_User_Info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Send_User_Info& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* userinfo_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CS_Send_User_Info_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserInfo_Pos

// optional int32 posX = 1 [default = 0];
inline bool UserInfo_Pos::has_posx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserInfo_Pos::clear_posx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t UserInfo_Pos::posx() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Pos.posX)
  return _internal_posx();
}
inline void UserInfo_Pos::set_posx(::int32_t value) {
  _internal_set_posx(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Pos.posX)
}
inline ::int32_t UserInfo_Pos::_internal_posx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.posx_;
}
inline void UserInfo_Pos::_internal_set_posx(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posx_ = value;
}

// optional int32 posY = 2 [default = 0];
inline bool UserInfo_Pos::has_posy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UserInfo_Pos::clear_posy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t UserInfo_Pos::posy() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Pos.posY)
  return _internal_posy();
}
inline void UserInfo_Pos::set_posy(::int32_t value) {
  _internal_set_posy(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Pos.posY)
}
inline ::int32_t UserInfo_Pos::_internal_posy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.posy_;
}
inline void UserInfo_Pos::_internal_set_posy(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posy_ = value;
}

// optional int32 posZ = 3 [default = 0];
inline bool UserInfo_Pos::has_posz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UserInfo_Pos::clear_posz() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t UserInfo_Pos::posz() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Pos.posZ)
  return _internal_posz();
}
inline void UserInfo_Pos::set_posz(::int32_t value) {
  _internal_set_posz(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Pos.posZ)
}
inline ::int32_t UserInfo_Pos::_internal_posz() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.posz_;
}
inline void UserInfo_Pos::_internal_set_posz(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posz_ = value;
}

// -------------------------------------------------------------------

// UserInfo_Vel

// optional int32 vecX = 1 [default = 0];
inline bool UserInfo_Vel::has_vecx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserInfo_Vel::clear_vecx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vecx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t UserInfo_Vel::vecx() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Vel.vecX)
  return _internal_vecx();
}
inline void UserInfo_Vel::set_vecx(::int32_t value) {
  _internal_set_vecx(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Vel.vecX)
}
inline ::int32_t UserInfo_Vel::_internal_vecx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vecx_;
}
inline void UserInfo_Vel::_internal_set_vecx(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vecx_ = value;
}

// optional int32 vecY = 2 [default = 0];
inline bool UserInfo_Vel::has_vecy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UserInfo_Vel::clear_vecy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vecy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t UserInfo_Vel::vecy() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Vel.vecY)
  return _internal_vecy();
}
inline void UserInfo_Vel::set_vecy(::int32_t value) {
  _internal_set_vecy(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Vel.vecY)
}
inline ::int32_t UserInfo_Vel::_internal_vecy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vecy_;
}
inline void UserInfo_Vel::_internal_set_vecy(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vecy_ = value;
}

// optional int32 vecZ = 3 [default = 0];
inline bool UserInfo_Vel::has_vecz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UserInfo_Vel::clear_vecz() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vecz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t UserInfo_Vel::vecz() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Vel.vecZ)
  return _internal_vecz();
}
inline void UserInfo_Vel::set_vecz(::int32_t value) {
  _internal_set_vecz(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Vel.vecZ)
}
inline ::int32_t UserInfo_Vel::_internal_vecz() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vecz_;
}
inline void UserInfo_Vel::_internal_set_vecz(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vecz_ = value;
}

// -------------------------------------------------------------------

// UserInfo

// required int32 id = 1;
inline bool UserInfo::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UserInfo::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t UserInfo::id() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.id)
  return _internal_id();
}
inline void UserInfo::set_id(::int32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.id)
}
inline ::int32_t UserInfo::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void UserInfo::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// required .msgTest.UserInfo.Pos pos = 2;
inline bool UserInfo::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline void UserInfo::clear_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo_Pos& UserInfo::_internal_pos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::UserInfo_Pos* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo_Pos&>(::msgTest::_UserInfo_Pos_default_instance_);
}
inline const ::msgTest::UserInfo_Pos& UserInfo::pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.pos)
  return _internal_pos();
}
inline void UserInfo::unsafe_arena_set_allocated_pos(::msgTest::UserInfo_Pos* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::msgTest::UserInfo_Pos*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.UserInfo.pos)
}
inline ::msgTest::UserInfo_Pos* UserInfo::release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo_Pos* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::UserInfo_Pos* UserInfo::unsafe_arena_release_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.UserInfo.pos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo_Pos* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo_Pos* UserInfo::_internal_mutable_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::UserInfo_Pos>(GetArena());
    _impl_.pos_ = reinterpret_cast<::msgTest::UserInfo_Pos*>(p);
  }
  return _impl_.pos_;
}
inline ::msgTest::UserInfo_Pos* UserInfo::mutable_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::UserInfo_Pos* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msgTest.UserInfo.pos)
  return _msg;
}
inline void UserInfo::set_allocated_pos(::msgTest::UserInfo_Pos* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pos_ = reinterpret_cast<::msgTest::UserInfo_Pos*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.UserInfo.pos)
}

// required .msgTest.UserInfo.Vel vec = 3;
inline bool UserInfo::has_vec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vec_ != nullptr);
  return value;
}
inline void UserInfo::clear_vec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vec_ != nullptr) _impl_.vec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msgTest::UserInfo_Vel& UserInfo::_internal_vec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::UserInfo_Vel* p = _impl_.vec_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo_Vel&>(::msgTest::_UserInfo_Vel_default_instance_);
}
inline const ::msgTest::UserInfo_Vel& UserInfo::vec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.vec)
  return _internal_vec();
}
inline void UserInfo::unsafe_arena_set_allocated_vec(::msgTest::UserInfo_Vel* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vec_);
  }
  _impl_.vec_ = reinterpret_cast<::msgTest::UserInfo_Vel*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.UserInfo.vec)
}
inline ::msgTest::UserInfo_Vel* UserInfo::release_vec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::UserInfo_Vel* released = _impl_.vec_;
  _impl_.vec_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::UserInfo_Vel* UserInfo::unsafe_arena_release_vec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.UserInfo.vec)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::UserInfo_Vel* temp = _impl_.vec_;
  _impl_.vec_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo_Vel* UserInfo::_internal_mutable_vec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vec_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::UserInfo_Vel>(GetArena());
    _impl_.vec_ = reinterpret_cast<::msgTest::UserInfo_Vel*>(p);
  }
  return _impl_.vec_;
}
inline ::msgTest::UserInfo_Vel* UserInfo::mutable_vec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msgTest::UserInfo_Vel* _msg = _internal_mutable_vec();
  // @@protoc_insertion_point(field_mutable:msgTest.UserInfo.vec)
  return _msg;
}
inline void UserInfo::set_allocated_vec(::msgTest::UserInfo_Vel* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.vec_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.vec_ = reinterpret_cast<::msgTest::UserInfo_Vel*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.UserInfo.vec)
}

// -------------------------------------------------------------------

// CS_Send_User_Info

// required .msgTest.UserInfo userInfo = 1;
inline bool CS_Send_User_Info::has_userinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinfo_ != nullptr);
  return value;
}
inline void CS_Send_User_Info::clear_userinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.userinfo_ != nullptr) _impl_.userinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& CS_Send_User_Info::_internal_userinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::UserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& CS_Send_User_Info::userinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.CS_Send_User_Info.userInfo)
  return _internal_userinfo();
}
inline void CS_Send_User_Info::unsafe_arena_set_allocated_userinfo(::msgTest::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = reinterpret_cast<::msgTest::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.CS_Send_User_Info.userInfo)
}
inline ::msgTest::UserInfo* CS_Send_User_Info::release_userinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* released = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::unsafe_arena_release_userinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.CS_Send_User_Info.userInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::_internal_mutable_userinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.userinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::UserInfo>(GetArena());
    _impl_.userinfo_ = reinterpret_cast<::msgTest::UserInfo*>(p);
  }
  return _impl_.userinfo_;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::mutable_userinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::UserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Send_User_Info.userInfo)
  return _msg;
}
inline void CS_Send_User_Info::set_allocated_userinfo(::msgTest::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.userinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.userinfo_ = reinterpret_cast<::msgTest::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Send_User_Info.userInfo)
}

// -------------------------------------------------------------------

// SC_Response_User_Info

// required .msgTest.UserInfo userInfo = 1;
inline bool SC_Response_User_Info::has_userinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinfo_ != nullptr);
  return value;
}
inline void SC_Response_User_Info::clear_userinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.userinfo_ != nullptr) _impl_.userinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& SC_Response_User_Info::_internal_userinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::UserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& SC_Response_User_Info::userinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Response_User_Info.userInfo)
  return _internal_userinfo();
}
inline void SC_Response_User_Info::unsafe_arena_set_allocated_userinfo(::msgTest::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = reinterpret_cast<::msgTest::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Response_User_Info.userInfo)
}
inline ::msgTest::UserInfo* SC_Response_User_Info::release_userinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* released = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::unsafe_arena_release_userinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Response_User_Info.userInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::_internal_mutable_userinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.userinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::UserInfo>(GetArena());
    _impl_.userinfo_ = reinterpret_cast<::msgTest::UserInfo*>(p);
  }
  return _impl_.userinfo_;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::mutable_userinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::UserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Response_User_Info.userInfo)
  return _msg;
}
inline void SC_Response_User_Info::set_allocated_userinfo(::msgTest::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.userinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.userinfo_ = reinterpret_cast<::msgTest::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Response_User_Info.userInfo)
}

// -------------------------------------------------------------------

// SC_Broadcast_User_Info

// repeated .msgTest.UserInfo usersInfo = 1;
inline int SC_Broadcast_User_Info::_internal_usersinfo_size() const {
  return _internal_usersinfo().size();
}
inline int SC_Broadcast_User_Info::usersinfo_size() const {
  return _internal_usersinfo_size();
}
inline void SC_Broadcast_User_Info::clear_usersinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usersinfo_.Clear();
}
inline ::msgTest::UserInfo* SC_Broadcast_User_Info::mutable_usersinfo(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _internal_mutable_usersinfo()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msgTest::UserInfo>* SC_Broadcast_User_Info::mutable_usersinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msgTest.SC_Broadcast_User_Info.usersInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_usersinfo();
}
inline const ::msgTest::UserInfo& SC_Broadcast_User_Info::usersinfo(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _internal_usersinfo().Get(index);
}
inline ::msgTest::UserInfo* SC_Broadcast_User_Info::add_usersinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msgTest::UserInfo* _add = _internal_mutable_usersinfo()->Add();
  // @@protoc_insertion_point(field_add:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msgTest::UserInfo>& SC_Broadcast_User_Info::usersinfo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _internal_usersinfo();
}
inline const ::google::protobuf::RepeatedPtrField<::msgTest::UserInfo>&
SC_Broadcast_User_Info::_internal_usersinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usersinfo_;
}
inline ::google::protobuf::RepeatedPtrField<::msgTest::UserInfo>*
SC_Broadcast_User_Info::_internal_mutable_usersinfo() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.usersinfo_;
}

// -------------------------------------------------------------------

// SC_Add_User

// required .msgTest.UserInfo usersInfo = 1;
inline bool SC_Add_User::has_usersinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.usersinfo_ != nullptr);
  return value;
}
inline void SC_Add_User::clear_usersinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.usersinfo_ != nullptr) _impl_.usersinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& SC_Add_User::_internal_usersinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::UserInfo* p = _impl_.usersinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& SC_Add_User::usersinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Add_User.usersInfo)
  return _internal_usersinfo();
}
inline void SC_Add_User::unsafe_arena_set_allocated_usersinfo(::msgTest::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.usersinfo_);
  }
  _impl_.usersinfo_ = reinterpret_cast<::msgTest::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Add_User.usersInfo)
}
inline ::msgTest::UserInfo* SC_Add_User::release_usersinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* released = _impl_.usersinfo_;
  _impl_.usersinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::UserInfo* SC_Add_User::unsafe_arena_release_usersinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Add_User.usersInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.usersinfo_;
  _impl_.usersinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* SC_Add_User::_internal_mutable_usersinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.usersinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::UserInfo>(GetArena());
    _impl_.usersinfo_ = reinterpret_cast<::msgTest::UserInfo*>(p);
  }
  return _impl_.usersinfo_;
}
inline ::msgTest::UserInfo* SC_Add_User::mutable_usersinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::UserInfo* _msg = _internal_mutable_usersinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Add_User.usersInfo)
  return _msg;
}
inline void SC_Add_User::set_allocated_usersinfo(::msgTest::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.usersinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.usersinfo_ = reinterpret_cast<::msgTest::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Add_User.usersInfo)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgTest


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // messageTest_2eproto_2epb_2eh
