// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: messageTest.proto
// Protobuf C++ Version: 5.29.2

#ifndef messageTest_2eproto_2epb_2eh
#define messageTest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messageTest_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_messageTest_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_messageTest_2eproto;
namespace msgTest {
class CS_Create_Room_Request;
struct CS_Create_Room_RequestDefaultTypeInternal;
extern CS_Create_Room_RequestDefaultTypeInternal _CS_Create_Room_Request_default_instance_;
class CS_Enter_Room_Request;
struct CS_Enter_Room_RequestDefaultTypeInternal;
extern CS_Enter_Room_RequestDefaultTypeInternal _CS_Enter_Room_Request_default_instance_;
class CS_Login_Request;
struct CS_Login_RequestDefaultTypeInternal;
extern CS_Login_RequestDefaultTypeInternal _CS_Login_Request_default_instance_;
class CS_My_Player_Info_Request;
struct CS_My_Player_Info_RequestDefaultTypeInternal;
extern CS_My_Player_Info_RequestDefaultTypeInternal _CS_My_Player_Info_Request_default_instance_;
class CS_Ping;
struct CS_PingDefaultTypeInternal;
extern CS_PingDefaultTypeInternal _CS_Ping_default_instance_;
class CS_Player_Move_Request;
struct CS_Player_Move_RequestDefaultTypeInternal;
extern CS_Player_Move_RequestDefaultTypeInternal _CS_Player_Move_Request_default_instance_;
class CS_Room_List_Request;
struct CS_Room_List_RequestDefaultTypeInternal;
extern CS_Room_List_RequestDefaultTypeInternal _CS_Room_List_Request_default_instance_;
class CS_Room_Player_List_Request;
struct CS_Room_Player_List_RequestDefaultTypeInternal;
extern CS_Room_Player_List_RequestDefaultTypeInternal _CS_Room_Player_List_Request_default_instance_;
class CS_Skill_Use;
struct CS_Skill_UseDefaultTypeInternal;
extern CS_Skill_UseDefaultTypeInternal _CS_Skill_Use_default_instance_;
class MoveState;
struct MoveStateDefaultTypeInternal;
extern MoveStateDefaultTypeInternal _MoveState_default_instance_;
class PacketFrame;
struct PacketFrameDefaultTypeInternal;
extern PacketFrameDefaultTypeInternal _PacketFrame_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class SC_Create_Room_Response;
struct SC_Create_Room_ResponseDefaultTypeInternal;
extern SC_Create_Room_ResponseDefaultTypeInternal _SC_Create_Room_Response_default_instance_;
class SC_Enter_Room_Response;
struct SC_Enter_Room_ResponseDefaultTypeInternal;
extern SC_Enter_Room_ResponseDefaultTypeInternal _SC_Enter_Room_Response_default_instance_;
class SC_Login_Response;
struct SC_Login_ResponseDefaultTypeInternal;
extern SC_Login_ResponseDefaultTypeInternal _SC_Login_Response_default_instance_;
class SC_My_Player_Info_Response;
struct SC_My_Player_Info_ResponseDefaultTypeInternal;
extern SC_My_Player_Info_ResponseDefaultTypeInternal _SC_My_Player_Info_Response_default_instance_;
class SC_Player_Enter_Room_Notification;
struct SC_Player_Enter_Room_NotificationDefaultTypeInternal;
extern SC_Player_Enter_Room_NotificationDefaultTypeInternal _SC_Player_Enter_Room_Notification_default_instance_;
class SC_Player_List_In_Grid;
struct SC_Player_List_In_GridDefaultTypeInternal;
extern SC_Player_List_In_GridDefaultTypeInternal _SC_Player_List_In_Grid_default_instance_;
class SC_Player_Move_Notification;
struct SC_Player_Move_NotificationDefaultTypeInternal;
extern SC_Player_Move_NotificationDefaultTypeInternal _SC_Player_Move_Notification_default_instance_;
class SC_Pong;
struct SC_PongDefaultTypeInternal;
extern SC_PongDefaultTypeInternal _SC_Pong_default_instance_;
class SC_Room_List_Response;
struct SC_Room_List_ResponseDefaultTypeInternal;
extern SC_Room_List_ResponseDefaultTypeInternal _SC_Room_List_Response_default_instance_;
class SC_Room_Player_List_Response;
struct SC_Room_Player_List_ResponseDefaultTypeInternal;
extern SC_Room_Player_List_ResponseDefaultTypeInternal _SC_Room_Player_List_Response_default_instance_;
class SC_Skill_Cast;
struct SC_Skill_CastDefaultTypeInternal;
extern SC_Skill_CastDefaultTypeInternal _SC_Skill_Cast_default_instance_;
class SC_Skill_Result;
struct SC_Skill_ResultDefaultTypeInternal;
extern SC_Skill_ResultDefaultTypeInternal _SC_Skill_Result_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace msgTest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace msgTest {
enum SkillType : int {
  SKILL_TYPE_UNKNOWN = 0,
  SKILL_TYPE_PROJECTILE = 1,
  SKILL_TYPE_AOE = 2,
  SKILL_TYPE_TARGET = 3,
  SkillType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SkillType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SkillType_IsValid(int value);
extern const uint32_t SkillType_internal_data_[];
constexpr SkillType SkillType_MIN = static_cast<SkillType>(0);
constexpr SkillType SkillType_MAX = static_cast<SkillType>(3);
constexpr int SkillType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
SkillType_descriptor();
template <typename T>
const std::string& SkillType_Name(T value) {
  static_assert(std::is_same<T, SkillType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SkillType_Name().");
  return SkillType_Name(static_cast<SkillType>(value));
}
template <>
inline const std::string& SkillType_Name(SkillType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SkillType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SkillType_Parse(absl::string_view name, SkillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkillType>(
      SkillType_descriptor(), name, value);
}
enum SkillFailType : int {
  SKILL_FAIL_TYPE_UNKNOWN = 0,
  SkillFailType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SkillFailType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SkillFailType_IsValid(int value);
extern const uint32_t SkillFailType_internal_data_[];
constexpr SkillFailType SkillFailType_MIN = static_cast<SkillFailType>(0);
constexpr SkillFailType SkillFailType_MAX = static_cast<SkillFailType>(0);
constexpr int SkillFailType_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
SkillFailType_descriptor();
template <typename T>
const std::string& SkillFailType_Name(T value) {
  static_assert(std::is_same<T, SkillFailType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SkillFailType_Name().");
  return SkillFailType_Name(static_cast<SkillFailType>(value));
}
template <>
inline const std::string& SkillFailType_Name(SkillFailType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SkillFailType_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool SkillFailType_Parse(absl::string_view name, SkillFailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkillFailType>(
      SkillFailType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Vector final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vector* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vector));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector(const Vector& from) : Vector(nullptr, from) {}
  inline Vector(Vector&& from) noexcept
      : Vector(nullptr, std::move(from)) {}
  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
        &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Vector& a, Vector& b) { a.Swap(&b); }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vector>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector& from) { Vector::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vector* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.Vector"; }

 protected:
  explicit Vector(::google::protobuf::Arena* arena);
  Vector(::google::protobuf::Arena* arena, const Vector& from);
  Vector(::google::protobuf::Arena* arena, Vector&& from) noexcept
      : Vector(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // sint32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // sint32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // sint32 z = 3;
  void clear_z() ;
  ::int32_t z() const;
  void set_z(::int32_t value);

  private:
  ::int32_t _internal_z() const;
  void _internal_set_z(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.Vector)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vector& from_msg);
    ::int32_t x_;
    ::int32_t y_;
    ::int32_t z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Pong final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Pong) */ {
 public:
  inline SC_Pong() : SC_Pong(nullptr) {}
  ~SC_Pong() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Pong* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Pong));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Pong(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Pong(const SC_Pong& from) : SC_Pong(nullptr, from) {}
  inline SC_Pong(SC_Pong&& from) noexcept
      : SC_Pong(nullptr, std::move(from)) {}
  inline SC_Pong& operator=(const SC_Pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Pong& operator=(SC_Pong&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Pong* internal_default_instance() {
    return reinterpret_cast<const SC_Pong*>(
        &_SC_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SC_Pong& a, SC_Pong& b) { a.Swap(&b); }
  inline void Swap(SC_Pong* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Pong* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Pong* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Pong>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Pong& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Pong& from) { SC_Pong::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Pong* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Pong"; }

 protected:
  explicit SC_Pong(::google::protobuf::Arena* arena);
  SC_Pong(::google::protobuf::Arena* arena, const SC_Pong& from);
  SC_Pong(::google::protobuf::Arena* arena, SC_Pong&& from) noexcept
      : SC_Pong(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampFieldNumber = 1,
    kServerTimestampFieldNumber = 2,
  };
  // int64 timestamp = 1;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int64 serverTimestamp = 2;
  void clear_servertimestamp() ;
  ::int64_t servertimestamp() const;
  void set_servertimestamp(::int64_t value);

  private:
  ::int64_t _internal_servertimestamp() const;
  void _internal_set_servertimestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Pong)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Pong& from_msg);
    ::int64_t timestamp_;
    ::int64_t servertimestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Player_List_In_Grid final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Player_List_In_Grid) */ {
 public:
  inline SC_Player_List_In_Grid() : SC_Player_List_In_Grid(nullptr) {}
  ~SC_Player_List_In_Grid() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Player_List_In_Grid* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Player_List_In_Grid));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Player_List_In_Grid(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Player_List_In_Grid(const SC_Player_List_In_Grid& from) : SC_Player_List_In_Grid(nullptr, from) {}
  inline SC_Player_List_In_Grid(SC_Player_List_In_Grid&& from) noexcept
      : SC_Player_List_In_Grid(nullptr, std::move(from)) {}
  inline SC_Player_List_In_Grid& operator=(const SC_Player_List_In_Grid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Player_List_In_Grid& operator=(SC_Player_List_In_Grid&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Player_List_In_Grid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Player_List_In_Grid* internal_default_instance() {
    return reinterpret_cast<const SC_Player_List_In_Grid*>(
        &_SC_Player_List_In_Grid_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(SC_Player_List_In_Grid& a, SC_Player_List_In_Grid& b) { a.Swap(&b); }
  inline void Swap(SC_Player_List_In_Grid* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Player_List_In_Grid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Player_List_In_Grid* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Player_List_In_Grid>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Player_List_In_Grid& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Player_List_In_Grid& from) { SC_Player_List_In_Grid::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Player_List_In_Grid* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Player_List_In_Grid"; }

 protected:
  explicit SC_Player_List_In_Grid(::google::protobuf::Arena* arena);
  SC_Player_List_In_Grid(::google::protobuf::Arena* arena, const SC_Player_List_In_Grid& from);
  SC_Player_List_In_Grid(::google::protobuf::Arena* arena, SC_Player_List_In_Grid&& from) noexcept
      : SC_Player_List_In_Grid(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerNameListFieldNumber = 1,
  };
  // repeated string playerNameList = 1;
  int playernamelist_size() const;
  private:
  int _internal_playernamelist_size() const;

  public:
  void clear_playernamelist() ;
  const std::string& playernamelist(int index) const;
  std::string* mutable_playernamelist(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_playernamelist(int index, Arg_&& value, Args_... args);
  std::string* add_playernamelist();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_playernamelist(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& playernamelist() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_playernamelist();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_playernamelist() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_playernamelist();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Player_List_In_Grid)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Player_List_In_Grid& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> playernamelist_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Login_Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Login_Response) */ {
 public:
  inline SC_Login_Response() : SC_Login_Response(nullptr) {}
  ~SC_Login_Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Login_Response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Login_Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Login_Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Login_Response(const SC_Login_Response& from) : SC_Login_Response(nullptr, from) {}
  inline SC_Login_Response(SC_Login_Response&& from) noexcept
      : SC_Login_Response(nullptr, std::move(from)) {}
  inline SC_Login_Response& operator=(const SC_Login_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Login_Response& operator=(SC_Login_Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Login_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Login_Response* internal_default_instance() {
    return reinterpret_cast<const SC_Login_Response*>(
        &_SC_Login_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SC_Login_Response& a, SC_Login_Response& b) { a.Swap(&b); }
  inline void Swap(SC_Login_Response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Login_Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Login_Response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Login_Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Login_Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Login_Response& from) { SC_Login_Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Login_Response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Login_Response"; }

 protected:
  explicit SC_Login_Response(::google::protobuf::Arena* arena);
  SC_Login_Response(::google::protobuf::Arena* arena, const SC_Login_Response& from);
  SC_Login_Response(::google::protobuf::Arena* arena, SC_Login_Response&& from) noexcept
      : SC_Login_Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string errorMessage = 2;
  void clear_errormessage() ;
  const std::string& errormessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errormessage(Arg_&& arg, Args_... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* value);

  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(
      const std::string& value);
  std::string* _internal_mutable_errormessage();

  public:
  // uint64 sessionId = 3;
  void clear_sessionid() ;
  ::uint64_t sessionid() const;
  void set_sessionid(::uint64_t value);

  private:
  ::uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(::uint64_t value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Login_Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Login_Response& from_msg);
    ::google::protobuf::internal::ArenaStringPtr errormessage_;
    ::uint64_t sessionid_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class Room final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Room* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Room));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Room(
      ::google::protobuf::internal::ConstantInitialized);

  inline Room(const Room& from) : Room(nullptr, from) {}
  inline Room(Room&& from) noexcept
      : Room(nullptr, std::move(from)) {}
  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
        &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Room& a, Room& b) { a.Swap(&b); }
  inline void Swap(Room* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Room>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Room& from) { Room::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Room* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.Room"; }

 protected:
  explicit Room(::google::protobuf::Arena* arena);
  Room(::google::protobuf::Arena* arena, const Room& from);
  Room(::google::protobuf::Arena* arena, Room&& from) noexcept
      : Room(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomNameFieldNumber = 2,
    kHostPlayerNameFieldNumber = 5,
    kRoomIdFieldNumber = 1,
    kMaxPlayerCountFieldNumber = 3,
    kPlayerCountFieldNumber = 4,
  };
  // string roomName = 2;
  void clear_roomname() ;
  const std::string& roomname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_roomname(Arg_&& arg, Args_... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* value);

  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(
      const std::string& value);
  std::string* _internal_mutable_roomname();

  public:
  // string hostPlayerName = 5;
  void clear_hostplayername() ;
  const std::string& hostplayername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hostplayername(Arg_&& arg, Args_... args);
  std::string* mutable_hostplayername();
  PROTOBUF_NODISCARD std::string* release_hostplayername();
  void set_allocated_hostplayername(std::string* value);

  private:
  const std::string& _internal_hostplayername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostplayername(
      const std::string& value);
  std::string* _internal_mutable_hostplayername();

  public:
  // int32 roomId = 1;
  void clear_roomid() ;
  ::int32_t roomid() const;
  void set_roomid(::int32_t value);

  private:
  ::int32_t _internal_roomid() const;
  void _internal_set_roomid(::int32_t value);

  public:
  // int32 maxPlayerCount = 3;
  void clear_maxplayercount() ;
  ::int32_t maxplayercount() const;
  void set_maxplayercount(::int32_t value);

  private:
  ::int32_t _internal_maxplayercount() const;
  void _internal_set_maxplayercount(::int32_t value);

  public:
  // int32 playerCount = 4;
  void clear_playercount() ;
  ::int32_t playercount() const;
  void set_playercount(::int32_t value);

  private:
  ::int32_t _internal_playercount() const;
  void _internal_set_playercount(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.Room)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Room& from_msg);
    ::google::protobuf::internal::ArenaStringPtr roomname_;
    ::google::protobuf::internal::ArenaStringPtr hostplayername_;
    ::int32_t roomid_;
    ::int32_t maxplayercount_;
    ::int32_t playercount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class PacketFrame final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.PacketFrame) */ {
 public:
  inline PacketFrame() : PacketFrame(nullptr) {}
  ~PacketFrame() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PacketFrame* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PacketFrame));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PacketFrame(
      ::google::protobuf::internal::ConstantInitialized);

  inline PacketFrame(const PacketFrame& from) : PacketFrame(nullptr, from) {}
  inline PacketFrame(PacketFrame&& from) noexcept
      : PacketFrame(nullptr, std::move(from)) {}
  inline PacketFrame& operator=(const PacketFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketFrame& operator=(PacketFrame&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketFrame* internal_default_instance() {
    return reinterpret_cast<const PacketFrame*>(
        &_PacketFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PacketFrame& a, PacketFrame& b) { a.Swap(&b); }
  inline void Swap(PacketFrame* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketFrame* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PacketFrame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PacketFrame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PacketFrame& from) { PacketFrame::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PacketFrame* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.PacketFrame"; }

 protected:
  explicit PacketFrame(::google::protobuf::Arena* arena);
  PacketFrame(::google::protobuf::Arena* arena, const PacketFrame& from);
  PacketFrame(::google::protobuf::Arena* arena, PacketFrame&& from) noexcept
      : PacketFrame(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPayloadFieldNumber = 4,
    kMessageIdFieldNumber = 1,
    kTotalFrameCountFieldNumber = 2,
    kFrameIndexFieldNumber = 3,
  };
  // bytes payload = 4;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // int32 messageId = 1;
  void clear_messageid() ;
  ::int32_t messageid() const;
  void set_messageid(::int32_t value);

  private:
  ::int32_t _internal_messageid() const;
  void _internal_set_messageid(::int32_t value);

  public:
  // int32 totalFrameCount = 2;
  void clear_totalframecount() ;
  ::int32_t totalframecount() const;
  void set_totalframecount(::int32_t value);

  private:
  ::int32_t _internal_totalframecount() const;
  void _internal_set_totalframecount(::int32_t value);

  public:
  // int32 frameIndex = 3;
  void clear_frameindex() ;
  ::int32_t frameindex() const;
  void set_frameindex(::int32_t value);

  private:
  ::int32_t _internal_frameindex() const;
  void _internal_set_frameindex(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.PacketFrame)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PacketFrame& from_msg);
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::int32_t messageid_;
    ::int32_t totalframecount_;
    ::int32_t frameindex_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Room_Player_List_Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_Room_Player_List_Request) */ {
 public:
  inline CS_Room_Player_List_Request() : CS_Room_Player_List_Request(nullptr) {}
  ~CS_Room_Player_List_Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Room_Player_List_Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Room_Player_List_Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Room_Player_List_Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Room_Player_List_Request(const CS_Room_Player_List_Request& from) : CS_Room_Player_List_Request(nullptr, from) {}
  inline CS_Room_Player_List_Request(CS_Room_Player_List_Request&& from) noexcept
      : CS_Room_Player_List_Request(nullptr, std::move(from)) {}
  inline CS_Room_Player_List_Request& operator=(const CS_Room_Player_List_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Room_Player_List_Request& operator=(CS_Room_Player_List_Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Room_Player_List_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Room_Player_List_Request* internal_default_instance() {
    return reinterpret_cast<const CS_Room_Player_List_Request*>(
        &_CS_Room_Player_List_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(CS_Room_Player_List_Request& a, CS_Room_Player_List_Request& b) { a.Swap(&b); }
  inline void Swap(CS_Room_Player_List_Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Room_Player_List_Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Room_Player_List_Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Room_Player_List_Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Room_Player_List_Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Room_Player_List_Request& from) { CS_Room_Player_List_Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Room_Player_List_Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Room_Player_List_Request"; }

 protected:
  explicit CS_Room_Player_List_Request(::google::protobuf::Arena* arena);
  CS_Room_Player_List_Request(::google::protobuf::Arena* arena, const CS_Room_Player_List_Request& from);
  CS_Room_Player_List_Request(::google::protobuf::Arena* arena, CS_Room_Player_List_Request&& from) noexcept
      : CS_Room_Player_List_Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // int32 roomId = 1;
  void clear_roomid() ;
  ::int32_t roomid() const;
  void set_roomid(::int32_t value);

  private:
  ::int32_t _internal_roomid() const;
  void _internal_set_roomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_Room_Player_List_Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Room_Player_List_Request& from_msg);
    ::int32_t roomid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Room_List_Request final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:msgTest.CS_Room_List_Request) */ {
 public:
  inline CS_Room_List_Request() : CS_Room_List_Request(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Room_List_Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Room_List_Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Room_List_Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Room_List_Request(const CS_Room_List_Request& from) : CS_Room_List_Request(nullptr, from) {}
  inline CS_Room_List_Request(CS_Room_List_Request&& from) noexcept
      : CS_Room_List_Request(nullptr, std::move(from)) {}
  inline CS_Room_List_Request& operator=(const CS_Room_List_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Room_List_Request& operator=(CS_Room_List_Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Room_List_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Room_List_Request* internal_default_instance() {
    return reinterpret_cast<const CS_Room_List_Request*>(
        &_CS_Room_List_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(CS_Room_List_Request& a, CS_Room_List_Request& b) { a.Swap(&b); }
  inline void Swap(CS_Room_List_Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Room_List_Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Room_List_Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CS_Room_List_Request>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CS_Room_List_Request& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CS_Room_List_Request& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Room_List_Request"; }

 protected:
  explicit CS_Room_List_Request(::google::protobuf::Arena* arena);
  CS_Room_List_Request(::google::protobuf::Arena* arena, const CS_Room_List_Request& from);
  CS_Room_List_Request(::google::protobuf::Arena* arena, CS_Room_List_Request&& from) noexcept
      : CS_Room_List_Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:msgTest.CS_Room_List_Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Room_List_Request& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Ping final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_Ping) */ {
 public:
  inline CS_Ping() : CS_Ping(nullptr) {}
  ~CS_Ping() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Ping* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Ping));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Ping(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Ping(const CS_Ping& from) : CS_Ping(nullptr, from) {}
  inline CS_Ping(CS_Ping&& from) noexcept
      : CS_Ping(nullptr, std::move(from)) {}
  inline CS_Ping& operator=(const CS_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Ping& operator=(CS_Ping&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Ping* internal_default_instance() {
    return reinterpret_cast<const CS_Ping*>(
        &_CS_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(CS_Ping& a, CS_Ping& b) { a.Swap(&b); }
  inline void Swap(CS_Ping* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Ping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Ping* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Ping>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Ping& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Ping& from) { CS_Ping::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Ping* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Ping"; }

 protected:
  explicit CS_Ping(::google::protobuf::Arena* arena);
  CS_Ping(::google::protobuf::Arena* arena, const CS_Ping& from);
  CS_Ping(::google::protobuf::Arena* arena, CS_Ping&& from) noexcept
      : CS_Ping(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_Ping)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Ping& from_msg);
    ::int64_t timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_My_Player_Info_Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_My_Player_Info_Request) */ {
 public:
  inline CS_My_Player_Info_Request() : CS_My_Player_Info_Request(nullptr) {}
  ~CS_My_Player_Info_Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_My_Player_Info_Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_My_Player_Info_Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_My_Player_Info_Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_My_Player_Info_Request(const CS_My_Player_Info_Request& from) : CS_My_Player_Info_Request(nullptr, from) {}
  inline CS_My_Player_Info_Request(CS_My_Player_Info_Request&& from) noexcept
      : CS_My_Player_Info_Request(nullptr, std::move(from)) {}
  inline CS_My_Player_Info_Request& operator=(const CS_My_Player_Info_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_My_Player_Info_Request& operator=(CS_My_Player_Info_Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_My_Player_Info_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_My_Player_Info_Request* internal_default_instance() {
    return reinterpret_cast<const CS_My_Player_Info_Request*>(
        &_CS_My_Player_Info_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(CS_My_Player_Info_Request& a, CS_My_Player_Info_Request& b) { a.Swap(&b); }
  inline void Swap(CS_My_Player_Info_Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_My_Player_Info_Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_My_Player_Info_Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_My_Player_Info_Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_My_Player_Info_Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_My_Player_Info_Request& from) { CS_My_Player_Info_Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_My_Player_Info_Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_My_Player_Info_Request"; }

 protected:
  explicit CS_My_Player_Info_Request(::google::protobuf::Arena* arena);
  CS_My_Player_Info_Request(::google::protobuf::Arena* arena, const CS_My_Player_Info_Request& from);
  CS_My_Player_Info_Request(::google::protobuf::Arena* arena, CS_My_Player_Info_Request&& from) noexcept
      : CS_My_Player_Info_Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // uint64 sessionId = 1;
  void clear_sessionid() ;
  ::uint64_t sessionid() const;
  void set_sessionid(::uint64_t value);

  private:
  ::uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_My_Player_Info_Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_My_Player_Info_Request& from_msg);
    ::uint64_t sessionid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Login_Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_Login_Request) */ {
 public:
  inline CS_Login_Request() : CS_Login_Request(nullptr) {}
  ~CS_Login_Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Login_Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Login_Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Login_Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Login_Request(const CS_Login_Request& from) : CS_Login_Request(nullptr, from) {}
  inline CS_Login_Request(CS_Login_Request&& from) noexcept
      : CS_Login_Request(nullptr, std::move(from)) {}
  inline CS_Login_Request& operator=(const CS_Login_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Login_Request& operator=(CS_Login_Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Login_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Login_Request* internal_default_instance() {
    return reinterpret_cast<const CS_Login_Request*>(
        &_CS_Login_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(CS_Login_Request& a, CS_Login_Request& b) { a.Swap(&b); }
  inline void Swap(CS_Login_Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Login_Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Login_Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Login_Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Login_Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Login_Request& from) { CS_Login_Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Login_Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Login_Request"; }

 protected:
  explicit CS_Login_Request(::google::protobuf::Arena* arena);
  CS_Login_Request(::google::protobuf::Arena* arena, const CS_Login_Request& from);
  CS_Login_Request(::google::protobuf::Arena* arena, CS_Login_Request&& from) noexcept
      : CS_Login_Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_Login_Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Login_Request& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Enter_Room_Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_Enter_Room_Request) */ {
 public:
  inline CS_Enter_Room_Request() : CS_Enter_Room_Request(nullptr) {}
  ~CS_Enter_Room_Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Enter_Room_Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Enter_Room_Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Enter_Room_Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Enter_Room_Request(const CS_Enter_Room_Request& from) : CS_Enter_Room_Request(nullptr, from) {}
  inline CS_Enter_Room_Request(CS_Enter_Room_Request&& from) noexcept
      : CS_Enter_Room_Request(nullptr, std::move(from)) {}
  inline CS_Enter_Room_Request& operator=(const CS_Enter_Room_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Enter_Room_Request& operator=(CS_Enter_Room_Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Enter_Room_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Enter_Room_Request* internal_default_instance() {
    return reinterpret_cast<const CS_Enter_Room_Request*>(
        &_CS_Enter_Room_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(CS_Enter_Room_Request& a, CS_Enter_Room_Request& b) { a.Swap(&b); }
  inline void Swap(CS_Enter_Room_Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Enter_Room_Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Enter_Room_Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Enter_Room_Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Enter_Room_Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Enter_Room_Request& from) { CS_Enter_Room_Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Enter_Room_Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Enter_Room_Request"; }

 protected:
  explicit CS_Enter_Room_Request(::google::protobuf::Arena* arena);
  CS_Enter_Room_Request(::google::protobuf::Arena* arena, const CS_Enter_Room_Request& from);
  CS_Enter_Room_Request(::google::protobuf::Arena* arena, CS_Enter_Room_Request&& from) noexcept
      : CS_Enter_Room_Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // int32 roomId = 1;
  void clear_roomid() ;
  ::int32_t roomid() const;
  void set_roomid(::int32_t value);

  private:
  ::int32_t _internal_roomid() const;
  void _internal_set_roomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_Enter_Room_Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Enter_Room_Request& from_msg);
    ::int32_t roomid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Create_Room_Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_Create_Room_Request) */ {
 public:
  inline CS_Create_Room_Request() : CS_Create_Room_Request(nullptr) {}
  ~CS_Create_Room_Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Create_Room_Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Create_Room_Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Create_Room_Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Create_Room_Request(const CS_Create_Room_Request& from) : CS_Create_Room_Request(nullptr, from) {}
  inline CS_Create_Room_Request(CS_Create_Room_Request&& from) noexcept
      : CS_Create_Room_Request(nullptr, std::move(from)) {}
  inline CS_Create_Room_Request& operator=(const CS_Create_Room_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Create_Room_Request& operator=(CS_Create_Room_Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Create_Room_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Create_Room_Request* internal_default_instance() {
    return reinterpret_cast<const CS_Create_Room_Request*>(
        &_CS_Create_Room_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(CS_Create_Room_Request& a, CS_Create_Room_Request& b) { a.Swap(&b); }
  inline void Swap(CS_Create_Room_Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Create_Room_Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Create_Room_Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Create_Room_Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Create_Room_Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Create_Room_Request& from) { CS_Create_Room_Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Create_Room_Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Create_Room_Request"; }

 protected:
  explicit CS_Create_Room_Request(::google::protobuf::Arena* arena);
  CS_Create_Room_Request(::google::protobuf::Arena* arena, const CS_Create_Room_Request& from);
  CS_Create_Room_Request(::google::protobuf::Arena* arena, CS_Create_Room_Request&& from) noexcept
      : CS_Create_Room_Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomNameFieldNumber = 1,
    kHostNameFieldNumber = 2,
  };
  // string roomName = 1;
  void clear_roomname() ;
  const std::string& roomname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_roomname(Arg_&& arg, Args_... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* value);

  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(
      const std::string& value);
  std::string* _internal_mutable_roomname();

  public:
  // string hostName = 2;
  void clear_hostname() ;
  const std::string& hostname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hostname(Arg_&& arg, Args_... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* value);

  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(
      const std::string& value);
  std::string* _internal_mutable_hostname();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_Create_Room_Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Create_Room_Request& from_msg);
    ::google::protobuf::internal::ArenaStringPtr roomname_;
    ::google::protobuf::internal::ArenaStringPtr hostname_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Skill_Result final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Skill_Result) */ {
 public:
  inline SC_Skill_Result() : SC_Skill_Result(nullptr) {}
  ~SC_Skill_Result() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Skill_Result* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Skill_Result));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Skill_Result(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Skill_Result(const SC_Skill_Result& from) : SC_Skill_Result(nullptr, from) {}
  inline SC_Skill_Result(SC_Skill_Result&& from) noexcept
      : SC_Skill_Result(nullptr, std::move(from)) {}
  inline SC_Skill_Result& operator=(const SC_Skill_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Skill_Result& operator=(SC_Skill_Result&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Skill_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Skill_Result* internal_default_instance() {
    return reinterpret_cast<const SC_Skill_Result*>(
        &_SC_Skill_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(SC_Skill_Result& a, SC_Skill_Result& b) { a.Swap(&b); }
  inline void Swap(SC_Skill_Result* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Skill_Result* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Skill_Result* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Skill_Result>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Skill_Result& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Skill_Result& from) { SC_Skill_Result::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Skill_Result* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Skill_Result"; }

 protected:
  explicit SC_Skill_Result(::google::protobuf::Arena* arena);
  SC_Skill_Result(::google::protobuf::Arena* arena, const SC_Skill_Result& from);
  SC_Skill_Result(::google::protobuf::Arena* arena, SC_Skill_Result&& from) noexcept
      : SC_Skill_Result(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDirectionFieldNumber = 4,
    kTargetPosFieldNumber = 5,
    kSuccessFieldNumber = 1,
    kSkillFailTypeFieldNumber = 2,
    kSkillIdFieldNumber = 3,
    kTargetIdFieldNumber = 6,
    kTimestampFieldNumber = 7,
  };
  // .msgTest.Vector direction = 4;
  bool has_direction() const;
  void clear_direction() ;
  const ::msgTest::Vector& direction() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_direction();
  ::msgTest::Vector* mutable_direction();
  void set_allocated_direction(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_direction(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_direction();

  private:
  const ::msgTest::Vector& _internal_direction() const;
  ::msgTest::Vector* _internal_mutable_direction();

  public:
  // .msgTest.Vector targetPos = 5;
  bool has_targetpos() const;
  void clear_targetpos() ;
  const ::msgTest::Vector& targetpos() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_targetpos();
  ::msgTest::Vector* mutable_targetpos();
  void set_allocated_targetpos(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_targetpos(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_targetpos();

  private:
  const ::msgTest::Vector& _internal_targetpos() const;
  ::msgTest::Vector* _internal_mutable_targetpos();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // .msgTest.SkillFailType skillFailType = 2;
  void clear_skillfailtype() ;
  ::msgTest::SkillFailType skillfailtype() const;
  void set_skillfailtype(::msgTest::SkillFailType value);

  private:
  ::msgTest::SkillFailType _internal_skillfailtype() const;
  void _internal_set_skillfailtype(::msgTest::SkillFailType value);

  public:
  // int32 skillId = 3;
  void clear_skillid() ;
  ::int32_t skillid() const;
  void set_skillid(::int32_t value);

  private:
  ::int32_t _internal_skillid() const;
  void _internal_set_skillid(::int32_t value);

  public:
  // int32 targetId = 6;
  void clear_targetid() ;
  ::int32_t targetid() const;
  void set_targetid(::int32_t value);

  private:
  ::int32_t _internal_targetid() const;
  void _internal_set_targetid(::int32_t value);

  public:
  // int64 timestamp = 7;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Skill_Result)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Skill_Result& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::Vector* direction_;
    ::msgTest::Vector* targetpos_;
    bool success_;
    int skillfailtype_;
    ::int32_t skillid_;
    ::int32_t targetid_;
    ::int64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Skill_Cast final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Skill_Cast) */ {
 public:
  inline SC_Skill_Cast() : SC_Skill_Cast(nullptr) {}
  ~SC_Skill_Cast() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Skill_Cast* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Skill_Cast));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Skill_Cast(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Skill_Cast(const SC_Skill_Cast& from) : SC_Skill_Cast(nullptr, from) {}
  inline SC_Skill_Cast(SC_Skill_Cast&& from) noexcept
      : SC_Skill_Cast(nullptr, std::move(from)) {}
  inline SC_Skill_Cast& operator=(const SC_Skill_Cast& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Skill_Cast& operator=(SC_Skill_Cast&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Skill_Cast& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Skill_Cast* internal_default_instance() {
    return reinterpret_cast<const SC_Skill_Cast*>(
        &_SC_Skill_Cast_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(SC_Skill_Cast& a, SC_Skill_Cast& b) { a.Swap(&b); }
  inline void Swap(SC_Skill_Cast* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Skill_Cast* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Skill_Cast* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Skill_Cast>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Skill_Cast& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Skill_Cast& from) { SC_Skill_Cast::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Skill_Cast* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Skill_Cast"; }

 protected:
  explicit SC_Skill_Cast(::google::protobuf::Arena* arena);
  SC_Skill_Cast(::google::protobuf::Arena* arena, const SC_Skill_Cast& from);
  SC_Skill_Cast(::google::protobuf::Arena* arena, SC_Skill_Cast&& from) noexcept
      : SC_Skill_Cast(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartPosFieldNumber = 4,
    kDirectionFieldNumber = 5,
    kTargetPosFieldNumber = 6,
    kCasterIdFieldNumber = 1,
    kSkillIdFieldNumber = 2,
    kSkillTypeFieldNumber = 3,
    kTargetIdFieldNumber = 7,
    kTimestampFieldNumber = 8,
  };
  // .msgTest.Vector startPos = 4;
  bool has_startpos() const;
  void clear_startpos() ;
  const ::msgTest::Vector& startpos() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_startpos();
  ::msgTest::Vector* mutable_startpos();
  void set_allocated_startpos(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_startpos(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_startpos();

  private:
  const ::msgTest::Vector& _internal_startpos() const;
  ::msgTest::Vector* _internal_mutable_startpos();

  public:
  // .msgTest.Vector direction = 5;
  bool has_direction() const;
  void clear_direction() ;
  const ::msgTest::Vector& direction() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_direction();
  ::msgTest::Vector* mutable_direction();
  void set_allocated_direction(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_direction(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_direction();

  private:
  const ::msgTest::Vector& _internal_direction() const;
  ::msgTest::Vector* _internal_mutable_direction();

  public:
  // .msgTest.Vector targetPos = 6;
  bool has_targetpos() const;
  void clear_targetpos() ;
  const ::msgTest::Vector& targetpos() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_targetpos();
  ::msgTest::Vector* mutable_targetpos();
  void set_allocated_targetpos(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_targetpos(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_targetpos();

  private:
  const ::msgTest::Vector& _internal_targetpos() const;
  ::msgTest::Vector* _internal_mutable_targetpos();

  public:
  // int32 casterId = 1;
  void clear_casterid() ;
  ::int32_t casterid() const;
  void set_casterid(::int32_t value);

  private:
  ::int32_t _internal_casterid() const;
  void _internal_set_casterid(::int32_t value);

  public:
  // int32 skillId = 2;
  void clear_skillid() ;
  ::int32_t skillid() const;
  void set_skillid(::int32_t value);

  private:
  ::int32_t _internal_skillid() const;
  void _internal_set_skillid(::int32_t value);

  public:
  // .msgTest.SkillType skillType = 3;
  void clear_skilltype() ;
  ::msgTest::SkillType skilltype() const;
  void set_skilltype(::msgTest::SkillType value);

  private:
  ::msgTest::SkillType _internal_skilltype() const;
  void _internal_set_skilltype(::msgTest::SkillType value);

  public:
  // int32 targetId = 7;
  void clear_targetid() ;
  ::int32_t targetid() const;
  void set_targetid(::int32_t value);

  private:
  ::int32_t _internal_targetid() const;
  void _internal_set_targetid(::int32_t value);

  public:
  // int64 timestamp = 8;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Skill_Cast)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Skill_Cast& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::Vector* startpos_;
    ::msgTest::Vector* direction_;
    ::msgTest::Vector* targetpos_;
    ::int32_t casterid_;
    ::int32_t skillid_;
    int skilltype_;
    ::int32_t targetid_;
    ::int64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Room_List_Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Room_List_Response) */ {
 public:
  inline SC_Room_List_Response() : SC_Room_List_Response(nullptr) {}
  ~SC_Room_List_Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Room_List_Response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Room_List_Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Room_List_Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Room_List_Response(const SC_Room_List_Response& from) : SC_Room_List_Response(nullptr, from) {}
  inline SC_Room_List_Response(SC_Room_List_Response&& from) noexcept
      : SC_Room_List_Response(nullptr, std::move(from)) {}
  inline SC_Room_List_Response& operator=(const SC_Room_List_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Room_List_Response& operator=(SC_Room_List_Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Room_List_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Room_List_Response* internal_default_instance() {
    return reinterpret_cast<const SC_Room_List_Response*>(
        &_SC_Room_List_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(SC_Room_List_Response& a, SC_Room_List_Response& b) { a.Swap(&b); }
  inline void Swap(SC_Room_List_Response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Room_List_Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Room_List_Response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Room_List_Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Room_List_Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Room_List_Response& from) { SC_Room_List_Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Room_List_Response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Room_List_Response"; }

 protected:
  explicit SC_Room_List_Response(::google::protobuf::Arena* arena);
  SC_Room_List_Response(::google::protobuf::Arena* arena, const SC_Room_List_Response& from);
  SC_Room_List_Response(::google::protobuf::Arena* arena, SC_Room_List_Response&& from) noexcept
      : SC_Room_List_Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomListFieldNumber = 1,
  };
  // repeated .msgTest.Room roomList = 1;
  int roomlist_size() const;
  private:
  int _internal_roomlist_size() const;

  public:
  void clear_roomlist() ;
  ::msgTest::Room* mutable_roomlist(int index);
  ::google::protobuf::RepeatedPtrField<::msgTest::Room>* mutable_roomlist();

  private:
  const ::google::protobuf::RepeatedPtrField<::msgTest::Room>& _internal_roomlist() const;
  ::google::protobuf::RepeatedPtrField<::msgTest::Room>* _internal_mutable_roomlist();
  public:
  const ::msgTest::Room& roomlist(int index) const;
  ::msgTest::Room* add_roomlist();
  const ::google::protobuf::RepeatedPtrField<::msgTest::Room>& roomlist() const;
  // @@protoc_insertion_point(class_scope:msgTest.SC_Room_List_Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Room_List_Response& from_msg);
    ::google::protobuf::RepeatedPtrField< ::msgTest::Room > roomlist_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Enter_Room_Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Enter_Room_Response) */ {
 public:
  inline SC_Enter_Room_Response() : SC_Enter_Room_Response(nullptr) {}
  ~SC_Enter_Room_Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Enter_Room_Response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Enter_Room_Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Enter_Room_Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Enter_Room_Response(const SC_Enter_Room_Response& from) : SC_Enter_Room_Response(nullptr, from) {}
  inline SC_Enter_Room_Response(SC_Enter_Room_Response&& from) noexcept
      : SC_Enter_Room_Response(nullptr, std::move(from)) {}
  inline SC_Enter_Room_Response& operator=(const SC_Enter_Room_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Enter_Room_Response& operator=(SC_Enter_Room_Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Enter_Room_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Enter_Room_Response* internal_default_instance() {
    return reinterpret_cast<const SC_Enter_Room_Response*>(
        &_SC_Enter_Room_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(SC_Enter_Room_Response& a, SC_Enter_Room_Response& b) { a.Swap(&b); }
  inline void Swap(SC_Enter_Room_Response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Enter_Room_Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Enter_Room_Response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Enter_Room_Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Enter_Room_Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Enter_Room_Response& from) { SC_Enter_Room_Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Enter_Room_Response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Enter_Room_Response"; }

 protected:
  explicit SC_Enter_Room_Response(::google::protobuf::Arena* arena);
  SC_Enter_Room_Response(::google::protobuf::Arena* arena, const SC_Enter_Room_Response& from);
  SC_Enter_Room_Response(::google::protobuf::Arena* arena, SC_Enter_Room_Response&& from) noexcept
      : SC_Enter_Room_Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kRoomFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string errorMessage = 2;
  void clear_errormessage() ;
  const std::string& errormessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errormessage(Arg_&& arg, Args_... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* value);

  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(
      const std::string& value);
  std::string* _internal_mutable_errormessage();

  public:
  // .msgTest.Room room = 3;
  bool has_room() const;
  void clear_room() ;
  const ::msgTest::Room& room() const;
  PROTOBUF_NODISCARD ::msgTest::Room* release_room();
  ::msgTest::Room* mutable_room();
  void set_allocated_room(::msgTest::Room* value);
  void unsafe_arena_set_allocated_room(::msgTest::Room* value);
  ::msgTest::Room* unsafe_arena_release_room();

  private:
  const ::msgTest::Room& _internal_room() const;
  ::msgTest::Room* _internal_mutable_room();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Enter_Room_Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Enter_Room_Response& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr errormessage_;
    ::msgTest::Room* room_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Create_Room_Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Create_Room_Response) */ {
 public:
  inline SC_Create_Room_Response() : SC_Create_Room_Response(nullptr) {}
  ~SC_Create_Room_Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Create_Room_Response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Create_Room_Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Create_Room_Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Create_Room_Response(const SC_Create_Room_Response& from) : SC_Create_Room_Response(nullptr, from) {}
  inline SC_Create_Room_Response(SC_Create_Room_Response&& from) noexcept
      : SC_Create_Room_Response(nullptr, std::move(from)) {}
  inline SC_Create_Room_Response& operator=(const SC_Create_Room_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Create_Room_Response& operator=(SC_Create_Room_Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Create_Room_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Create_Room_Response* internal_default_instance() {
    return reinterpret_cast<const SC_Create_Room_Response*>(
        &_SC_Create_Room_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(SC_Create_Room_Response& a, SC_Create_Room_Response& b) { a.Swap(&b); }
  inline void Swap(SC_Create_Room_Response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Create_Room_Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Create_Room_Response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Create_Room_Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Create_Room_Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Create_Room_Response& from) { SC_Create_Room_Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Create_Room_Response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Create_Room_Response"; }

 protected:
  explicit SC_Create_Room_Response(::google::protobuf::Arena* arena);
  SC_Create_Room_Response(::google::protobuf::Arena* arena, const SC_Create_Room_Response& from);
  SC_Create_Room_Response(::google::protobuf::Arena* arena, SC_Create_Room_Response&& from) noexcept
      : SC_Create_Room_Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kRoomFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string errorMessage = 2;
  void clear_errormessage() ;
  const std::string& errormessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errormessage(Arg_&& arg, Args_... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* value);

  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(
      const std::string& value);
  std::string* _internal_mutable_errormessage();

  public:
  // .msgTest.Room room = 3;
  bool has_room() const;
  void clear_room() ;
  const ::msgTest::Room& room() const;
  PROTOBUF_NODISCARD ::msgTest::Room* release_room();
  ::msgTest::Room* mutable_room();
  void set_allocated_room(::msgTest::Room* value);
  void unsafe_arena_set_allocated_room(::msgTest::Room* value);
  ::msgTest::Room* unsafe_arena_release_room();

  private:
  const ::msgTest::Room& _internal_room() const;
  ::msgTest::Room* _internal_mutable_room();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Create_Room_Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Create_Room_Response& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr errormessage_;
    ::msgTest::Room* room_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class Player final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Player* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Player));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Player(
      ::google::protobuf::internal::ConstantInitialized);

  inline Player(const Player& from) : Player(nullptr, from) {}
  inline Player(Player&& from) noexcept
      : Player(nullptr, std::move(from)) {}
  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
        &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Player& a, Player& b) { a.Swap(&b); }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Player>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Player& from) { Player::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Player* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.Player"; }

 protected:
  explicit Player(::google::protobuf::Arena* arena);
  Player(::google::protobuf::Arena* arena, const Player& from);
  Player(::google::protobuf::Arena* arena, Player&& from) noexcept
      : Player(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 3,
    kLevelFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .msgTest.Vector position = 3;
  bool has_position() const;
  void clear_position() ;
  const ::msgTest::Vector& position() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_position();
  ::msgTest::Vector* mutable_position();
  void set_allocated_position(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_position(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_position();

  private:
  const ::msgTest::Vector& _internal_position() const;
  ::msgTest::Vector* _internal_mutable_position();

  public:
  // int32 level = 2;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.Player)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Player& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::msgTest::Vector* position_;
    ::int32_t level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class MoveState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.MoveState) */ {
 public:
  inline MoveState() : MoveState(nullptr) {}
  ~MoveState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MoveState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MoveState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MoveState(
      ::google::protobuf::internal::ConstantInitialized);

  inline MoveState(const MoveState& from) : MoveState(nullptr, from) {}
  inline MoveState(MoveState&& from) noexcept
      : MoveState(nullptr, std::move(from)) {}
  inline MoveState& operator=(const MoveState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveState& operator=(MoveState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveState& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveState* internal_default_instance() {
    return reinterpret_cast<const MoveState*>(
        &_MoveState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MoveState& a, MoveState& b) { a.Swap(&b); }
  inline void Swap(MoveState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MoveState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MoveState& from) { MoveState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MoveState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.MoveState"; }

 protected:
  explicit MoveState(::google::protobuf::Arena* arena);
  MoveState(::google::protobuf::Arena* arena, const MoveState& from);
  MoveState(::google::protobuf::Arena* arena, MoveState&& from) noexcept
      : MoveState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerNameFieldNumber = 2,
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kRotationFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kRoomIdFieldNumber = 1,
  };
  // string playerName = 2;
  void clear_playername() ;
  const std::string& playername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_playername(Arg_&& arg, Args_... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* value);

  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(
      const std::string& value);
  std::string* _internal_mutable_playername();

  public:
  // .msgTest.Vector position = 3;
  bool has_position() const;
  void clear_position() ;
  const ::msgTest::Vector& position() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_position();
  ::msgTest::Vector* mutable_position();
  void set_allocated_position(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_position(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_position();

  private:
  const ::msgTest::Vector& _internal_position() const;
  ::msgTest::Vector* _internal_mutable_position();

  public:
  // .msgTest.Vector velocity = 4;
  bool has_velocity() const;
  void clear_velocity() ;
  const ::msgTest::Vector& velocity() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_velocity();
  ::msgTest::Vector* mutable_velocity();
  void set_allocated_velocity(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_velocity(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_velocity();

  private:
  const ::msgTest::Vector& _internal_velocity() const;
  ::msgTest::Vector* _internal_mutable_velocity();

  public:
  // .msgTest.Vector rotation = 5;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::msgTest::Vector& rotation() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_rotation();
  ::msgTest::Vector* mutable_rotation();
  void set_allocated_rotation(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_rotation(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_rotation();

  private:
  const ::msgTest::Vector& _internal_rotation() const;
  ::msgTest::Vector* _internal_mutable_rotation();

  public:
  // int64 timestamp = 6;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 roomId = 1;
  void clear_roomid() ;
  ::int32_t roomid() const;
  void set_roomid(::int32_t value);

  private:
  ::int32_t _internal_roomid() const;
  void _internal_set_roomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.MoveState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MoveState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr playername_;
    ::msgTest::Vector* position_;
    ::msgTest::Vector* velocity_;
    ::msgTest::Vector* rotation_;
    ::int64_t timestamp_;
    ::int32_t roomid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Skill_Use final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_Skill_Use) */ {
 public:
  inline CS_Skill_Use() : CS_Skill_Use(nullptr) {}
  ~CS_Skill_Use() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Skill_Use* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Skill_Use));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Skill_Use(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Skill_Use(const CS_Skill_Use& from) : CS_Skill_Use(nullptr, from) {}
  inline CS_Skill_Use(CS_Skill_Use&& from) noexcept
      : CS_Skill_Use(nullptr, std::move(from)) {}
  inline CS_Skill_Use& operator=(const CS_Skill_Use& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Skill_Use& operator=(CS_Skill_Use&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Skill_Use& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Skill_Use* internal_default_instance() {
    return reinterpret_cast<const CS_Skill_Use*>(
        &_CS_Skill_Use_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(CS_Skill_Use& a, CS_Skill_Use& b) { a.Swap(&b); }
  inline void Swap(CS_Skill_Use* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Skill_Use* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Skill_Use* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Skill_Use>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Skill_Use& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Skill_Use& from) { CS_Skill_Use::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Skill_Use* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Skill_Use"; }

 protected:
  explicit CS_Skill_Use(::google::protobuf::Arena* arena);
  CS_Skill_Use(::google::protobuf::Arena* arena, const CS_Skill_Use& from);
  CS_Skill_Use(::google::protobuf::Arena* arena, CS_Skill_Use&& from) noexcept
      : CS_Skill_Use(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDirectionFieldNumber = 3,
    kTargetPosFieldNumber = 4,
    kSkillIdFieldNumber = 1,
    kSkillTypeFieldNumber = 2,
    kTargetIdFieldNumber = 5,
  };
  // .msgTest.Vector direction = 3;
  bool has_direction() const;
  void clear_direction() ;
  const ::msgTest::Vector& direction() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_direction();
  ::msgTest::Vector* mutable_direction();
  void set_allocated_direction(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_direction(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_direction();

  private:
  const ::msgTest::Vector& _internal_direction() const;
  ::msgTest::Vector* _internal_mutable_direction();

  public:
  // .msgTest.Vector targetPos = 4;
  bool has_targetpos() const;
  void clear_targetpos() ;
  const ::msgTest::Vector& targetpos() const;
  PROTOBUF_NODISCARD ::msgTest::Vector* release_targetpos();
  ::msgTest::Vector* mutable_targetpos();
  void set_allocated_targetpos(::msgTest::Vector* value);
  void unsafe_arena_set_allocated_targetpos(::msgTest::Vector* value);
  ::msgTest::Vector* unsafe_arena_release_targetpos();

  private:
  const ::msgTest::Vector& _internal_targetpos() const;
  ::msgTest::Vector* _internal_mutable_targetpos();

  public:
  // int32 skillId = 1;
  void clear_skillid() ;
  ::int32_t skillid() const;
  void set_skillid(::int32_t value);

  private:
  ::int32_t _internal_skillid() const;
  void _internal_set_skillid(::int32_t value);

  public:
  // .msgTest.SkillType skillType = 2;
  void clear_skilltype() ;
  ::msgTest::SkillType skilltype() const;
  void set_skilltype(::msgTest::SkillType value);

  private:
  ::msgTest::SkillType _internal_skilltype() const;
  void _internal_set_skilltype(::msgTest::SkillType value);

  public:
  // int32 targetId = 5;
  void clear_targetid() ;
  ::int32_t targetid() const;
  void set_targetid(::int32_t value);

  private:
  ::int32_t _internal_targetid() const;
  void _internal_set_targetid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_Skill_Use)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Skill_Use& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::Vector* direction_;
    ::msgTest::Vector* targetpos_;
    ::int32_t skillid_;
    int skilltype_;
    ::int32_t targetid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Room_Player_List_Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Room_Player_List_Response) */ {
 public:
  inline SC_Room_Player_List_Response() : SC_Room_Player_List_Response(nullptr) {}
  ~SC_Room_Player_List_Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Room_Player_List_Response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Room_Player_List_Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Room_Player_List_Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Room_Player_List_Response(const SC_Room_Player_List_Response& from) : SC_Room_Player_List_Response(nullptr, from) {}
  inline SC_Room_Player_List_Response(SC_Room_Player_List_Response&& from) noexcept
      : SC_Room_Player_List_Response(nullptr, std::move(from)) {}
  inline SC_Room_Player_List_Response& operator=(const SC_Room_Player_List_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Room_Player_List_Response& operator=(SC_Room_Player_List_Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Room_Player_List_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Room_Player_List_Response* internal_default_instance() {
    return reinterpret_cast<const SC_Room_Player_List_Response*>(
        &_SC_Room_Player_List_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(SC_Room_Player_List_Response& a, SC_Room_Player_List_Response& b) { a.Swap(&b); }
  inline void Swap(SC_Room_Player_List_Response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Room_Player_List_Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Room_Player_List_Response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Room_Player_List_Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Room_Player_List_Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Room_Player_List_Response& from) { SC_Room_Player_List_Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Room_Player_List_Response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Room_Player_List_Response"; }

 protected:
  explicit SC_Room_Player_List_Response(::google::protobuf::Arena* arena);
  SC_Room_Player_List_Response(::google::protobuf::Arena* arena, const SC_Room_Player_List_Response& from);
  SC_Room_Player_List_Response(::google::protobuf::Arena* arena, SC_Room_Player_List_Response&& from) noexcept
      : SC_Room_Player_List_Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerListFieldNumber = 1,
  };
  // repeated .msgTest.Player playerList = 1;
  int playerlist_size() const;
  private:
  int _internal_playerlist_size() const;

  public:
  void clear_playerlist() ;
  ::msgTest::Player* mutable_playerlist(int index);
  ::google::protobuf::RepeatedPtrField<::msgTest::Player>* mutable_playerlist();

  private:
  const ::google::protobuf::RepeatedPtrField<::msgTest::Player>& _internal_playerlist() const;
  ::google::protobuf::RepeatedPtrField<::msgTest::Player>* _internal_mutable_playerlist();
  public:
  const ::msgTest::Player& playerlist(int index) const;
  ::msgTest::Player* add_playerlist();
  const ::google::protobuf::RepeatedPtrField<::msgTest::Player>& playerlist() const;
  // @@protoc_insertion_point(class_scope:msgTest.SC_Room_Player_List_Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Room_Player_List_Response& from_msg);
    ::google::protobuf::RepeatedPtrField< ::msgTest::Player > playerlist_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Player_Move_Notification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Player_Move_Notification) */ {
 public:
  inline SC_Player_Move_Notification() : SC_Player_Move_Notification(nullptr) {}
  ~SC_Player_Move_Notification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Player_Move_Notification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Player_Move_Notification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Player_Move_Notification(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Player_Move_Notification(const SC_Player_Move_Notification& from) : SC_Player_Move_Notification(nullptr, from) {}
  inline SC_Player_Move_Notification(SC_Player_Move_Notification&& from) noexcept
      : SC_Player_Move_Notification(nullptr, std::move(from)) {}
  inline SC_Player_Move_Notification& operator=(const SC_Player_Move_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Player_Move_Notification& operator=(SC_Player_Move_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Player_Move_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Player_Move_Notification* internal_default_instance() {
    return reinterpret_cast<const SC_Player_Move_Notification*>(
        &_SC_Player_Move_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(SC_Player_Move_Notification& a, SC_Player_Move_Notification& b) { a.Swap(&b); }
  inline void Swap(SC_Player_Move_Notification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Player_Move_Notification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Player_Move_Notification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Player_Move_Notification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Player_Move_Notification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Player_Move_Notification& from) { SC_Player_Move_Notification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Player_Move_Notification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Player_Move_Notification"; }

 protected:
  explicit SC_Player_Move_Notification(::google::protobuf::Arena* arena);
  SC_Player_Move_Notification(::google::protobuf::Arena* arena, const SC_Player_Move_Notification& from);
  SC_Player_Move_Notification(::google::protobuf::Arena* arena, SC_Player_Move_Notification&& from) noexcept
      : SC_Player_Move_Notification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMoveStatesFieldNumber = 1,
  };
  // repeated .msgTest.MoveState moveStates = 1;
  int movestates_size() const;
  private:
  int _internal_movestates_size() const;

  public:
  void clear_movestates() ;
  ::msgTest::MoveState* mutable_movestates(int index);
  ::google::protobuf::RepeatedPtrField<::msgTest::MoveState>* mutable_movestates();

  private:
  const ::google::protobuf::RepeatedPtrField<::msgTest::MoveState>& _internal_movestates() const;
  ::google::protobuf::RepeatedPtrField<::msgTest::MoveState>* _internal_mutable_movestates();
  public:
  const ::msgTest::MoveState& movestates(int index) const;
  ::msgTest::MoveState* add_movestates();
  const ::google::protobuf::RepeatedPtrField<::msgTest::MoveState>& movestates() const;
  // @@protoc_insertion_point(class_scope:msgTest.SC_Player_Move_Notification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Player_Move_Notification& from_msg);
    ::google::protobuf::RepeatedPtrField< ::msgTest::MoveState > movestates_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Player_Enter_Room_Notification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_Player_Enter_Room_Notification) */ {
 public:
  inline SC_Player_Enter_Room_Notification() : SC_Player_Enter_Room_Notification(nullptr) {}
  ~SC_Player_Enter_Room_Notification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Player_Enter_Room_Notification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Player_Enter_Room_Notification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Player_Enter_Room_Notification(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Player_Enter_Room_Notification(const SC_Player_Enter_Room_Notification& from) : SC_Player_Enter_Room_Notification(nullptr, from) {}
  inline SC_Player_Enter_Room_Notification(SC_Player_Enter_Room_Notification&& from) noexcept
      : SC_Player_Enter_Room_Notification(nullptr, std::move(from)) {}
  inline SC_Player_Enter_Room_Notification& operator=(const SC_Player_Enter_Room_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Player_Enter_Room_Notification& operator=(SC_Player_Enter_Room_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Player_Enter_Room_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Player_Enter_Room_Notification* internal_default_instance() {
    return reinterpret_cast<const SC_Player_Enter_Room_Notification*>(
        &_SC_Player_Enter_Room_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(SC_Player_Enter_Room_Notification& a, SC_Player_Enter_Room_Notification& b) { a.Swap(&b); }
  inline void Swap(SC_Player_Enter_Room_Notification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Player_Enter_Room_Notification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Player_Enter_Room_Notification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Player_Enter_Room_Notification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Player_Enter_Room_Notification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Player_Enter_Room_Notification& from) { SC_Player_Enter_Room_Notification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Player_Enter_Room_Notification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_Player_Enter_Room_Notification"; }

 protected:
  explicit SC_Player_Enter_Room_Notification(::google::protobuf::Arena* arena);
  SC_Player_Enter_Room_Notification(::google::protobuf::Arena* arena, const SC_Player_Enter_Room_Notification& from);
  SC_Player_Enter_Room_Notification(::google::protobuf::Arena* arena, SC_Player_Enter_Room_Notification&& from) noexcept
      : SC_Player_Enter_Room_Notification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .msgTest.Player player = 1;
  bool has_player() const;
  void clear_player() ;
  const ::msgTest::Player& player() const;
  PROTOBUF_NODISCARD ::msgTest::Player* release_player();
  ::msgTest::Player* mutable_player();
  void set_allocated_player(::msgTest::Player* value);
  void unsafe_arena_set_allocated_player(::msgTest::Player* value);
  ::msgTest::Player* unsafe_arena_release_player();

  private:
  const ::msgTest::Player& _internal_player() const;
  ::msgTest::Player* _internal_mutable_player();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_Player_Enter_Room_Notification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Player_Enter_Room_Notification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::Player* player_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_My_Player_Info_Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.SC_My_Player_Info_Response) */ {
 public:
  inline SC_My_Player_Info_Response() : SC_My_Player_Info_Response(nullptr) {}
  ~SC_My_Player_Info_Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_My_Player_Info_Response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_My_Player_Info_Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_My_Player_Info_Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_My_Player_Info_Response(const SC_My_Player_Info_Response& from) : SC_My_Player_Info_Response(nullptr, from) {}
  inline SC_My_Player_Info_Response(SC_My_Player_Info_Response&& from) noexcept
      : SC_My_Player_Info_Response(nullptr, std::move(from)) {}
  inline SC_My_Player_Info_Response& operator=(const SC_My_Player_Info_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_My_Player_Info_Response& operator=(SC_My_Player_Info_Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_My_Player_Info_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_My_Player_Info_Response* internal_default_instance() {
    return reinterpret_cast<const SC_My_Player_Info_Response*>(
        &_SC_My_Player_Info_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SC_My_Player_Info_Response& a, SC_My_Player_Info_Response& b) { a.Swap(&b); }
  inline void Swap(SC_My_Player_Info_Response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_My_Player_Info_Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_My_Player_Info_Response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_My_Player_Info_Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_My_Player_Info_Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_My_Player_Info_Response& from) { SC_My_Player_Info_Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_My_Player_Info_Response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.SC_My_Player_Info_Response"; }

 protected:
  explicit SC_My_Player_Info_Response(::google::protobuf::Arena* arena);
  SC_My_Player_Info_Response(::google::protobuf::Arena* arena, const SC_My_Player_Info_Response& from);
  SC_My_Player_Info_Response(::google::protobuf::Arena* arena, SC_My_Player_Info_Response&& from) noexcept
      : SC_My_Player_Info_Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerInfoFieldNumber = 1,
  };
  // .msgTest.Player playerInfo = 1;
  bool has_playerinfo() const;
  void clear_playerinfo() ;
  const ::msgTest::Player& playerinfo() const;
  PROTOBUF_NODISCARD ::msgTest::Player* release_playerinfo();
  ::msgTest::Player* mutable_playerinfo();
  void set_allocated_playerinfo(::msgTest::Player* value);
  void unsafe_arena_set_allocated_playerinfo(::msgTest::Player* value);
  ::msgTest::Player* unsafe_arena_release_playerinfo();

  private:
  const ::msgTest::Player& _internal_playerinfo() const;
  ::msgTest::Player* _internal_mutable_playerinfo();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.SC_My_Player_Info_Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_My_Player_Info_Response& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::Player* playerinfo_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Player_Move_Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:msgTest.CS_Player_Move_Request) */ {
 public:
  inline CS_Player_Move_Request() : CS_Player_Move_Request(nullptr) {}
  ~CS_Player_Move_Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Player_Move_Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Player_Move_Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Player_Move_Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Player_Move_Request(const CS_Player_Move_Request& from) : CS_Player_Move_Request(nullptr, from) {}
  inline CS_Player_Move_Request(CS_Player_Move_Request&& from) noexcept
      : CS_Player_Move_Request(nullptr, std::move(from)) {}
  inline CS_Player_Move_Request& operator=(const CS_Player_Move_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Player_Move_Request& operator=(CS_Player_Move_Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Player_Move_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Player_Move_Request* internal_default_instance() {
    return reinterpret_cast<const CS_Player_Move_Request*>(
        &_CS_Player_Move_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(CS_Player_Move_Request& a, CS_Player_Move_Request& b) { a.Swap(&b); }
  inline void Swap(CS_Player_Move_Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Player_Move_Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Player_Move_Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Player_Move_Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Player_Move_Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Player_Move_Request& from) { CS_Player_Move_Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Player_Move_Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "msgTest.CS_Player_Move_Request"; }

 protected:
  explicit CS_Player_Move_Request(::google::protobuf::Arena* arena);
  CS_Player_Move_Request(::google::protobuf::Arena* arena, const CS_Player_Move_Request& from);
  CS_Player_Move_Request(::google::protobuf::Arena* arena, CS_Player_Move_Request&& from) noexcept
      : CS_Player_Move_Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMoveStateFieldNumber = 1,
  };
  // .msgTest.MoveState moveState = 1;
  bool has_movestate() const;
  void clear_movestate() ;
  const ::msgTest::MoveState& movestate() const;
  PROTOBUF_NODISCARD ::msgTest::MoveState* release_movestate();
  ::msgTest::MoveState* mutable_movestate();
  void set_allocated_movestate(::msgTest::MoveState* value);
  void unsafe_arena_set_allocated_movestate(::msgTest::MoveState* value);
  ::msgTest::MoveState* unsafe_arena_release_movestate();

  private:
  const ::msgTest::MoveState& _internal_movestate() const;
  ::msgTest::MoveState* _internal_mutable_movestate();

  public:
  // @@protoc_insertion_point(class_scope:msgTest.CS_Player_Move_Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Player_Move_Request& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::msgTest::MoveState* movestate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PacketFrame

// int32 messageId = 1;
inline void PacketFrame::clear_messageid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messageid_ = 0;
}
inline ::int32_t PacketFrame::messageid() const {
  // @@protoc_insertion_point(field_get:msgTest.PacketFrame.messageId)
  return _internal_messageid();
}
inline void PacketFrame::set_messageid(::int32_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:msgTest.PacketFrame.messageId)
}
inline ::int32_t PacketFrame::_internal_messageid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messageid_;
}
inline void PacketFrame::_internal_set_messageid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messageid_ = value;
}

// int32 totalFrameCount = 2;
inline void PacketFrame::clear_totalframecount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.totalframecount_ = 0;
}
inline ::int32_t PacketFrame::totalframecount() const {
  // @@protoc_insertion_point(field_get:msgTest.PacketFrame.totalFrameCount)
  return _internal_totalframecount();
}
inline void PacketFrame::set_totalframecount(::int32_t value) {
  _internal_set_totalframecount(value);
  // @@protoc_insertion_point(field_set:msgTest.PacketFrame.totalFrameCount)
}
inline ::int32_t PacketFrame::_internal_totalframecount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.totalframecount_;
}
inline void PacketFrame::_internal_set_totalframecount(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.totalframecount_ = value;
}

// int32 frameIndex = 3;
inline void PacketFrame::clear_frameindex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frameindex_ = 0;
}
inline ::int32_t PacketFrame::frameindex() const {
  // @@protoc_insertion_point(field_get:msgTest.PacketFrame.frameIndex)
  return _internal_frameindex();
}
inline void PacketFrame::set_frameindex(::int32_t value) {
  _internal_set_frameindex(value);
  // @@protoc_insertion_point(field_set:msgTest.PacketFrame.frameIndex)
}
inline ::int32_t PacketFrame::_internal_frameindex() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frameindex_;
}
inline void PacketFrame::_internal_set_frameindex(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frameindex_ = value;
}

// bytes payload = 4;
inline void PacketFrame::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& PacketFrame::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.PacketFrame.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketFrame::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.PacketFrame.payload)
}
inline std::string* PacketFrame::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:msgTest.PacketFrame.payload)
  return _s;
}
inline const std::string& PacketFrame::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void PacketFrame::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* PacketFrame::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* PacketFrame::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.PacketFrame.payload)
  return _impl_.payload_.Release();
}
inline void PacketFrame::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.PacketFrame.payload)
}

// -------------------------------------------------------------------

// Vector

// sint32 x = 1;
inline void Vector::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline ::int32_t Vector::x() const {
  // @@protoc_insertion_point(field_get:msgTest.Vector.x)
  return _internal_x();
}
inline void Vector::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msgTest.Vector.x)
}
inline ::int32_t Vector::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector::_internal_set_x(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// sint32 y = 2;
inline void Vector::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline ::int32_t Vector::y() const {
  // @@protoc_insertion_point(field_get:msgTest.Vector.y)
  return _internal_y();
}
inline void Vector::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msgTest.Vector.y)
}
inline ::int32_t Vector::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector::_internal_set_y(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// sint32 z = 3;
inline void Vector::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline ::int32_t Vector::z() const {
  // @@protoc_insertion_point(field_get:msgTest.Vector.z)
  return _internal_z();
}
inline void Vector::set_z(::int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:msgTest.Vector.z)
}
inline ::int32_t Vector::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Vector::_internal_set_z(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// MoveState

// int32 roomId = 1;
inline void MoveState::clear_roomid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = 0;
}
inline ::int32_t MoveState::roomid() const {
  // @@protoc_insertion_point(field_get:msgTest.MoveState.roomId)
  return _internal_roomid();
}
inline void MoveState::set_roomid(::int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:msgTest.MoveState.roomId)
}
inline ::int32_t MoveState::_internal_roomid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomid_;
}
inline void MoveState::_internal_set_roomid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = value;
}

// string playerName = 2;
inline void MoveState::clear_playername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playername_.ClearToEmpty();
}
inline const std::string& MoveState::playername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.MoveState.playerName)
  return _internal_playername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MoveState::set_playername(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.MoveState.playerName)
}
inline std::string* MoveState::mutable_playername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:msgTest.MoveState.playerName)
  return _s;
}
inline const std::string& MoveState::_internal_playername() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.playername_.Get();
}
inline void MoveState::_internal_set_playername(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playername_.Set(value, GetArena());
}
inline std::string* MoveState::_internal_mutable_playername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.playername_.Mutable( GetArena());
}
inline std::string* MoveState::release_playername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.MoveState.playerName)
  return _impl_.playername_.Release();
}
inline void MoveState::set_allocated_playername(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playername_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.MoveState.playerName)
}

// .msgTest.Vector position = 3;
inline bool MoveState::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void MoveState::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Vector& MoveState::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& MoveState::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.MoveState.position)
  return _internal_position();
}
inline void MoveState::unsafe_arena_set_allocated_position(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.MoveState.position)
}
inline ::msgTest::Vector* MoveState::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* MoveState::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.MoveState.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* MoveState::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.position_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.position_;
}
inline ::msgTest::Vector* MoveState::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Vector* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:msgTest.MoveState.position)
  return _msg;
}
inline void MoveState::set_allocated_position(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.MoveState.position)
}

// .msgTest.Vector velocity = 4;
inline bool MoveState::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline void MoveState::clear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msgTest::Vector& MoveState::_internal_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& MoveState::velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.MoveState.velocity)
  return _internal_velocity();
}
inline void MoveState::unsafe_arena_set_allocated_velocity(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.MoveState.velocity)
}
inline ::msgTest::Vector* MoveState::release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::Vector* released = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* MoveState::unsafe_arena_release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.MoveState.velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::Vector* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* MoveState::_internal_mutable_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.velocity_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.velocity_;
}
inline ::msgTest::Vector* MoveState::mutable_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msgTest::Vector* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:msgTest.MoveState.velocity)
  return _msg;
}
inline void MoveState::set_allocated_velocity(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.velocity_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.MoveState.velocity)
}

// .msgTest.Vector rotation = 5;
inline bool MoveState::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline void MoveState::clear_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::msgTest::Vector& MoveState::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& MoveState::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.MoveState.rotation)
  return _internal_rotation();
}
inline void MoveState::unsafe_arena_set_allocated_rotation(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.MoveState.rotation)
}
inline ::msgTest::Vector* MoveState::release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msgTest::Vector* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* MoveState::unsafe_arena_release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.MoveState.rotation)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msgTest::Vector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* MoveState::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.rotation_;
}
inline ::msgTest::Vector* MoveState::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::msgTest::Vector* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:msgTest.MoveState.rotation)
  return _msg;
}
inline void MoveState::set_allocated_rotation(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.rotation_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.MoveState.rotation)
}

// int64 timestamp = 6;
inline void MoveState::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t MoveState::timestamp() const {
  // @@protoc_insertion_point(field_get:msgTest.MoveState.timestamp)
  return _internal_timestamp();
}
inline void MoveState::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgTest.MoveState.timestamp)
}
inline ::int64_t MoveState::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void MoveState::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// Player

// string name = 1;
inline void Player::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Player::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.Player.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Player::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.Player.name)
}
inline std::string* Player::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msgTest.Player.name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Player::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Player::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.Player.name)
  return _impl_.name_.Release();
}
inline void Player::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.Player.name)
}

// int32 level = 2;
inline void Player::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0;
}
inline ::int32_t Player::level() const {
  // @@protoc_insertion_point(field_get:msgTest.Player.level)
  return _internal_level();
}
inline void Player::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msgTest.Player.level)
}
inline ::int32_t Player::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.level_;
}
inline void Player::_internal_set_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// .msgTest.Vector position = 3;
inline bool Player::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void Player::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Vector& Player::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& Player::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.Player.position)
  return _internal_position();
}
inline void Player::unsafe_arena_set_allocated_position(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.Player.position)
}
inline ::msgTest::Vector* Player::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* Player::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.Player.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* Player::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.position_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.position_;
}
inline ::msgTest::Vector* Player::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Vector* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:msgTest.Player.position)
  return _msg;
}
inline void Player::set_allocated_position(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.Player.position)
}

// -------------------------------------------------------------------

// Room

// int32 roomId = 1;
inline void Room::clear_roomid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = 0;
}
inline ::int32_t Room::roomid() const {
  // @@protoc_insertion_point(field_get:msgTest.Room.roomId)
  return _internal_roomid();
}
inline void Room::set_roomid(::int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:msgTest.Room.roomId)
}
inline ::int32_t Room::_internal_roomid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomid_;
}
inline void Room::_internal_set_roomid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = value;
}

// string roomName = 2;
inline void Room::clear_roomname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomname_.ClearToEmpty();
}
inline const std::string& Room::roomname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.Room.roomName)
  return _internal_roomname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Room::set_roomname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.Room.roomName)
}
inline std::string* Room::mutable_roomname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:msgTest.Room.roomName)
  return _s;
}
inline const std::string& Room::_internal_roomname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomname_.Get();
}
inline void Room::_internal_set_roomname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomname_.Set(value, GetArena());
}
inline std::string* Room::_internal_mutable_roomname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.roomname_.Mutable( GetArena());
}
inline std::string* Room::release_roomname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.Room.roomName)
  return _impl_.roomname_.Release();
}
inline void Room::set_allocated_roomname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.roomname_.IsDefault()) {
    _impl_.roomname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.Room.roomName)
}

// int32 maxPlayerCount = 3;
inline void Room::clear_maxplayercount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxplayercount_ = 0;
}
inline ::int32_t Room::maxplayercount() const {
  // @@protoc_insertion_point(field_get:msgTest.Room.maxPlayerCount)
  return _internal_maxplayercount();
}
inline void Room::set_maxplayercount(::int32_t value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:msgTest.Room.maxPlayerCount)
}
inline ::int32_t Room::_internal_maxplayercount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxplayercount_;
}
inline void Room::_internal_set_maxplayercount(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxplayercount_ = value;
}

// int32 playerCount = 4;
inline void Room::clear_playercount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playercount_ = 0;
}
inline ::int32_t Room::playercount() const {
  // @@protoc_insertion_point(field_get:msgTest.Room.playerCount)
  return _internal_playercount();
}
inline void Room::set_playercount(::int32_t value) {
  _internal_set_playercount(value);
  // @@protoc_insertion_point(field_set:msgTest.Room.playerCount)
}
inline ::int32_t Room::_internal_playercount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.playercount_;
}
inline void Room::_internal_set_playercount(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playercount_ = value;
}

// string hostPlayerName = 5;
inline void Room::clear_hostplayername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostplayername_.ClearToEmpty();
}
inline const std::string& Room::hostplayername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.Room.hostPlayerName)
  return _internal_hostplayername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Room::set_hostplayername(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostplayername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.Room.hostPlayerName)
}
inline std::string* Room::mutable_hostplayername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hostplayername();
  // @@protoc_insertion_point(field_mutable:msgTest.Room.hostPlayerName)
  return _s;
}
inline const std::string& Room::_internal_hostplayername() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hostplayername_.Get();
}
inline void Room::_internal_set_hostplayername(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostplayername_.Set(value, GetArena());
}
inline std::string* Room::_internal_mutable_hostplayername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hostplayername_.Mutable( GetArena());
}
inline std::string* Room::release_hostplayername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.Room.hostPlayerName)
  return _impl_.hostplayername_.Release();
}
inline void Room::set_allocated_hostplayername(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostplayername_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hostplayername_.IsDefault()) {
    _impl_.hostplayername_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.Room.hostPlayerName)
}

// -------------------------------------------------------------------

// CS_Ping

// int64 timestamp = 1;
inline void CS_Ping::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t CS_Ping::timestamp() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_Ping.timestamp)
  return _internal_timestamp();
}
inline void CS_Ping::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgTest.CS_Ping.timestamp)
}
inline ::int64_t CS_Ping::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void CS_Ping::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// SC_Pong

// int64 timestamp = 1;
inline void SC_Pong::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t SC_Pong::timestamp() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Pong.timestamp)
  return _internal_timestamp();
}
inline void SC_Pong::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Pong.timestamp)
}
inline ::int64_t SC_Pong::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void SC_Pong::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// int64 serverTimestamp = 2;
inline void SC_Pong::clear_servertimestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servertimestamp_ = ::int64_t{0};
}
inline ::int64_t SC_Pong::servertimestamp() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Pong.serverTimestamp)
  return _internal_servertimestamp();
}
inline void SC_Pong::set_servertimestamp(::int64_t value) {
  _internal_set_servertimestamp(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Pong.serverTimestamp)
}
inline ::int64_t SC_Pong::_internal_servertimestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.servertimestamp_;
}
inline void SC_Pong::_internal_set_servertimestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servertimestamp_ = value;
}

// -------------------------------------------------------------------

// CS_Login_Request

// string id = 1;
inline void CS_Login_Request::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CS_Login_Request::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.CS_Login_Request.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CS_Login_Request::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.CS_Login_Request.id)
}
inline std::string* CS_Login_Request::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Login_Request.id)
  return _s;
}
inline const std::string& CS_Login_Request::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void CS_Login_Request::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* CS_Login_Request::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* CS_Login_Request::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.CS_Login_Request.id)
  return _impl_.id_.Release();
}
inline void CS_Login_Request::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Login_Request.id)
}

// string password = 2;
inline void CS_Login_Request::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CS_Login_Request::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.CS_Login_Request.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CS_Login_Request::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.CS_Login_Request.password)
}
inline std::string* CS_Login_Request::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Login_Request.password)
  return _s;
}
inline const std::string& CS_Login_Request::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void CS_Login_Request::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* CS_Login_Request::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* CS_Login_Request::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.CS_Login_Request.password)
  return _impl_.password_.Release();
}
inline void CS_Login_Request::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Login_Request.password)
}

// -------------------------------------------------------------------

// SC_Login_Response

// bool success = 1;
inline void SC_Login_Response::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SC_Login_Response::success() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Login_Response.success)
  return _internal_success();
}
inline void SC_Login_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Login_Response.success)
}
inline bool SC_Login_Response::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SC_Login_Response::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string errorMessage = 2;
inline void SC_Login_Response::clear_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& SC_Login_Response::errormessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Login_Response.errorMessage)
  return _internal_errormessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SC_Login_Response::set_errormessage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.SC_Login_Response.errorMessage)
}
inline std::string* SC_Login_Response::mutable_errormessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Login_Response.errorMessage)
  return _s;
}
inline const std::string& SC_Login_Response::_internal_errormessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errormessage_.Get();
}
inline void SC_Login_Response::_internal_set_errormessage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(value, GetArena());
}
inline std::string* SC_Login_Response::_internal_mutable_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.errormessage_.Mutable( GetArena());
}
inline std::string* SC_Login_Response::release_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Login_Response.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void SC_Login_Response::set_allocated_errormessage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Login_Response.errorMessage)
}

// uint64 sessionId = 3;
inline void SC_Login_Response::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_ = ::uint64_t{0u};
}
inline ::uint64_t SC_Login_Response::sessionid() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Login_Response.sessionId)
  return _internal_sessionid();
}
inline void SC_Login_Response::set_sessionid(::uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Login_Response.sessionId)
}
inline ::uint64_t SC_Login_Response::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_;
}
inline void SC_Login_Response::_internal_set_sessionid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_ = value;
}

// -------------------------------------------------------------------

// CS_My_Player_Info_Request

// uint64 sessionId = 1;
inline void CS_My_Player_Info_Request::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_ = ::uint64_t{0u};
}
inline ::uint64_t CS_My_Player_Info_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_My_Player_Info_Request.sessionId)
  return _internal_sessionid();
}
inline void CS_My_Player_Info_Request::set_sessionid(::uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:msgTest.CS_My_Player_Info_Request.sessionId)
}
inline ::uint64_t CS_My_Player_Info_Request::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_;
}
inline void CS_My_Player_Info_Request::_internal_set_sessionid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_ = value;
}

// -------------------------------------------------------------------

// SC_My_Player_Info_Response

// .msgTest.Player playerInfo = 1;
inline bool SC_My_Player_Info_Response::has_playerinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playerinfo_ != nullptr);
  return value;
}
inline void SC_My_Player_Info_Response::clear_playerinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.playerinfo_ != nullptr) _impl_.playerinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Player& SC_My_Player_Info_Response::_internal_playerinfo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Player* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Player&>(::msgTest::_Player_default_instance_);
}
inline const ::msgTest::Player& SC_My_Player_Info_Response::playerinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_My_Player_Info_Response.playerInfo)
  return _internal_playerinfo();
}
inline void SC_My_Player_Info_Response::unsafe_arena_set_allocated_playerinfo(::msgTest::Player* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = reinterpret_cast<::msgTest::Player*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_My_Player_Info_Response.playerInfo)
}
inline ::msgTest::Player* SC_My_Player_Info_Response::release_playerinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Player* released = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Player* SC_My_Player_Info_Response::unsafe_arena_release_playerinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_My_Player_Info_Response.playerInfo)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Player* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::msgTest::Player* SC_My_Player_Info_Response::_internal_mutable_playerinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Player>(GetArena());
    _impl_.playerinfo_ = reinterpret_cast<::msgTest::Player*>(p);
  }
  return _impl_.playerinfo_;
}
inline ::msgTest::Player* SC_My_Player_Info_Response::mutable_playerinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Player* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_My_Player_Info_Response.playerInfo)
  return _msg;
}
inline void SC_My_Player_Info_Response::set_allocated_playerinfo(::msgTest::Player* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.playerinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.playerinfo_ = reinterpret_cast<::msgTest::Player*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_My_Player_Info_Response.playerInfo)
}

// -------------------------------------------------------------------

// CS_Room_Player_List_Request

// int32 roomId = 1;
inline void CS_Room_Player_List_Request::clear_roomid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = 0;
}
inline ::int32_t CS_Room_Player_List_Request::roomid() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_Room_Player_List_Request.roomId)
  return _internal_roomid();
}
inline void CS_Room_Player_List_Request::set_roomid(::int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:msgTest.CS_Room_Player_List_Request.roomId)
}
inline ::int32_t CS_Room_Player_List_Request::_internal_roomid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomid_;
}
inline void CS_Room_Player_List_Request::_internal_set_roomid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = value;
}

// -------------------------------------------------------------------

// SC_Room_Player_List_Response

// repeated .msgTest.Player playerList = 1;
inline int SC_Room_Player_List_Response::_internal_playerlist_size() const {
  return _internal_playerlist().size();
}
inline int SC_Room_Player_List_Response::playerlist_size() const {
  return _internal_playerlist_size();
}
inline void SC_Room_Player_List_Response::clear_playerlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playerlist_.Clear();
}
inline ::msgTest::Player* SC_Room_Player_List_Response::mutable_playerlist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Room_Player_List_Response.playerList)
  return _internal_mutable_playerlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msgTest::Player>* SC_Room_Player_List_Response::mutable_playerlist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msgTest.SC_Room_Player_List_Response.playerList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_playerlist();
}
inline const ::msgTest::Player& SC_Room_Player_List_Response::playerlist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Room_Player_List_Response.playerList)
  return _internal_playerlist().Get(index);
}
inline ::msgTest::Player* SC_Room_Player_List_Response::add_playerlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msgTest::Player* _add = _internal_mutable_playerlist()->Add();
  // @@protoc_insertion_point(field_add:msgTest.SC_Room_Player_List_Response.playerList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msgTest::Player>& SC_Room_Player_List_Response::playerlist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msgTest.SC_Room_Player_List_Response.playerList)
  return _internal_playerlist();
}
inline const ::google::protobuf::RepeatedPtrField<::msgTest::Player>&
SC_Room_Player_List_Response::_internal_playerlist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.playerlist_;
}
inline ::google::protobuf::RepeatedPtrField<::msgTest::Player>*
SC_Room_Player_List_Response::_internal_mutable_playerlist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.playerlist_;
}

// -------------------------------------------------------------------

// CS_Create_Room_Request

// string roomName = 1;
inline void CS_Create_Room_Request::clear_roomname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomname_.ClearToEmpty();
}
inline const std::string& CS_Create_Room_Request::roomname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.CS_Create_Room_Request.roomName)
  return _internal_roomname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CS_Create_Room_Request::set_roomname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.CS_Create_Room_Request.roomName)
}
inline std::string* CS_Create_Room_Request::mutable_roomname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Create_Room_Request.roomName)
  return _s;
}
inline const std::string& CS_Create_Room_Request::_internal_roomname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomname_.Get();
}
inline void CS_Create_Room_Request::_internal_set_roomname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomname_.Set(value, GetArena());
}
inline std::string* CS_Create_Room_Request::_internal_mutable_roomname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.roomname_.Mutable( GetArena());
}
inline std::string* CS_Create_Room_Request::release_roomname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.CS_Create_Room_Request.roomName)
  return _impl_.roomname_.Release();
}
inline void CS_Create_Room_Request::set_allocated_roomname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.roomname_.IsDefault()) {
    _impl_.roomname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Create_Room_Request.roomName)
}

// string hostName = 2;
inline void CS_Create_Room_Request::clear_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& CS_Create_Room_Request::hostname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.CS_Create_Room_Request.hostName)
  return _internal_hostname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CS_Create_Room_Request::set_hostname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.CS_Create_Room_Request.hostName)
}
inline std::string* CS_Create_Room_Request::mutable_hostname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Create_Room_Request.hostName)
  return _s;
}
inline const std::string& CS_Create_Room_Request::_internal_hostname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hostname_.Get();
}
inline void CS_Create_Room_Request::_internal_set_hostname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.Set(value, GetArena());
}
inline std::string* CS_Create_Room_Request::_internal_mutable_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hostname_.Mutable( GetArena());
}
inline std::string* CS_Create_Room_Request::release_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.CS_Create_Room_Request.hostName)
  return _impl_.hostname_.Release();
}
inline void CS_Create_Room_Request::set_allocated_hostname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Create_Room_Request.hostName)
}

// -------------------------------------------------------------------

// SC_Create_Room_Response

// bool success = 1;
inline void SC_Create_Room_Response::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SC_Create_Room_Response::success() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Create_Room_Response.success)
  return _internal_success();
}
inline void SC_Create_Room_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Create_Room_Response.success)
}
inline bool SC_Create_Room_Response::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SC_Create_Room_Response::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string errorMessage = 2;
inline void SC_Create_Room_Response::clear_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& SC_Create_Room_Response::errormessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Create_Room_Response.errorMessage)
  return _internal_errormessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SC_Create_Room_Response::set_errormessage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.SC_Create_Room_Response.errorMessage)
}
inline std::string* SC_Create_Room_Response::mutable_errormessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Create_Room_Response.errorMessage)
  return _s;
}
inline const std::string& SC_Create_Room_Response::_internal_errormessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errormessage_.Get();
}
inline void SC_Create_Room_Response::_internal_set_errormessage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(value, GetArena());
}
inline std::string* SC_Create_Room_Response::_internal_mutable_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.errormessage_.Mutable( GetArena());
}
inline std::string* SC_Create_Room_Response::release_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Create_Room_Response.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void SC_Create_Room_Response::set_allocated_errormessage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Create_Room_Response.errorMessage)
}

// .msgTest.Room room = 3;
inline bool SC_Create_Room_Response::has_room() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.room_ != nullptr);
  return value;
}
inline void SC_Create_Room_Response::clear_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ != nullptr) _impl_.room_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Room& SC_Create_Room_Response::_internal_room() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Room* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Room&>(::msgTest::_Room_default_instance_);
}
inline const ::msgTest::Room& SC_Create_Room_Response::room() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Create_Room_Response.room)
  return _internal_room();
}
inline void SC_Create_Room_Response::unsafe_arena_set_allocated_room(::msgTest::Room* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = reinterpret_cast<::msgTest::Room*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Create_Room_Response.room)
}
inline ::msgTest::Room* SC_Create_Room_Response::release_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Room* released = _impl_.room_;
  _impl_.room_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Room* SC_Create_Room_Response::unsafe_arena_release_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Create_Room_Response.room)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::msgTest::Room* SC_Create_Room_Response::_internal_mutable_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Room>(GetArena());
    _impl_.room_ = reinterpret_cast<::msgTest::Room*>(p);
  }
  return _impl_.room_;
}
inline ::msgTest::Room* SC_Create_Room_Response::mutable_room() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Create_Room_Response.room)
  return _msg;
}
inline void SC_Create_Room_Response::set_allocated_room(::msgTest::Room* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.room_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.room_ = reinterpret_cast<::msgTest::Room*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Create_Room_Response.room)
}

// -------------------------------------------------------------------

// CS_Room_List_Request

// -------------------------------------------------------------------

// SC_Room_List_Response

// repeated .msgTest.Room roomList = 1;
inline int SC_Room_List_Response::_internal_roomlist_size() const {
  return _internal_roomlist().size();
}
inline int SC_Room_List_Response::roomlist_size() const {
  return _internal_roomlist_size();
}
inline void SC_Room_List_Response::clear_roomlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomlist_.Clear();
}
inline ::msgTest::Room* SC_Room_List_Response::mutable_roomlist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Room_List_Response.roomList)
  return _internal_mutable_roomlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msgTest::Room>* SC_Room_List_Response::mutable_roomlist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msgTest.SC_Room_List_Response.roomList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_roomlist();
}
inline const ::msgTest::Room& SC_Room_List_Response::roomlist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Room_List_Response.roomList)
  return _internal_roomlist().Get(index);
}
inline ::msgTest::Room* SC_Room_List_Response::add_roomlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msgTest::Room* _add = _internal_mutable_roomlist()->Add();
  // @@protoc_insertion_point(field_add:msgTest.SC_Room_List_Response.roomList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msgTest::Room>& SC_Room_List_Response::roomlist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msgTest.SC_Room_List_Response.roomList)
  return _internal_roomlist();
}
inline const ::google::protobuf::RepeatedPtrField<::msgTest::Room>&
SC_Room_List_Response::_internal_roomlist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomlist_;
}
inline ::google::protobuf::RepeatedPtrField<::msgTest::Room>*
SC_Room_List_Response::_internal_mutable_roomlist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.roomlist_;
}

// -------------------------------------------------------------------

// CS_Enter_Room_Request

// int32 roomId = 1;
inline void CS_Enter_Room_Request::clear_roomid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = 0;
}
inline ::int32_t CS_Enter_Room_Request::roomid() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_Enter_Room_Request.roomId)
  return _internal_roomid();
}
inline void CS_Enter_Room_Request::set_roomid(::int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:msgTest.CS_Enter_Room_Request.roomId)
}
inline ::int32_t CS_Enter_Room_Request::_internal_roomid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomid_;
}
inline void CS_Enter_Room_Request::_internal_set_roomid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = value;
}

// -------------------------------------------------------------------

// SC_Enter_Room_Response

// bool success = 1;
inline void SC_Enter_Room_Response::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SC_Enter_Room_Response::success() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Enter_Room_Response.success)
  return _internal_success();
}
inline void SC_Enter_Room_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Enter_Room_Response.success)
}
inline bool SC_Enter_Room_Response::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SC_Enter_Room_Response::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string errorMessage = 2;
inline void SC_Enter_Room_Response::clear_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& SC_Enter_Room_Response::errormessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Enter_Room_Response.errorMessage)
  return _internal_errormessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SC_Enter_Room_Response::set_errormessage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:msgTest.SC_Enter_Room_Response.errorMessage)
}
inline std::string* SC_Enter_Room_Response::mutable_errormessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Enter_Room_Response.errorMessage)
  return _s;
}
inline const std::string& SC_Enter_Room_Response::_internal_errormessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errormessage_.Get();
}
inline void SC_Enter_Room_Response::_internal_set_errormessage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(value, GetArena());
}
inline std::string* SC_Enter_Room_Response::_internal_mutable_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.errormessage_.Mutable( GetArena());
}
inline std::string* SC_Enter_Room_Response::release_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Enter_Room_Response.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void SC_Enter_Room_Response::set_allocated_errormessage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Enter_Room_Response.errorMessage)
}

// .msgTest.Room room = 3;
inline bool SC_Enter_Room_Response::has_room() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.room_ != nullptr);
  return value;
}
inline void SC_Enter_Room_Response::clear_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ != nullptr) _impl_.room_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Room& SC_Enter_Room_Response::_internal_room() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Room* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Room&>(::msgTest::_Room_default_instance_);
}
inline const ::msgTest::Room& SC_Enter_Room_Response::room() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Enter_Room_Response.room)
  return _internal_room();
}
inline void SC_Enter_Room_Response::unsafe_arena_set_allocated_room(::msgTest::Room* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = reinterpret_cast<::msgTest::Room*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Enter_Room_Response.room)
}
inline ::msgTest::Room* SC_Enter_Room_Response::release_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Room* released = _impl_.room_;
  _impl_.room_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Room* SC_Enter_Room_Response::unsafe_arena_release_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Enter_Room_Response.room)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::msgTest::Room* SC_Enter_Room_Response::_internal_mutable_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Room>(GetArena());
    _impl_.room_ = reinterpret_cast<::msgTest::Room*>(p);
  }
  return _impl_.room_;
}
inline ::msgTest::Room* SC_Enter_Room_Response::mutable_room() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Enter_Room_Response.room)
  return _msg;
}
inline void SC_Enter_Room_Response::set_allocated_room(::msgTest::Room* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.room_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.room_ = reinterpret_cast<::msgTest::Room*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Enter_Room_Response.room)
}

// -------------------------------------------------------------------

// SC_Player_Enter_Room_Notification

// .msgTest.Player player = 1;
inline bool SC_Player_Enter_Room_Notification::has_player() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_ != nullptr);
  return value;
}
inline void SC_Player_Enter_Room_Notification::clear_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_ != nullptr) _impl_.player_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Player& SC_Player_Enter_Room_Notification::_internal_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Player&>(::msgTest::_Player_default_instance_);
}
inline const ::msgTest::Player& SC_Player_Enter_Room_Notification::player() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Player_Enter_Room_Notification.player)
  return _internal_player();
}
inline void SC_Player_Enter_Room_Notification::unsafe_arena_set_allocated_player(::msgTest::Player* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = reinterpret_cast<::msgTest::Player*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Player_Enter_Room_Notification.player)
}
inline ::msgTest::Player* SC_Player_Enter_Room_Notification::release_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Player* released = _impl_.player_;
  _impl_.player_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Player* SC_Player_Enter_Room_Notification::unsafe_arena_release_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Player_Enter_Room_Notification.player)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::msgTest::Player* SC_Player_Enter_Room_Notification::_internal_mutable_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Player>(GetArena());
    _impl_.player_ = reinterpret_cast<::msgTest::Player*>(p);
  }
  return _impl_.player_;
}
inline ::msgTest::Player* SC_Player_Enter_Room_Notification::mutable_player() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Player_Enter_Room_Notification.player)
  return _msg;
}
inline void SC_Player_Enter_Room_Notification::set_allocated_player(::msgTest::Player* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.player_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.player_ = reinterpret_cast<::msgTest::Player*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Player_Enter_Room_Notification.player)
}

// -------------------------------------------------------------------

// CS_Player_Move_Request

// .msgTest.MoveState moveState = 1;
inline bool CS_Player_Move_Request::has_movestate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movestate_ != nullptr);
  return value;
}
inline void CS_Player_Move_Request::clear_movestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.movestate_ != nullptr) _impl_.movestate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::MoveState& CS_Player_Move_Request::_internal_movestate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::MoveState* p = _impl_.movestate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::MoveState&>(::msgTest::_MoveState_default_instance_);
}
inline const ::msgTest::MoveState& CS_Player_Move_Request::movestate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.CS_Player_Move_Request.moveState)
  return _internal_movestate();
}
inline void CS_Player_Move_Request::unsafe_arena_set_allocated_movestate(::msgTest::MoveState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.movestate_);
  }
  _impl_.movestate_ = reinterpret_cast<::msgTest::MoveState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.CS_Player_Move_Request.moveState)
}
inline ::msgTest::MoveState* CS_Player_Move_Request::release_movestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::MoveState* released = _impl_.movestate_;
  _impl_.movestate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::MoveState* CS_Player_Move_Request::unsafe_arena_release_movestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.CS_Player_Move_Request.moveState)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::MoveState* temp = _impl_.movestate_;
  _impl_.movestate_ = nullptr;
  return temp;
}
inline ::msgTest::MoveState* CS_Player_Move_Request::_internal_mutable_movestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.movestate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::MoveState>(GetArena());
    _impl_.movestate_ = reinterpret_cast<::msgTest::MoveState*>(p);
  }
  return _impl_.movestate_;
}
inline ::msgTest::MoveState* CS_Player_Move_Request::mutable_movestate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::MoveState* _msg = _internal_mutable_movestate();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Player_Move_Request.moveState)
  return _msg;
}
inline void CS_Player_Move_Request::set_allocated_movestate(::msgTest::MoveState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.movestate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.movestate_ = reinterpret_cast<::msgTest::MoveState*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Player_Move_Request.moveState)
}

// -------------------------------------------------------------------

// SC_Player_Move_Notification

// repeated .msgTest.MoveState moveStates = 1;
inline int SC_Player_Move_Notification::_internal_movestates_size() const {
  return _internal_movestates().size();
}
inline int SC_Player_Move_Notification::movestates_size() const {
  return _internal_movestates_size();
}
inline void SC_Player_Move_Notification::clear_movestates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.movestates_.Clear();
}
inline ::msgTest::MoveState* SC_Player_Move_Notification::mutable_movestates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Player_Move_Notification.moveStates)
  return _internal_mutable_movestates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::msgTest::MoveState>* SC_Player_Move_Notification::mutable_movestates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msgTest.SC_Player_Move_Notification.moveStates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_movestates();
}
inline const ::msgTest::MoveState& SC_Player_Move_Notification::movestates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Player_Move_Notification.moveStates)
  return _internal_movestates().Get(index);
}
inline ::msgTest::MoveState* SC_Player_Move_Notification::add_movestates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::msgTest::MoveState* _add = _internal_mutable_movestates()->Add();
  // @@protoc_insertion_point(field_add:msgTest.SC_Player_Move_Notification.moveStates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::msgTest::MoveState>& SC_Player_Move_Notification::movestates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msgTest.SC_Player_Move_Notification.moveStates)
  return _internal_movestates();
}
inline const ::google::protobuf::RepeatedPtrField<::msgTest::MoveState>&
SC_Player_Move_Notification::_internal_movestates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.movestates_;
}
inline ::google::protobuf::RepeatedPtrField<::msgTest::MoveState>*
SC_Player_Move_Notification::_internal_mutable_movestates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.movestates_;
}

// -------------------------------------------------------------------

// SC_Player_List_In_Grid

// repeated string playerNameList = 1;
inline int SC_Player_List_In_Grid::_internal_playernamelist_size() const {
  return _internal_playernamelist().size();
}
inline int SC_Player_List_In_Grid::playernamelist_size() const {
  return _internal_playernamelist_size();
}
inline void SC_Player_List_In_Grid::clear_playernamelist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playernamelist_.Clear();
}
inline std::string* SC_Player_List_In_Grid::add_playernamelist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_playernamelist()->Add();
  // @@protoc_insertion_point(field_add_mutable:msgTest.SC_Player_List_In_Grid.playerNameList)
  return _s;
}
inline const std::string& SC_Player_List_In_Grid::playernamelist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Player_List_In_Grid.playerNameList)
  return _internal_playernamelist().Get(index);
}
inline std::string* SC_Player_List_In_Grid::mutable_playernamelist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Player_List_In_Grid.playerNameList)
  return _internal_mutable_playernamelist()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SC_Player_List_In_Grid::set_playernamelist(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_playernamelist()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:msgTest.SC_Player_List_In_Grid.playerNameList)
}
template <typename Arg_, typename... Args_>
inline void SC_Player_List_In_Grid::add_playernamelist(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_playernamelist(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:msgTest.SC_Player_List_In_Grid.playerNameList)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SC_Player_List_In_Grid::playernamelist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:msgTest.SC_Player_List_In_Grid.playerNameList)
  return _internal_playernamelist();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SC_Player_List_In_Grid::mutable_playernamelist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:msgTest.SC_Player_List_In_Grid.playerNameList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_playernamelist();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SC_Player_List_In_Grid::_internal_playernamelist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.playernamelist_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SC_Player_List_In_Grid::_internal_mutable_playernamelist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.playernamelist_;
}

// -------------------------------------------------------------------

// CS_Skill_Use

// int32 skillId = 1;
inline void CS_Skill_Use::clear_skillid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skillid_ = 0;
}
inline ::int32_t CS_Skill_Use::skillid() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_Skill_Use.skillId)
  return _internal_skillid();
}
inline void CS_Skill_Use::set_skillid(::int32_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:msgTest.CS_Skill_Use.skillId)
}
inline ::int32_t CS_Skill_Use::_internal_skillid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.skillid_;
}
inline void CS_Skill_Use::_internal_set_skillid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skillid_ = value;
}

// .msgTest.SkillType skillType = 2;
inline void CS_Skill_Use::clear_skilltype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skilltype_ = 0;
}
inline ::msgTest::SkillType CS_Skill_Use::skilltype() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_Skill_Use.skillType)
  return _internal_skilltype();
}
inline void CS_Skill_Use::set_skilltype(::msgTest::SkillType value) {
  _internal_set_skilltype(value);
  // @@protoc_insertion_point(field_set:msgTest.CS_Skill_Use.skillType)
}
inline ::msgTest::SkillType CS_Skill_Use::_internal_skilltype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msgTest::SkillType>(_impl_.skilltype_);
}
inline void CS_Skill_Use::_internal_set_skilltype(::msgTest::SkillType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skilltype_ = value;
}

// .msgTest.Vector direction = 3;
inline bool CS_Skill_Use::has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.direction_ != nullptr);
  return value;
}
inline void CS_Skill_Use::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_ != nullptr) _impl_.direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Vector& CS_Skill_Use::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& CS_Skill_Use::direction() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.CS_Skill_Use.direction)
  return _internal_direction();
}
inline void CS_Skill_Use::unsafe_arena_set_allocated_direction(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.CS_Skill_Use.direction)
}
inline ::msgTest::Vector* CS_Skill_Use::release_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* released = _impl_.direction_;
  _impl_.direction_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* CS_Skill_Use::unsafe_arena_release_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.CS_Skill_Use.direction)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* CS_Skill_Use::_internal_mutable_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.direction_;
}
inline ::msgTest::Vector* CS_Skill_Use::mutable_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Vector* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Skill_Use.direction)
  return _msg;
}
inline void CS_Skill_Use::set_allocated_direction(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.direction_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Skill_Use.direction)
}

// .msgTest.Vector targetPos = 4;
inline bool CS_Skill_Use::has_targetpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetpos_ != nullptr);
  return value;
}
inline void CS_Skill_Use::clear_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.targetpos_ != nullptr) _impl_.targetpos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msgTest::Vector& CS_Skill_Use::_internal_targetpos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.targetpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& CS_Skill_Use::targetpos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.CS_Skill_Use.targetPos)
  return _internal_targetpos();
}
inline void CS_Skill_Use::unsafe_arena_set_allocated_targetpos(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.targetpos_);
  }
  _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.CS_Skill_Use.targetPos)
}
inline ::msgTest::Vector* CS_Skill_Use::release_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::Vector* released = _impl_.targetpos_;
  _impl_.targetpos_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* CS_Skill_Use::unsafe_arena_release_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.CS_Skill_Use.targetPos)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::Vector* temp = _impl_.targetpos_;
  _impl_.targetpos_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* CS_Skill_Use::_internal_mutable_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.targetpos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.targetpos_;
}
inline ::msgTest::Vector* CS_Skill_Use::mutable_targetpos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msgTest::Vector* _msg = _internal_mutable_targetpos();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Skill_Use.targetPos)
  return _msg;
}
inline void CS_Skill_Use::set_allocated_targetpos(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.targetpos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Skill_Use.targetPos)
}

// int32 targetId = 5;
inline void CS_Skill_Use::clear_targetid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetid_ = 0;
}
inline ::int32_t CS_Skill_Use::targetid() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_Skill_Use.targetId)
  return _internal_targetid();
}
inline void CS_Skill_Use::set_targetid(::int32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:msgTest.CS_Skill_Use.targetId)
}
inline ::int32_t CS_Skill_Use::_internal_targetid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.targetid_;
}
inline void CS_Skill_Use::_internal_set_targetid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetid_ = value;
}

// -------------------------------------------------------------------

// SC_Skill_Result

// bool success = 1;
inline void SC_Skill_Result::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SC_Skill_Result::success() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Result.success)
  return _internal_success();
}
inline void SC_Skill_Result::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Result.success)
}
inline bool SC_Skill_Result::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SC_Skill_Result::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// .msgTest.SkillFailType skillFailType = 2;
inline void SC_Skill_Result::clear_skillfailtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skillfailtype_ = 0;
}
inline ::msgTest::SkillFailType SC_Skill_Result::skillfailtype() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Result.skillFailType)
  return _internal_skillfailtype();
}
inline void SC_Skill_Result::set_skillfailtype(::msgTest::SkillFailType value) {
  _internal_set_skillfailtype(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Result.skillFailType)
}
inline ::msgTest::SkillFailType SC_Skill_Result::_internal_skillfailtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msgTest::SkillFailType>(_impl_.skillfailtype_);
}
inline void SC_Skill_Result::_internal_set_skillfailtype(::msgTest::SkillFailType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skillfailtype_ = value;
}

// int32 skillId = 3;
inline void SC_Skill_Result::clear_skillid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skillid_ = 0;
}
inline ::int32_t SC_Skill_Result::skillid() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Result.skillId)
  return _internal_skillid();
}
inline void SC_Skill_Result::set_skillid(::int32_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Result.skillId)
}
inline ::int32_t SC_Skill_Result::_internal_skillid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.skillid_;
}
inline void SC_Skill_Result::_internal_set_skillid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skillid_ = value;
}

// .msgTest.Vector direction = 4;
inline bool SC_Skill_Result::has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.direction_ != nullptr);
  return value;
}
inline void SC_Skill_Result::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_ != nullptr) _impl_.direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Vector& SC_Skill_Result::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& SC_Skill_Result::direction() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Result.direction)
  return _internal_direction();
}
inline void SC_Skill_Result::unsafe_arena_set_allocated_direction(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Skill_Result.direction)
}
inline ::msgTest::Vector* SC_Skill_Result::release_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* released = _impl_.direction_;
  _impl_.direction_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* SC_Skill_Result::unsafe_arena_release_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Skill_Result.direction)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* SC_Skill_Result::_internal_mutable_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.direction_;
}
inline ::msgTest::Vector* SC_Skill_Result::mutable_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Vector* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Skill_Result.direction)
  return _msg;
}
inline void SC_Skill_Result::set_allocated_direction(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.direction_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Skill_Result.direction)
}

// .msgTest.Vector targetPos = 5;
inline bool SC_Skill_Result::has_targetpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetpos_ != nullptr);
  return value;
}
inline void SC_Skill_Result::clear_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.targetpos_ != nullptr) _impl_.targetpos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msgTest::Vector& SC_Skill_Result::_internal_targetpos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.targetpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& SC_Skill_Result::targetpos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Result.targetPos)
  return _internal_targetpos();
}
inline void SC_Skill_Result::unsafe_arena_set_allocated_targetpos(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.targetpos_);
  }
  _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Skill_Result.targetPos)
}
inline ::msgTest::Vector* SC_Skill_Result::release_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::Vector* released = _impl_.targetpos_;
  _impl_.targetpos_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* SC_Skill_Result::unsafe_arena_release_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Skill_Result.targetPos)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::Vector* temp = _impl_.targetpos_;
  _impl_.targetpos_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* SC_Skill_Result::_internal_mutable_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.targetpos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.targetpos_;
}
inline ::msgTest::Vector* SC_Skill_Result::mutable_targetpos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msgTest::Vector* _msg = _internal_mutable_targetpos();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Skill_Result.targetPos)
  return _msg;
}
inline void SC_Skill_Result::set_allocated_targetpos(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.targetpos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Skill_Result.targetPos)
}

// int32 targetId = 6;
inline void SC_Skill_Result::clear_targetid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetid_ = 0;
}
inline ::int32_t SC_Skill_Result::targetid() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Result.targetId)
  return _internal_targetid();
}
inline void SC_Skill_Result::set_targetid(::int32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Result.targetId)
}
inline ::int32_t SC_Skill_Result::_internal_targetid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.targetid_;
}
inline void SC_Skill_Result::_internal_set_targetid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetid_ = value;
}

// int64 timestamp = 7;
inline void SC_Skill_Result::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t SC_Skill_Result::timestamp() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Result.timestamp)
  return _internal_timestamp();
}
inline void SC_Skill_Result::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Result.timestamp)
}
inline ::int64_t SC_Skill_Result::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void SC_Skill_Result::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// SC_Skill_Cast

// int32 casterId = 1;
inline void SC_Skill_Cast::clear_casterid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.casterid_ = 0;
}
inline ::int32_t SC_Skill_Cast::casterid() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Cast.casterId)
  return _internal_casterid();
}
inline void SC_Skill_Cast::set_casterid(::int32_t value) {
  _internal_set_casterid(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Cast.casterId)
}
inline ::int32_t SC_Skill_Cast::_internal_casterid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.casterid_;
}
inline void SC_Skill_Cast::_internal_set_casterid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.casterid_ = value;
}

// int32 skillId = 2;
inline void SC_Skill_Cast::clear_skillid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skillid_ = 0;
}
inline ::int32_t SC_Skill_Cast::skillid() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Cast.skillId)
  return _internal_skillid();
}
inline void SC_Skill_Cast::set_skillid(::int32_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Cast.skillId)
}
inline ::int32_t SC_Skill_Cast::_internal_skillid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.skillid_;
}
inline void SC_Skill_Cast::_internal_set_skillid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skillid_ = value;
}

// .msgTest.SkillType skillType = 3;
inline void SC_Skill_Cast::clear_skilltype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skilltype_ = 0;
}
inline ::msgTest::SkillType SC_Skill_Cast::skilltype() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Cast.skillType)
  return _internal_skilltype();
}
inline void SC_Skill_Cast::set_skilltype(::msgTest::SkillType value) {
  _internal_set_skilltype(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Cast.skillType)
}
inline ::msgTest::SkillType SC_Skill_Cast::_internal_skilltype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::msgTest::SkillType>(_impl_.skilltype_);
}
inline void SC_Skill_Cast::_internal_set_skilltype(::msgTest::SkillType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skilltype_ = value;
}

// .msgTest.Vector startPos = 4;
inline bool SC_Skill_Cast::has_startpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.startpos_ != nullptr);
  return value;
}
inline void SC_Skill_Cast::clear_startpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.startpos_ != nullptr) _impl_.startpos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::Vector& SC_Skill_Cast::_internal_startpos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.startpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& SC_Skill_Cast::startpos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Cast.startPos)
  return _internal_startpos();
}
inline void SC_Skill_Cast::unsafe_arena_set_allocated_startpos(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.startpos_);
  }
  _impl_.startpos_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Skill_Cast.startPos)
}
inline ::msgTest::Vector* SC_Skill_Cast::release_startpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* released = _impl_.startpos_;
  _impl_.startpos_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* SC_Skill_Cast::unsafe_arena_release_startpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Skill_Cast.startPos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::Vector* temp = _impl_.startpos_;
  _impl_.startpos_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* SC_Skill_Cast::_internal_mutable_startpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.startpos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.startpos_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.startpos_;
}
inline ::msgTest::Vector* SC_Skill_Cast::mutable_startpos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::msgTest::Vector* _msg = _internal_mutable_startpos();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Skill_Cast.startPos)
  return _msg;
}
inline void SC_Skill_Cast::set_allocated_startpos(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.startpos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.startpos_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Skill_Cast.startPos)
}

// .msgTest.Vector direction = 5;
inline bool SC_Skill_Cast::has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.direction_ != nullptr);
  return value;
}
inline void SC_Skill_Cast::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_ != nullptr) _impl_.direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msgTest::Vector& SC_Skill_Cast::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& SC_Skill_Cast::direction() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Cast.direction)
  return _internal_direction();
}
inline void SC_Skill_Cast::unsafe_arena_set_allocated_direction(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Skill_Cast.direction)
}
inline ::msgTest::Vector* SC_Skill_Cast::release_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::Vector* released = _impl_.direction_;
  _impl_.direction_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* SC_Skill_Cast::unsafe_arena_release_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Skill_Cast.direction)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::Vector* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* SC_Skill_Cast::_internal_mutable_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.direction_;
}
inline ::msgTest::Vector* SC_Skill_Cast::mutable_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::msgTest::Vector* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Skill_Cast.direction)
  return _msg;
}
inline void SC_Skill_Cast::set_allocated_direction(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.direction_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.direction_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Skill_Cast.direction)
}

// .msgTest.Vector targetPos = 6;
inline bool SC_Skill_Cast::has_targetpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetpos_ != nullptr);
  return value;
}
inline void SC_Skill_Cast::clear_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.targetpos_ != nullptr) _impl_.targetpos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::msgTest::Vector& SC_Skill_Cast::_internal_targetpos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::msgTest::Vector* p = _impl_.targetpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::Vector&>(::msgTest::_Vector_default_instance_);
}
inline const ::msgTest::Vector& SC_Skill_Cast::targetpos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Cast.targetPos)
  return _internal_targetpos();
}
inline void SC_Skill_Cast::unsafe_arena_set_allocated_targetpos(::msgTest::Vector* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.targetpos_);
  }
  _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Skill_Cast.targetPos)
}
inline ::msgTest::Vector* SC_Skill_Cast::release_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msgTest::Vector* released = _impl_.targetpos_;
  _impl_.targetpos_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::msgTest::Vector* SC_Skill_Cast::unsafe_arena_release_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:msgTest.SC_Skill_Cast.targetPos)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::msgTest::Vector* temp = _impl_.targetpos_;
  _impl_.targetpos_ = nullptr;
  return temp;
}
inline ::msgTest::Vector* SC_Skill_Cast::_internal_mutable_targetpos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.targetpos_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::msgTest::Vector>(GetArena());
    _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(p);
  }
  return _impl_.targetpos_;
}
inline ::msgTest::Vector* SC_Skill_Cast::mutable_targetpos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::msgTest::Vector* _msg = _internal_mutable_targetpos();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Skill_Cast.targetPos)
  return _msg;
}
inline void SC_Skill_Cast::set_allocated_targetpos(::msgTest::Vector* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.targetpos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.targetpos_ = reinterpret_cast<::msgTest::Vector*>(value);
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Skill_Cast.targetPos)
}

// int32 targetId = 7;
inline void SC_Skill_Cast::clear_targetid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetid_ = 0;
}
inline ::int32_t SC_Skill_Cast::targetid() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Cast.targetId)
  return _internal_targetid();
}
inline void SC_Skill_Cast::set_targetid(::int32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Cast.targetId)
}
inline ::int32_t SC_Skill_Cast::_internal_targetid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.targetid_;
}
inline void SC_Skill_Cast::_internal_set_targetid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetid_ = value;
}

// int64 timestamp = 8;
inline void SC_Skill_Cast::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t SC_Skill_Cast::timestamp() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Skill_Cast.timestamp)
  return _internal_timestamp();
}
inline void SC_Skill_Cast::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgTest.SC_Skill_Cast.timestamp)
}
inline ::int64_t SC_Skill_Cast::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void SC_Skill_Cast::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgTest


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::msgTest::SkillType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msgTest::SkillType>() {
  return ::msgTest::SkillType_descriptor();
}
template <>
struct is_proto_enum<::msgTest::SkillFailType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::msgTest::SkillFailType>() {
  return ::msgTest::SkillFailType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // messageTest_2eproto_2epb_2eh
