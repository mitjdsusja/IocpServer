// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageTest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messageTest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messageTest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messageTest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messageTest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messageTest_2eproto;
namespace msgTest {
class CS_Send_User_Info;
struct CS_Send_User_InfoDefaultTypeInternal;
extern CS_Send_User_InfoDefaultTypeInternal _CS_Send_User_Info_default_instance_;
class SC_Add_User;
struct SC_Add_UserDefaultTypeInternal;
extern SC_Add_UserDefaultTypeInternal _SC_Add_User_default_instance_;
class SC_Broadcast_User_Info;
struct SC_Broadcast_User_InfoDefaultTypeInternal;
extern SC_Broadcast_User_InfoDefaultTypeInternal _SC_Broadcast_User_Info_default_instance_;
class SC_Response_User_Info;
struct SC_Response_User_InfoDefaultTypeInternal;
extern SC_Response_User_InfoDefaultTypeInternal _SC_Response_User_Info_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserInfo_Pos;
struct UserInfo_PosDefaultTypeInternal;
extern UserInfo_PosDefaultTypeInternal _UserInfo_Pos_default_instance_;
class UserInfo_Vel;
struct UserInfo_VelDefaultTypeInternal;
extern UserInfo_VelDefaultTypeInternal _UserInfo_Vel_default_instance_;
}  // namespace msgTest
PROTOBUF_NAMESPACE_OPEN
template<> ::msgTest::CS_Send_User_Info* Arena::CreateMaybeMessage<::msgTest::CS_Send_User_Info>(Arena*);
template<> ::msgTest::SC_Add_User* Arena::CreateMaybeMessage<::msgTest::SC_Add_User>(Arena*);
template<> ::msgTest::SC_Broadcast_User_Info* Arena::CreateMaybeMessage<::msgTest::SC_Broadcast_User_Info>(Arena*);
template<> ::msgTest::SC_Response_User_Info* Arena::CreateMaybeMessage<::msgTest::SC_Response_User_Info>(Arena*);
template<> ::msgTest::UserInfo* Arena::CreateMaybeMessage<::msgTest::UserInfo>(Arena*);
template<> ::msgTest::UserInfo_Pos* Arena::CreateMaybeMessage<::msgTest::UserInfo_Pos>(Arena*);
template<> ::msgTest::UserInfo_Vel* Arena::CreateMaybeMessage<::msgTest::UserInfo_Vel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msgTest {

// ===================================================================

class UserInfo_Pos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.UserInfo.Pos) */ {
 public:
  inline UserInfo_Pos() : UserInfo_Pos(nullptr) {}
  ~UserInfo_Pos() override;
  explicit PROTOBUF_CONSTEXPR UserInfo_Pos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo_Pos(const UserInfo_Pos& from);
  UserInfo_Pos(UserInfo_Pos&& from) noexcept
    : UserInfo_Pos() {
    *this = ::std::move(from);
  }

  inline UserInfo_Pos& operator=(const UserInfo_Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo_Pos& operator=(UserInfo_Pos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo_Pos& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo_Pos* internal_default_instance() {
    return reinterpret_cast<const UserInfo_Pos*>(
               &_UserInfo_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfo_Pos& a, UserInfo_Pos& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo_Pos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo_Pos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo_Pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo_Pos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo_Pos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo_Pos& from) {
    UserInfo_Pos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo_Pos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.UserInfo.Pos";
  }
  protected:
  explicit UserInfo_Pos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // optional int32 posX = 1 [default = 0];
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  int32_t posx() const;
  void set_posx(int32_t value);
  private:
  int32_t _internal_posx() const;
  void _internal_set_posx(int32_t value);
  public:

  // optional int32 posY = 2 [default = 0];
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  int32_t posy() const;
  void set_posy(int32_t value);
  private:
  int32_t _internal_posy() const;
  void _internal_set_posy(int32_t value);
  public:

  // optional int32 posZ = 3 [default = 0];
  bool has_posz() const;
  private:
  bool _internal_has_posz() const;
  public:
  void clear_posz();
  int32_t posz() const;
  void set_posz(int32_t value);
  private:
  int32_t _internal_posz() const;
  void _internal_set_posz(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgTest.UserInfo.Pos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t posx_;
    int32_t posy_;
    int32_t posz_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class UserInfo_Vel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.UserInfo.Vel) */ {
 public:
  inline UserInfo_Vel() : UserInfo_Vel(nullptr) {}
  ~UserInfo_Vel() override;
  explicit PROTOBUF_CONSTEXPR UserInfo_Vel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo_Vel(const UserInfo_Vel& from);
  UserInfo_Vel(UserInfo_Vel&& from) noexcept
    : UserInfo_Vel() {
    *this = ::std::move(from);
  }

  inline UserInfo_Vel& operator=(const UserInfo_Vel& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo_Vel& operator=(UserInfo_Vel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo_Vel& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo_Vel* internal_default_instance() {
    return reinterpret_cast<const UserInfo_Vel*>(
               &_UserInfo_Vel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfo_Vel& a, UserInfo_Vel& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo_Vel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo_Vel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo_Vel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo_Vel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo_Vel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo_Vel& from) {
    UserInfo_Vel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo_Vel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.UserInfo.Vel";
  }
  protected:
  explicit UserInfo_Vel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecXFieldNumber = 1,
    kVecYFieldNumber = 2,
    kVecZFieldNumber = 3,
  };
  // optional int32 vecX = 1 [default = 0];
  bool has_vecx() const;
  private:
  bool _internal_has_vecx() const;
  public:
  void clear_vecx();
  int32_t vecx() const;
  void set_vecx(int32_t value);
  private:
  int32_t _internal_vecx() const;
  void _internal_set_vecx(int32_t value);
  public:

  // optional int32 vecY = 2 [default = 0];
  bool has_vecy() const;
  private:
  bool _internal_has_vecy() const;
  public:
  void clear_vecy();
  int32_t vecy() const;
  void set_vecy(int32_t value);
  private:
  int32_t _internal_vecy() const;
  void _internal_set_vecy(int32_t value);
  public:

  // optional int32 vecZ = 3 [default = 0];
  bool has_vecz() const;
  private:
  bool _internal_has_vecz() const;
  public:
  void clear_vecz();
  int32_t vecz() const;
  void set_vecz(int32_t value);
  private:
  int32_t _internal_vecz() const;
  void _internal_set_vecz(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgTest.UserInfo.Vel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t vecx_;
    int32_t vecy_;
    int32_t vecz_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserInfo_Pos Pos;
  typedef UserInfo_Vel Vel;

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kVecFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required .msgTest.UserInfo.Pos pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::msgTest::UserInfo_Pos& pos() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo_Pos* release_pos();
  ::msgTest::UserInfo_Pos* mutable_pos();
  void set_allocated_pos(::msgTest::UserInfo_Pos* pos);
  private:
  const ::msgTest::UserInfo_Pos& _internal_pos() const;
  ::msgTest::UserInfo_Pos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::msgTest::UserInfo_Pos* pos);
  ::msgTest::UserInfo_Pos* unsafe_arena_release_pos();

  // required .msgTest.UserInfo.Vel vec = 3;
  bool has_vec() const;
  private:
  bool _internal_has_vec() const;
  public:
  void clear_vec();
  const ::msgTest::UserInfo_Vel& vec() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo_Vel* release_vec();
  ::msgTest::UserInfo_Vel* mutable_vec();
  void set_allocated_vec(::msgTest::UserInfo_Vel* vec);
  private:
  const ::msgTest::UserInfo_Vel& _internal_vec() const;
  ::msgTest::UserInfo_Vel* _internal_mutable_vec();
  public:
  void unsafe_arena_set_allocated_vec(
      ::msgTest::UserInfo_Vel* vec);
  ::msgTest::UserInfo_Vel* unsafe_arena_release_vec();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgTest.UserInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo_Pos* pos_;
    ::msgTest::UserInfo_Vel* vec_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Send_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.CS_Send_User_Info) */ {
 public:
  inline CS_Send_User_Info() : CS_Send_User_Info(nullptr) {}
  ~CS_Send_User_Info() override;
  explicit PROTOBUF_CONSTEXPR CS_Send_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_Send_User_Info(const CS_Send_User_Info& from);
  CS_Send_User_Info(CS_Send_User_Info&& from) noexcept
    : CS_Send_User_Info() {
    *this = ::std::move(from);
  }

  inline CS_Send_User_Info& operator=(const CS_Send_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Send_User_Info& operator=(CS_Send_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Send_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Send_User_Info* internal_default_instance() {
    return reinterpret_cast<const CS_Send_User_Info*>(
               &_CS_Send_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CS_Send_User_Info& a, CS_Send_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_Send_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Send_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Send_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_Send_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_Send_User_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_Send_User_Info& from) {
    CS_Send_User_Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_Send_User_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.CS_Send_User_Info";
  }
  protected:
  explicit CS_Send_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::msgTest::UserInfo& userinfo() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo* release_userinfo();
  ::msgTest::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::msgTest::UserInfo* userinfo);
  private:
  const ::msgTest::UserInfo& _internal_userinfo() const;
  ::msgTest::UserInfo* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::msgTest::UserInfo* userinfo);
  ::msgTest::UserInfo* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:msgTest.CS_Send_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* userinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Response_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.SC_Response_User_Info) */ {
 public:
  inline SC_Response_User_Info() : SC_Response_User_Info(nullptr) {}
  ~SC_Response_User_Info() override;
  explicit PROTOBUF_CONSTEXPR SC_Response_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_Response_User_Info(const SC_Response_User_Info& from);
  SC_Response_User_Info(SC_Response_User_Info&& from) noexcept
    : SC_Response_User_Info() {
    *this = ::std::move(from);
  }

  inline SC_Response_User_Info& operator=(const SC_Response_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Response_User_Info& operator=(SC_Response_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Response_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Response_User_Info* internal_default_instance() {
    return reinterpret_cast<const SC_Response_User_Info*>(
               &_SC_Response_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SC_Response_User_Info& a, SC_Response_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_Response_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Response_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Response_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_Response_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_Response_User_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_Response_User_Info& from) {
    SC_Response_User_Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_Response_User_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.SC_Response_User_Info";
  }
  protected:
  explicit SC_Response_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::msgTest::UserInfo& userinfo() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo* release_userinfo();
  ::msgTest::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::msgTest::UserInfo* userinfo);
  private:
  const ::msgTest::UserInfo& _internal_userinfo() const;
  ::msgTest::UserInfo* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::msgTest::UserInfo* userinfo);
  ::msgTest::UserInfo* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:msgTest.SC_Response_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* userinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Broadcast_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.SC_Broadcast_User_Info) */ {
 public:
  inline SC_Broadcast_User_Info() : SC_Broadcast_User_Info(nullptr) {}
  ~SC_Broadcast_User_Info() override;
  explicit PROTOBUF_CONSTEXPR SC_Broadcast_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_Broadcast_User_Info(const SC_Broadcast_User_Info& from);
  SC_Broadcast_User_Info(SC_Broadcast_User_Info&& from) noexcept
    : SC_Broadcast_User_Info() {
    *this = ::std::move(from);
  }

  inline SC_Broadcast_User_Info& operator=(const SC_Broadcast_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Broadcast_User_Info& operator=(SC_Broadcast_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Broadcast_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Broadcast_User_Info* internal_default_instance() {
    return reinterpret_cast<const SC_Broadcast_User_Info*>(
               &_SC_Broadcast_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SC_Broadcast_User_Info& a, SC_Broadcast_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_Broadcast_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Broadcast_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Broadcast_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_Broadcast_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_Broadcast_User_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_Broadcast_User_Info& from) {
    SC_Broadcast_User_Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_Broadcast_User_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.SC_Broadcast_User_Info";
  }
  protected:
  explicit SC_Broadcast_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersInfoFieldNumber = 1,
  };
  // repeated .msgTest.UserInfo usersInfo = 1;
  int usersinfo_size() const;
  private:
  int _internal_usersinfo_size() const;
  public:
  void clear_usersinfo();
  ::msgTest::UserInfo* mutable_usersinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >*
      mutable_usersinfo();
  private:
  const ::msgTest::UserInfo& _internal_usersinfo(int index) const;
  ::msgTest::UserInfo* _internal_add_usersinfo();
  public:
  const ::msgTest::UserInfo& usersinfo(int index) const;
  ::msgTest::UserInfo* add_usersinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >&
      usersinfo() const;

  // @@protoc_insertion_point(class_scope:msgTest.SC_Broadcast_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo > usersinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Add_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.SC_Add_User) */ {
 public:
  inline SC_Add_User() : SC_Add_User(nullptr) {}
  ~SC_Add_User() override;
  explicit PROTOBUF_CONSTEXPR SC_Add_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_Add_User(const SC_Add_User& from);
  SC_Add_User(SC_Add_User&& from) noexcept
    : SC_Add_User() {
    *this = ::std::move(from);
  }

  inline SC_Add_User& operator=(const SC_Add_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Add_User& operator=(SC_Add_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Add_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Add_User* internal_default_instance() {
    return reinterpret_cast<const SC_Add_User*>(
               &_SC_Add_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SC_Add_User& a, SC_Add_User& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_Add_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Add_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Add_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_Add_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_Add_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_Add_User& from) {
    SC_Add_User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_Add_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.SC_Add_User";
  }
  protected:
  explicit SC_Add_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo usersInfo = 1;
  bool has_usersinfo() const;
  private:
  bool _internal_has_usersinfo() const;
  public:
  void clear_usersinfo();
  const ::msgTest::UserInfo& usersinfo() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo* release_usersinfo();
  ::msgTest::UserInfo* mutable_usersinfo();
  void set_allocated_usersinfo(::msgTest::UserInfo* usersinfo);
  private:
  const ::msgTest::UserInfo& _internal_usersinfo() const;
  ::msgTest::UserInfo* _internal_mutable_usersinfo();
  public:
  void unsafe_arena_set_allocated_usersinfo(
      ::msgTest::UserInfo* usersinfo);
  ::msgTest::UserInfo* unsafe_arena_release_usersinfo();

  // @@protoc_insertion_point(class_scope:msgTest.SC_Add_User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* usersinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo_Pos

// optional int32 posX = 1 [default = 0];
inline bool UserInfo_Pos::_internal_has_posx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfo_Pos::has_posx() const {
  return _internal_has_posx();
}
inline void UserInfo_Pos::clear_posx() {
  _impl_.posx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t UserInfo_Pos::_internal_posx() const {
  return _impl_.posx_;
}
inline int32_t UserInfo_Pos::posx() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Pos.posX)
  return _internal_posx();
}
inline void UserInfo_Pos::_internal_set_posx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.posx_ = value;
}
inline void UserInfo_Pos::set_posx(int32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Pos.posX)
}

// optional int32 posY = 2 [default = 0];
inline bool UserInfo_Pos::_internal_has_posy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfo_Pos::has_posy() const {
  return _internal_has_posy();
}
inline void UserInfo_Pos::clear_posy() {
  _impl_.posy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t UserInfo_Pos::_internal_posy() const {
  return _impl_.posy_;
}
inline int32_t UserInfo_Pos::posy() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Pos.posY)
  return _internal_posy();
}
inline void UserInfo_Pos::_internal_set_posy(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.posy_ = value;
}
inline void UserInfo_Pos::set_posy(int32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Pos.posY)
}

// optional int32 posZ = 3 [default = 0];
inline bool UserInfo_Pos::_internal_has_posz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInfo_Pos::has_posz() const {
  return _internal_has_posz();
}
inline void UserInfo_Pos::clear_posz() {
  _impl_.posz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t UserInfo_Pos::_internal_posz() const {
  return _impl_.posz_;
}
inline int32_t UserInfo_Pos::posz() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Pos.posZ)
  return _internal_posz();
}
inline void UserInfo_Pos::_internal_set_posz(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.posz_ = value;
}
inline void UserInfo_Pos::set_posz(int32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Pos.posZ)
}

// -------------------------------------------------------------------

// UserInfo_Vel

// optional int32 vecX = 1 [default = 0];
inline bool UserInfo_Vel::_internal_has_vecx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfo_Vel::has_vecx() const {
  return _internal_has_vecx();
}
inline void UserInfo_Vel::clear_vecx() {
  _impl_.vecx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t UserInfo_Vel::_internal_vecx() const {
  return _impl_.vecx_;
}
inline int32_t UserInfo_Vel::vecx() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Vel.vecX)
  return _internal_vecx();
}
inline void UserInfo_Vel::_internal_set_vecx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vecx_ = value;
}
inline void UserInfo_Vel::set_vecx(int32_t value) {
  _internal_set_vecx(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Vel.vecX)
}

// optional int32 vecY = 2 [default = 0];
inline bool UserInfo_Vel::_internal_has_vecy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfo_Vel::has_vecy() const {
  return _internal_has_vecy();
}
inline void UserInfo_Vel::clear_vecy() {
  _impl_.vecy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t UserInfo_Vel::_internal_vecy() const {
  return _impl_.vecy_;
}
inline int32_t UserInfo_Vel::vecy() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Vel.vecY)
  return _internal_vecy();
}
inline void UserInfo_Vel::_internal_set_vecy(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vecy_ = value;
}
inline void UserInfo_Vel::set_vecy(int32_t value) {
  _internal_set_vecy(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Vel.vecY)
}

// optional int32 vecZ = 3 [default = 0];
inline bool UserInfo_Vel::_internal_has_vecz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInfo_Vel::has_vecz() const {
  return _internal_has_vecz();
}
inline void UserInfo_Vel::clear_vecz() {
  _impl_.vecz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t UserInfo_Vel::_internal_vecz() const {
  return _impl_.vecz_;
}
inline int32_t UserInfo_Vel::vecz() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Vel.vecZ)
  return _internal_vecz();
}
inline void UserInfo_Vel::_internal_set_vecz(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vecz_ = value;
}
inline void UserInfo_Vel::set_vecz(int32_t value) {
  _internal_set_vecz(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Vel.vecZ)
}

// -------------------------------------------------------------------

// UserInfo

// required int32 id = 1;
inline bool UserInfo::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInfo::has_id() const {
  return _internal_has_id();
}
inline void UserInfo::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t UserInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UserInfo::id() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.id)
  return _internal_id();
}
inline void UserInfo::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void UserInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.id)
}

// required .msgTest.UserInfo.Pos pos = 2;
inline bool UserInfo::_internal_has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline bool UserInfo::has_pos() const {
  return _internal_has_pos();
}
inline void UserInfo::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo_Pos& UserInfo::_internal_pos() const {
  const ::msgTest::UserInfo_Pos* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo_Pos&>(
      ::msgTest::_UserInfo_Pos_default_instance_);
}
inline const ::msgTest::UserInfo_Pos& UserInfo::pos() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.pos)
  return _internal_pos();
}
inline void UserInfo::unsafe_arena_set_allocated_pos(
    ::msgTest::UserInfo_Pos* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.UserInfo.pos)
}
inline ::msgTest::UserInfo_Pos* UserInfo::release_pos() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo_Pos* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo_Pos* UserInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:msgTest.UserInfo.pos)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo_Pos* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo_Pos* UserInfo::_internal_mutable_pos() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo_Pos>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::msgTest::UserInfo_Pos* UserInfo::mutable_pos() {
  ::msgTest::UserInfo_Pos* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msgTest.UserInfo.pos)
  return _msg;
}
inline void UserInfo::set_allocated_pos(::msgTest::UserInfo_Pos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:msgTest.UserInfo.pos)
}

// required .msgTest.UserInfo.Vel vec = 3;
inline bool UserInfo::_internal_has_vec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vec_ != nullptr);
  return value;
}
inline bool UserInfo::has_vec() const {
  return _internal_has_vec();
}
inline void UserInfo::clear_vec() {
  if (_impl_.vec_ != nullptr) _impl_.vec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msgTest::UserInfo_Vel& UserInfo::_internal_vec() const {
  const ::msgTest::UserInfo_Vel* p = _impl_.vec_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo_Vel&>(
      ::msgTest::_UserInfo_Vel_default_instance_);
}
inline const ::msgTest::UserInfo_Vel& UserInfo::vec() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.vec)
  return _internal_vec();
}
inline void UserInfo::unsafe_arena_set_allocated_vec(
    ::msgTest::UserInfo_Vel* vec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec_);
  }
  _impl_.vec_ = vec;
  if (vec) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.UserInfo.vec)
}
inline ::msgTest::UserInfo_Vel* UserInfo::release_vec() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::UserInfo_Vel* temp = _impl_.vec_;
  _impl_.vec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo_Vel* UserInfo::unsafe_arena_release_vec() {
  // @@protoc_insertion_point(field_release:msgTest.UserInfo.vec)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::UserInfo_Vel* temp = _impl_.vec_;
  _impl_.vec_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo_Vel* UserInfo::_internal_mutable_vec() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vec_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo_Vel>(GetArenaForAllocation());
    _impl_.vec_ = p;
  }
  return _impl_.vec_;
}
inline ::msgTest::UserInfo_Vel* UserInfo::mutable_vec() {
  ::msgTest::UserInfo_Vel* _msg = _internal_mutable_vec();
  // @@protoc_insertion_point(field_mutable:msgTest.UserInfo.vec)
  return _msg;
}
inline void UserInfo::set_allocated_vec(::msgTest::UserInfo_Vel* vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vec_;
  }
  if (vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vec);
    if (message_arena != submessage_arena) {
      vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vec_ = vec;
  // @@protoc_insertion_point(field_set_allocated:msgTest.UserInfo.vec)
}

// -------------------------------------------------------------------

// CS_Send_User_Info

// required .msgTest.UserInfo userInfo = 1;
inline bool CS_Send_User_Info::_internal_has_userinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinfo_ != nullptr);
  return value;
}
inline bool CS_Send_User_Info::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void CS_Send_User_Info::clear_userinfo() {
  if (_impl_.userinfo_ != nullptr) _impl_.userinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& CS_Send_User_Info::_internal_userinfo() const {
  const ::msgTest::UserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(
      ::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& CS_Send_User_Info::userinfo() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_Send_User_Info.userInfo)
  return _internal_userinfo();
}
inline void CS_Send_User_Info::unsafe_arena_set_allocated_userinfo(
    ::msgTest::UserInfo* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.CS_Send_User_Info.userInfo)
}
inline ::msgTest::UserInfo* CS_Send_User_Info::release_userinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:msgTest.CS_Send_User_Info.userInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::_internal_mutable_userinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::mutable_userinfo() {
  ::msgTest::UserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Send_User_Info.userInfo)
  return _msg;
}
inline void CS_Send_User_Info::set_allocated_userinfo(::msgTest::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Send_User_Info.userInfo)
}

// -------------------------------------------------------------------

// SC_Response_User_Info

// required .msgTest.UserInfo userInfo = 1;
inline bool SC_Response_User_Info::_internal_has_userinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinfo_ != nullptr);
  return value;
}
inline bool SC_Response_User_Info::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void SC_Response_User_Info::clear_userinfo() {
  if (_impl_.userinfo_ != nullptr) _impl_.userinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& SC_Response_User_Info::_internal_userinfo() const {
  const ::msgTest::UserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(
      ::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& SC_Response_User_Info::userinfo() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Response_User_Info.userInfo)
  return _internal_userinfo();
}
inline void SC_Response_User_Info::unsafe_arena_set_allocated_userinfo(
    ::msgTest::UserInfo* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Response_User_Info.userInfo)
}
inline ::msgTest::UserInfo* SC_Response_User_Info::release_userinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:msgTest.SC_Response_User_Info.userInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::_internal_mutable_userinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::mutable_userinfo() {
  ::msgTest::UserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Response_User_Info.userInfo)
  return _msg;
}
inline void SC_Response_User_Info::set_allocated_userinfo(::msgTest::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Response_User_Info.userInfo)
}

// -------------------------------------------------------------------

// SC_Broadcast_User_Info

// repeated .msgTest.UserInfo usersInfo = 1;
inline int SC_Broadcast_User_Info::_internal_usersinfo_size() const {
  return _impl_.usersinfo_.size();
}
inline int SC_Broadcast_User_Info::usersinfo_size() const {
  return _internal_usersinfo_size();
}
inline void SC_Broadcast_User_Info::clear_usersinfo() {
  _impl_.usersinfo_.Clear();
}
inline ::msgTest::UserInfo* SC_Broadcast_User_Info::mutable_usersinfo(int index) {
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _impl_.usersinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >*
SC_Broadcast_User_Info::mutable_usersinfo() {
  // @@protoc_insertion_point(field_mutable_list:msgTest.SC_Broadcast_User_Info.usersInfo)
  return &_impl_.usersinfo_;
}
inline const ::msgTest::UserInfo& SC_Broadcast_User_Info::_internal_usersinfo(int index) const {
  return _impl_.usersinfo_.Get(index);
}
inline const ::msgTest::UserInfo& SC_Broadcast_User_Info::usersinfo(int index) const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _internal_usersinfo(index);
}
inline ::msgTest::UserInfo* SC_Broadcast_User_Info::_internal_add_usersinfo() {
  return _impl_.usersinfo_.Add();
}
inline ::msgTest::UserInfo* SC_Broadcast_User_Info::add_usersinfo() {
  ::msgTest::UserInfo* _add = _internal_add_usersinfo();
  // @@protoc_insertion_point(field_add:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >&
SC_Broadcast_User_Info::usersinfo() const {
  // @@protoc_insertion_point(field_list:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _impl_.usersinfo_;
}

// -------------------------------------------------------------------

// SC_Add_User

// required .msgTest.UserInfo usersInfo = 1;
inline bool SC_Add_User::_internal_has_usersinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.usersinfo_ != nullptr);
  return value;
}
inline bool SC_Add_User::has_usersinfo() const {
  return _internal_has_usersinfo();
}
inline void SC_Add_User::clear_usersinfo() {
  if (_impl_.usersinfo_ != nullptr) _impl_.usersinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& SC_Add_User::_internal_usersinfo() const {
  const ::msgTest::UserInfo* p = _impl_.usersinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(
      ::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& SC_Add_User::usersinfo() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Add_User.usersInfo)
  return _internal_usersinfo();
}
inline void SC_Add_User::unsafe_arena_set_allocated_usersinfo(
    ::msgTest::UserInfo* usersinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usersinfo_);
  }
  _impl_.usersinfo_ = usersinfo;
  if (usersinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Add_User.usersInfo)
}
inline ::msgTest::UserInfo* SC_Add_User::release_usersinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.usersinfo_;
  _impl_.usersinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo* SC_Add_User::unsafe_arena_release_usersinfo() {
  // @@protoc_insertion_point(field_release:msgTest.SC_Add_User.usersInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.usersinfo_;
  _impl_.usersinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* SC_Add_User::_internal_mutable_usersinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.usersinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo>(GetArenaForAllocation());
    _impl_.usersinfo_ = p;
  }
  return _impl_.usersinfo_;
}
inline ::msgTest::UserInfo* SC_Add_User::mutable_usersinfo() {
  ::msgTest::UserInfo* _msg = _internal_mutable_usersinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Add_User.usersInfo)
  return _msg;
}
inline void SC_Add_User::set_allocated_usersinfo(::msgTest::UserInfo* usersinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.usersinfo_;
  }
  if (usersinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(usersinfo);
    if (message_arena != submessage_arena) {
      usersinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usersinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.usersinfo_ = usersinfo;
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Add_User.usersInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messageTest_2eproto
