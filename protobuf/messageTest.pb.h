// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageTest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messageTest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messageTest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messageTest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messageTest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messageTest_2eproto;
namespace msgTest {
class CS_Request_Other_User_Info;
struct CS_Request_Other_User_InfoDefaultTypeInternal;
extern CS_Request_Other_User_InfoDefaultTypeInternal _CS_Request_Other_User_Info_default_instance_;
class CS_Request_User_Info;
struct CS_Request_User_InfoDefaultTypeInternal;
extern CS_Request_User_InfoDefaultTypeInternal _CS_Request_User_Info_default_instance_;
class CS_Send_User_Info;
struct CS_Send_User_InfoDefaultTypeInternal;
extern CS_Send_User_InfoDefaultTypeInternal _CS_Send_User_Info_default_instance_;
class SC_Add_User;
struct SC_Add_UserDefaultTypeInternal;
extern SC_Add_UserDefaultTypeInternal _SC_Add_User_default_instance_;
class SC_Broadcast_User_Info;
struct SC_Broadcast_User_InfoDefaultTypeInternal;
extern SC_Broadcast_User_InfoDefaultTypeInternal _SC_Broadcast_User_Info_default_instance_;
class SC_Response_Other_User_Info;
struct SC_Response_Other_User_InfoDefaultTypeInternal;
extern SC_Response_Other_User_InfoDefaultTypeInternal _SC_Response_Other_User_Info_default_instance_;
class SC_Response_User_Info;
struct SC_Response_User_InfoDefaultTypeInternal;
extern SC_Response_User_InfoDefaultTypeInternal _SC_Response_User_Info_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserInfo_Position;
struct UserInfo_PositionDefaultTypeInternal;
extern UserInfo_PositionDefaultTypeInternal _UserInfo_Position_default_instance_;
class UserInfo_Velocity;
struct UserInfo_VelocityDefaultTypeInternal;
extern UserInfo_VelocityDefaultTypeInternal _UserInfo_Velocity_default_instance_;
}  // namespace msgTest
PROTOBUF_NAMESPACE_OPEN
template<> ::msgTest::CS_Request_Other_User_Info* Arena::CreateMaybeMessage<::msgTest::CS_Request_Other_User_Info>(Arena*);
template<> ::msgTest::CS_Request_User_Info* Arena::CreateMaybeMessage<::msgTest::CS_Request_User_Info>(Arena*);
template<> ::msgTest::CS_Send_User_Info* Arena::CreateMaybeMessage<::msgTest::CS_Send_User_Info>(Arena*);
template<> ::msgTest::SC_Add_User* Arena::CreateMaybeMessage<::msgTest::SC_Add_User>(Arena*);
template<> ::msgTest::SC_Broadcast_User_Info* Arena::CreateMaybeMessage<::msgTest::SC_Broadcast_User_Info>(Arena*);
template<> ::msgTest::SC_Response_Other_User_Info* Arena::CreateMaybeMessage<::msgTest::SC_Response_Other_User_Info>(Arena*);
template<> ::msgTest::SC_Response_User_Info* Arena::CreateMaybeMessage<::msgTest::SC_Response_User_Info>(Arena*);
template<> ::msgTest::UserInfo* Arena::CreateMaybeMessage<::msgTest::UserInfo>(Arena*);
template<> ::msgTest::UserInfo_Position* Arena::CreateMaybeMessage<::msgTest::UserInfo_Position>(Arena*);
template<> ::msgTest::UserInfo_Velocity* Arena::CreateMaybeMessage<::msgTest::UserInfo_Velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msgTest {

// ===================================================================

class UserInfo_Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.UserInfo.Position) */ {
 public:
  inline UserInfo_Position() : UserInfo_Position(nullptr) {}
  ~UserInfo_Position() override;
  explicit PROTOBUF_CONSTEXPR UserInfo_Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo_Position(const UserInfo_Position& from);
  UserInfo_Position(UserInfo_Position&& from) noexcept
    : UserInfo_Position() {
    *this = ::std::move(from);
  }

  inline UserInfo_Position& operator=(const UserInfo_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo_Position& operator=(UserInfo_Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo_Position* internal_default_instance() {
    return reinterpret_cast<const UserInfo_Position*>(
               &_UserInfo_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfo_Position& a, UserInfo_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo_Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo_Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo_Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo_Position& from) {
    UserInfo_Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo_Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.UserInfo.Position";
  }
  protected:
  explicit UserInfo_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional int32 x = 1 [default = 0];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2 [default = 0];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional int32 z = 3 [default = 0];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgTest.UserInfo.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t x_;
    int32_t y_;
    int32_t z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class UserInfo_Velocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.UserInfo.Velocity) */ {
 public:
  inline UserInfo_Velocity() : UserInfo_Velocity(nullptr) {}
  ~UserInfo_Velocity() override;
  explicit PROTOBUF_CONSTEXPR UserInfo_Velocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo_Velocity(const UserInfo_Velocity& from);
  UserInfo_Velocity(UserInfo_Velocity&& from) noexcept
    : UserInfo_Velocity() {
    *this = ::std::move(from);
  }

  inline UserInfo_Velocity& operator=(const UserInfo_Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo_Velocity& operator=(UserInfo_Velocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo_Velocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo_Velocity* internal_default_instance() {
    return reinterpret_cast<const UserInfo_Velocity*>(
               &_UserInfo_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfo_Velocity& a, UserInfo_Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo_Velocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo_Velocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo_Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo_Velocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo_Velocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo_Velocity& from) {
    UserInfo_Velocity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo_Velocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.UserInfo.Velocity";
  }
  protected:
  explicit UserInfo_Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional int32 x = 1 [default = 0];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2 [default = 0];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional int32 z = 3 [default = 0];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgTest.UserInfo.Velocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t x_;
    int32_t y_;
    int32_t z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserInfo_Position Position;
  typedef UserInfo_Velocity Velocity;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required .msgTest.UserInfo.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::msgTest::UserInfo_Position& position() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo_Position* release_position();
  ::msgTest::UserInfo_Position* mutable_position();
  void set_allocated_position(::msgTest::UserInfo_Position* position);
  private:
  const ::msgTest::UserInfo_Position& _internal_position() const;
  ::msgTest::UserInfo_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::msgTest::UserInfo_Position* position);
  ::msgTest::UserInfo_Position* unsafe_arena_release_position();

  // required .msgTest.UserInfo.Velocity velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::msgTest::UserInfo_Velocity& velocity() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo_Velocity* release_velocity();
  ::msgTest::UserInfo_Velocity* mutable_velocity();
  void set_allocated_velocity(::msgTest::UserInfo_Velocity* velocity);
  private:
  const ::msgTest::UserInfo_Velocity& _internal_velocity() const;
  ::msgTest::UserInfo_Velocity* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::msgTest::UserInfo_Velocity* velocity);
  ::msgTest::UserInfo_Velocity* unsafe_arena_release_velocity();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgTest.UserInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo_Position* position_;
    ::msgTest::UserInfo_Velocity* velocity_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Send_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.CS_Send_User_Info) */ {
 public:
  inline CS_Send_User_Info() : CS_Send_User_Info(nullptr) {}
  ~CS_Send_User_Info() override;
  explicit PROTOBUF_CONSTEXPR CS_Send_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_Send_User_Info(const CS_Send_User_Info& from);
  CS_Send_User_Info(CS_Send_User_Info&& from) noexcept
    : CS_Send_User_Info() {
    *this = ::std::move(from);
  }

  inline CS_Send_User_Info& operator=(const CS_Send_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Send_User_Info& operator=(CS_Send_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Send_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Send_User_Info* internal_default_instance() {
    return reinterpret_cast<const CS_Send_User_Info*>(
               &_CS_Send_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CS_Send_User_Info& a, CS_Send_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_Send_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Send_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Send_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_Send_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_Send_User_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_Send_User_Info& from) {
    CS_Send_User_Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_Send_User_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.CS_Send_User_Info";
  }
  protected:
  explicit CS_Send_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::msgTest::UserInfo& userinfo() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo* release_userinfo();
  ::msgTest::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::msgTest::UserInfo* userinfo);
  private:
  const ::msgTest::UserInfo& _internal_userinfo() const;
  ::msgTest::UserInfo* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::msgTest::UserInfo* userinfo);
  ::msgTest::UserInfo* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:msgTest.CS_Send_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* userinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Request_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msgTest.CS_Request_User_Info) */ {
 public:
  inline CS_Request_User_Info() : CS_Request_User_Info(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CS_Request_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_Request_User_Info(const CS_Request_User_Info& from);
  CS_Request_User_Info(CS_Request_User_Info&& from) noexcept
    : CS_Request_User_Info() {
    *this = ::std::move(from);
  }

  inline CS_Request_User_Info& operator=(const CS_Request_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Request_User_Info& operator=(CS_Request_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Request_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Request_User_Info* internal_default_instance() {
    return reinterpret_cast<const CS_Request_User_Info*>(
               &_CS_Request_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CS_Request_User_Info& a, CS_Request_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_Request_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Request_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Request_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_Request_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CS_Request_User_Info& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CS_Request_User_Info& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.CS_Request_User_Info";
  }
  protected:
  explicit CS_Request_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msgTest.CS_Request_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class CS_Request_Other_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msgTest.CS_Request_Other_User_Info) */ {
 public:
  inline CS_Request_Other_User_Info() : CS_Request_Other_User_Info(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CS_Request_Other_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_Request_Other_User_Info(const CS_Request_Other_User_Info& from);
  CS_Request_Other_User_Info(CS_Request_Other_User_Info&& from) noexcept
    : CS_Request_Other_User_Info() {
    *this = ::std::move(from);
  }

  inline CS_Request_Other_User_Info& operator=(const CS_Request_Other_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Request_Other_User_Info& operator=(CS_Request_Other_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Request_Other_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Request_Other_User_Info* internal_default_instance() {
    return reinterpret_cast<const CS_Request_Other_User_Info*>(
               &_CS_Request_Other_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CS_Request_Other_User_Info& a, CS_Request_Other_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_Request_Other_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Request_Other_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Request_Other_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_Request_Other_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CS_Request_Other_User_Info& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CS_Request_Other_User_Info& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.CS_Request_Other_User_Info";
  }
  protected:
  explicit CS_Request_Other_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msgTest.CS_Request_Other_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Response_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.SC_Response_User_Info) */ {
 public:
  inline SC_Response_User_Info() : SC_Response_User_Info(nullptr) {}
  ~SC_Response_User_Info() override;
  explicit PROTOBUF_CONSTEXPR SC_Response_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_Response_User_Info(const SC_Response_User_Info& from);
  SC_Response_User_Info(SC_Response_User_Info&& from) noexcept
    : SC_Response_User_Info() {
    *this = ::std::move(from);
  }

  inline SC_Response_User_Info& operator=(const SC_Response_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Response_User_Info& operator=(SC_Response_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Response_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Response_User_Info* internal_default_instance() {
    return reinterpret_cast<const SC_Response_User_Info*>(
               &_SC_Response_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SC_Response_User_Info& a, SC_Response_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_Response_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Response_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Response_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_Response_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_Response_User_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_Response_User_Info& from) {
    SC_Response_User_Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_Response_User_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.SC_Response_User_Info";
  }
  protected:
  explicit SC_Response_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::msgTest::UserInfo& userinfo() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo* release_userinfo();
  ::msgTest::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::msgTest::UserInfo* userinfo);
  private:
  const ::msgTest::UserInfo& _internal_userinfo() const;
  ::msgTest::UserInfo* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::msgTest::UserInfo* userinfo);
  ::msgTest::UserInfo* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:msgTest.SC_Response_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* userinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Response_Other_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.SC_Response_Other_User_Info) */ {
 public:
  inline SC_Response_Other_User_Info() : SC_Response_Other_User_Info(nullptr) {}
  ~SC_Response_Other_User_Info() override;
  explicit PROTOBUF_CONSTEXPR SC_Response_Other_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_Response_Other_User_Info(const SC_Response_Other_User_Info& from);
  SC_Response_Other_User_Info(SC_Response_Other_User_Info&& from) noexcept
    : SC_Response_Other_User_Info() {
    *this = ::std::move(from);
  }

  inline SC_Response_Other_User_Info& operator=(const SC_Response_Other_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Response_Other_User_Info& operator=(SC_Response_Other_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Response_Other_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Response_Other_User_Info* internal_default_instance() {
    return reinterpret_cast<const SC_Response_Other_User_Info*>(
               &_SC_Response_Other_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SC_Response_Other_User_Info& a, SC_Response_Other_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_Response_Other_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Response_Other_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Response_Other_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_Response_Other_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_Response_Other_User_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_Response_Other_User_Info& from) {
    SC_Response_Other_User_Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_Response_Other_User_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.SC_Response_Other_User_Info";
  }
  protected:
  explicit SC_Response_Other_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersInfoFieldNumber = 1,
  };
  // repeated .msgTest.UserInfo usersInfo = 1;
  int usersinfo_size() const;
  private:
  int _internal_usersinfo_size() const;
  public:
  void clear_usersinfo();
  ::msgTest::UserInfo* mutable_usersinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >*
      mutable_usersinfo();
  private:
  const ::msgTest::UserInfo& _internal_usersinfo(int index) const;
  ::msgTest::UserInfo* _internal_add_usersinfo();
  public:
  const ::msgTest::UserInfo& usersinfo(int index) const;
  ::msgTest::UserInfo* add_usersinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >&
      usersinfo() const;

  // @@protoc_insertion_point(class_scope:msgTest.SC_Response_Other_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo > usersinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Broadcast_User_Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.SC_Broadcast_User_Info) */ {
 public:
  inline SC_Broadcast_User_Info() : SC_Broadcast_User_Info(nullptr) {}
  ~SC_Broadcast_User_Info() override;
  explicit PROTOBUF_CONSTEXPR SC_Broadcast_User_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_Broadcast_User_Info(const SC_Broadcast_User_Info& from);
  SC_Broadcast_User_Info(SC_Broadcast_User_Info&& from) noexcept
    : SC_Broadcast_User_Info() {
    *this = ::std::move(from);
  }

  inline SC_Broadcast_User_Info& operator=(const SC_Broadcast_User_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Broadcast_User_Info& operator=(SC_Broadcast_User_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Broadcast_User_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Broadcast_User_Info* internal_default_instance() {
    return reinterpret_cast<const SC_Broadcast_User_Info*>(
               &_SC_Broadcast_User_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SC_Broadcast_User_Info& a, SC_Broadcast_User_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_Broadcast_User_Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Broadcast_User_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Broadcast_User_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_Broadcast_User_Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_Broadcast_User_Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_Broadcast_User_Info& from) {
    SC_Broadcast_User_Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_Broadcast_User_Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.SC_Broadcast_User_Info";
  }
  protected:
  explicit SC_Broadcast_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersInfoFieldNumber = 1,
  };
  // repeated .msgTest.UserInfo usersInfo = 1;
  int usersinfo_size() const;
  private:
  int _internal_usersinfo_size() const;
  public:
  void clear_usersinfo();
  ::msgTest::UserInfo* mutable_usersinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >*
      mutable_usersinfo();
  private:
  const ::msgTest::UserInfo& _internal_usersinfo(int index) const;
  ::msgTest::UserInfo* _internal_add_usersinfo();
  public:
  const ::msgTest::UserInfo& usersinfo(int index) const;
  ::msgTest::UserInfo* add_usersinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >&
      usersinfo() const;

  // @@protoc_insertion_point(class_scope:msgTest.SC_Broadcast_User_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo > usersinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// -------------------------------------------------------------------

class SC_Add_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgTest.SC_Add_User) */ {
 public:
  inline SC_Add_User() : SC_Add_User(nullptr) {}
  ~SC_Add_User() override;
  explicit PROTOBUF_CONSTEXPR SC_Add_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_Add_User(const SC_Add_User& from);
  SC_Add_User(SC_Add_User&& from) noexcept
    : SC_Add_User() {
    *this = ::std::move(from);
  }

  inline SC_Add_User& operator=(const SC_Add_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Add_User& operator=(SC_Add_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Add_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Add_User* internal_default_instance() {
    return reinterpret_cast<const SC_Add_User*>(
               &_SC_Add_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SC_Add_User& a, SC_Add_User& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_Add_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Add_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Add_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_Add_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_Add_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_Add_User& from) {
    SC_Add_User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_Add_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgTest.SC_Add_User";
  }
  protected:
  explicit SC_Add_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // required .msgTest.UserInfo userInfo = 1;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::msgTest::UserInfo& userinfo() const;
  PROTOBUF_NODISCARD ::msgTest::UserInfo* release_userinfo();
  ::msgTest::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::msgTest::UserInfo* userinfo);
  private:
  const ::msgTest::UserInfo& _internal_userinfo() const;
  ::msgTest::UserInfo* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::msgTest::UserInfo* userinfo);
  ::msgTest::UserInfo* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:msgTest.SC_Add_User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::msgTest::UserInfo* userinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageTest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo_Position

// optional int32 x = 1 [default = 0];
inline bool UserInfo_Position::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfo_Position::has_x() const {
  return _internal_has_x();
}
inline void UserInfo_Position::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t UserInfo_Position::_internal_x() const {
  return _impl_.x_;
}
inline int32_t UserInfo_Position::x() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Position.x)
  return _internal_x();
}
inline void UserInfo_Position::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void UserInfo_Position::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Position.x)
}

// optional int32 y = 2 [default = 0];
inline bool UserInfo_Position::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfo_Position::has_y() const {
  return _internal_has_y();
}
inline void UserInfo_Position::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t UserInfo_Position::_internal_y() const {
  return _impl_.y_;
}
inline int32_t UserInfo_Position::y() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Position.y)
  return _internal_y();
}
inline void UserInfo_Position::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void UserInfo_Position::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Position.y)
}

// optional int32 z = 3 [default = 0];
inline bool UserInfo_Position::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInfo_Position::has_z() const {
  return _internal_has_z();
}
inline void UserInfo_Position::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t UserInfo_Position::_internal_z() const {
  return _impl_.z_;
}
inline int32_t UserInfo_Position::z() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Position.z)
  return _internal_z();
}
inline void UserInfo_Position::_internal_set_z(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void UserInfo_Position::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Position.z)
}

// -------------------------------------------------------------------

// UserInfo_Velocity

// optional int32 x = 1 [default = 0];
inline bool UserInfo_Velocity::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfo_Velocity::has_x() const {
  return _internal_has_x();
}
inline void UserInfo_Velocity::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t UserInfo_Velocity::_internal_x() const {
  return _impl_.x_;
}
inline int32_t UserInfo_Velocity::x() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Velocity.x)
  return _internal_x();
}
inline void UserInfo_Velocity::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void UserInfo_Velocity::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Velocity.x)
}

// optional int32 y = 2 [default = 0];
inline bool UserInfo_Velocity::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfo_Velocity::has_y() const {
  return _internal_has_y();
}
inline void UserInfo_Velocity::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t UserInfo_Velocity::_internal_y() const {
  return _impl_.y_;
}
inline int32_t UserInfo_Velocity::y() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Velocity.y)
  return _internal_y();
}
inline void UserInfo_Velocity::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void UserInfo_Velocity::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Velocity.y)
}

// optional int32 z = 3 [default = 0];
inline bool UserInfo_Velocity::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInfo_Velocity::has_z() const {
  return _internal_has_z();
}
inline void UserInfo_Velocity::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t UserInfo_Velocity::_internal_z() const {
  return _impl_.z_;
}
inline int32_t UserInfo_Velocity::z() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.Velocity.z)
  return _internal_z();
}
inline void UserInfo_Velocity::_internal_set_z(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void UserInfo_Velocity::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.Velocity.z)
}

// -------------------------------------------------------------------

// UserInfo

// required int32 id = 1;
inline bool UserInfo::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInfo::has_id() const {
  return _internal_has_id();
}
inline void UserInfo::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t UserInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UserInfo::id() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.id)
  return _internal_id();
}
inline void UserInfo::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void UserInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msgTest.UserInfo.id)
}

// required .msgTest.UserInfo.Position position = 2;
inline bool UserInfo::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool UserInfo::has_position() const {
  return _internal_has_position();
}
inline void UserInfo::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo_Position& UserInfo::_internal_position() const {
  const ::msgTest::UserInfo_Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo_Position&>(
      ::msgTest::_UserInfo_Position_default_instance_);
}
inline const ::msgTest::UserInfo_Position& UserInfo::position() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.position)
  return _internal_position();
}
inline void UserInfo::unsafe_arena_set_allocated_position(
    ::msgTest::UserInfo_Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.UserInfo.position)
}
inline ::msgTest::UserInfo_Position* UserInfo::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo_Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo_Position* UserInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:msgTest.UserInfo.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo_Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo_Position* UserInfo::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo_Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::msgTest::UserInfo_Position* UserInfo::mutable_position() {
  ::msgTest::UserInfo_Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:msgTest.UserInfo.position)
  return _msg;
}
inline void UserInfo::set_allocated_position(::msgTest::UserInfo_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:msgTest.UserInfo.position)
}

// required .msgTest.UserInfo.Velocity velocity = 3;
inline bool UserInfo::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool UserInfo::has_velocity() const {
  return _internal_has_velocity();
}
inline void UserInfo::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::msgTest::UserInfo_Velocity& UserInfo::_internal_velocity() const {
  const ::msgTest::UserInfo_Velocity* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo_Velocity&>(
      ::msgTest::_UserInfo_Velocity_default_instance_);
}
inline const ::msgTest::UserInfo_Velocity& UserInfo::velocity() const {
  // @@protoc_insertion_point(field_get:msgTest.UserInfo.velocity)
  return _internal_velocity();
}
inline void UserInfo::unsafe_arena_set_allocated_velocity(
    ::msgTest::UserInfo_Velocity* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.UserInfo.velocity)
}
inline ::msgTest::UserInfo_Velocity* UserInfo::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::UserInfo_Velocity* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo_Velocity* UserInfo::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:msgTest.UserInfo.velocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::msgTest::UserInfo_Velocity* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo_Velocity* UserInfo::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo_Velocity>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::msgTest::UserInfo_Velocity* UserInfo::mutable_velocity() {
  ::msgTest::UserInfo_Velocity* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:msgTest.UserInfo.velocity)
  return _msg;
}
inline void UserInfo::set_allocated_velocity(::msgTest::UserInfo_Velocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:msgTest.UserInfo.velocity)
}

// -------------------------------------------------------------------

// CS_Send_User_Info

// required .msgTest.UserInfo userInfo = 1;
inline bool CS_Send_User_Info::_internal_has_userinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinfo_ != nullptr);
  return value;
}
inline bool CS_Send_User_Info::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void CS_Send_User_Info::clear_userinfo() {
  if (_impl_.userinfo_ != nullptr) _impl_.userinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& CS_Send_User_Info::_internal_userinfo() const {
  const ::msgTest::UserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(
      ::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& CS_Send_User_Info::userinfo() const {
  // @@protoc_insertion_point(field_get:msgTest.CS_Send_User_Info.userInfo)
  return _internal_userinfo();
}
inline void CS_Send_User_Info::unsafe_arena_set_allocated_userinfo(
    ::msgTest::UserInfo* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.CS_Send_User_Info.userInfo)
}
inline ::msgTest::UserInfo* CS_Send_User_Info::release_userinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:msgTest.CS_Send_User_Info.userInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::_internal_mutable_userinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::msgTest::UserInfo* CS_Send_User_Info::mutable_userinfo() {
  ::msgTest::UserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.CS_Send_User_Info.userInfo)
  return _msg;
}
inline void CS_Send_User_Info::set_allocated_userinfo(::msgTest::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:msgTest.CS_Send_User_Info.userInfo)
}

// -------------------------------------------------------------------

// CS_Request_User_Info

// -------------------------------------------------------------------

// CS_Request_Other_User_Info

// -------------------------------------------------------------------

// SC_Response_User_Info

// required .msgTest.UserInfo userInfo = 1;
inline bool SC_Response_User_Info::_internal_has_userinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinfo_ != nullptr);
  return value;
}
inline bool SC_Response_User_Info::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void SC_Response_User_Info::clear_userinfo() {
  if (_impl_.userinfo_ != nullptr) _impl_.userinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& SC_Response_User_Info::_internal_userinfo() const {
  const ::msgTest::UserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(
      ::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& SC_Response_User_Info::userinfo() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Response_User_Info.userInfo)
  return _internal_userinfo();
}
inline void SC_Response_User_Info::unsafe_arena_set_allocated_userinfo(
    ::msgTest::UserInfo* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Response_User_Info.userInfo)
}
inline ::msgTest::UserInfo* SC_Response_User_Info::release_userinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:msgTest.SC_Response_User_Info.userInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::_internal_mutable_userinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::msgTest::UserInfo* SC_Response_User_Info::mutable_userinfo() {
  ::msgTest::UserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Response_User_Info.userInfo)
  return _msg;
}
inline void SC_Response_User_Info::set_allocated_userinfo(::msgTest::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Response_User_Info.userInfo)
}

// -------------------------------------------------------------------

// SC_Response_Other_User_Info

// repeated .msgTest.UserInfo usersInfo = 1;
inline int SC_Response_Other_User_Info::_internal_usersinfo_size() const {
  return _impl_.usersinfo_.size();
}
inline int SC_Response_Other_User_Info::usersinfo_size() const {
  return _internal_usersinfo_size();
}
inline void SC_Response_Other_User_Info::clear_usersinfo() {
  _impl_.usersinfo_.Clear();
}
inline ::msgTest::UserInfo* SC_Response_Other_User_Info::mutable_usersinfo(int index) {
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Response_Other_User_Info.usersInfo)
  return _impl_.usersinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >*
SC_Response_Other_User_Info::mutable_usersinfo() {
  // @@protoc_insertion_point(field_mutable_list:msgTest.SC_Response_Other_User_Info.usersInfo)
  return &_impl_.usersinfo_;
}
inline const ::msgTest::UserInfo& SC_Response_Other_User_Info::_internal_usersinfo(int index) const {
  return _impl_.usersinfo_.Get(index);
}
inline const ::msgTest::UserInfo& SC_Response_Other_User_Info::usersinfo(int index) const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Response_Other_User_Info.usersInfo)
  return _internal_usersinfo(index);
}
inline ::msgTest::UserInfo* SC_Response_Other_User_Info::_internal_add_usersinfo() {
  return _impl_.usersinfo_.Add();
}
inline ::msgTest::UserInfo* SC_Response_Other_User_Info::add_usersinfo() {
  ::msgTest::UserInfo* _add = _internal_add_usersinfo();
  // @@protoc_insertion_point(field_add:msgTest.SC_Response_Other_User_Info.usersInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >&
SC_Response_Other_User_Info::usersinfo() const {
  // @@protoc_insertion_point(field_list:msgTest.SC_Response_Other_User_Info.usersInfo)
  return _impl_.usersinfo_;
}

// -------------------------------------------------------------------

// SC_Broadcast_User_Info

// repeated .msgTest.UserInfo usersInfo = 1;
inline int SC_Broadcast_User_Info::_internal_usersinfo_size() const {
  return _impl_.usersinfo_.size();
}
inline int SC_Broadcast_User_Info::usersinfo_size() const {
  return _internal_usersinfo_size();
}
inline void SC_Broadcast_User_Info::clear_usersinfo() {
  _impl_.usersinfo_.Clear();
}
inline ::msgTest::UserInfo* SC_Broadcast_User_Info::mutable_usersinfo(int index) {
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _impl_.usersinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >*
SC_Broadcast_User_Info::mutable_usersinfo() {
  // @@protoc_insertion_point(field_mutable_list:msgTest.SC_Broadcast_User_Info.usersInfo)
  return &_impl_.usersinfo_;
}
inline const ::msgTest::UserInfo& SC_Broadcast_User_Info::_internal_usersinfo(int index) const {
  return _impl_.usersinfo_.Get(index);
}
inline const ::msgTest::UserInfo& SC_Broadcast_User_Info::usersinfo(int index) const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _internal_usersinfo(index);
}
inline ::msgTest::UserInfo* SC_Broadcast_User_Info::_internal_add_usersinfo() {
  return _impl_.usersinfo_.Add();
}
inline ::msgTest::UserInfo* SC_Broadcast_User_Info::add_usersinfo() {
  ::msgTest::UserInfo* _add = _internal_add_usersinfo();
  // @@protoc_insertion_point(field_add:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgTest::UserInfo >&
SC_Broadcast_User_Info::usersinfo() const {
  // @@protoc_insertion_point(field_list:msgTest.SC_Broadcast_User_Info.usersInfo)
  return _impl_.usersinfo_;
}

// -------------------------------------------------------------------

// SC_Add_User

// required .msgTest.UserInfo userInfo = 1;
inline bool SC_Add_User::_internal_has_userinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinfo_ != nullptr);
  return value;
}
inline bool SC_Add_User::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void SC_Add_User::clear_userinfo() {
  if (_impl_.userinfo_ != nullptr) _impl_.userinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::msgTest::UserInfo& SC_Add_User::_internal_userinfo() const {
  const ::msgTest::UserInfo* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgTest::UserInfo&>(
      ::msgTest::_UserInfo_default_instance_);
}
inline const ::msgTest::UserInfo& SC_Add_User::userinfo() const {
  // @@protoc_insertion_point(field_get:msgTest.SC_Add_User.userInfo)
  return _internal_userinfo();
}
inline void SC_Add_User::unsafe_arena_set_allocated_userinfo(
    ::msgTest::UserInfo* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgTest.SC_Add_User.userInfo)
}
inline ::msgTest::UserInfo* SC_Add_User::release_userinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgTest::UserInfo* SC_Add_User::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:msgTest.SC_Add_User.userInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::msgTest::UserInfo* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::msgTest::UserInfo* SC_Add_User::_internal_mutable_userinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgTest::UserInfo>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::msgTest::UserInfo* SC_Add_User::mutable_userinfo() {
  ::msgTest::UserInfo* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:msgTest.SC_Add_User.userInfo)
  return _msg;
}
inline void SC_Add_User::set_allocated_userinfo(::msgTest::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:msgTest.SC_Add_User.userInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messageTest_2eproto
