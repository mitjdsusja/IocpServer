// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageTest.proto

#include "messageTest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msgTest {
PROTOBUF_CONSTEXPR UserInfo_Pos::UserInfo_Pos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.posx_)*/0
  , /*decltype(_impl_.posy_)*/0
  , /*decltype(_impl_.posz_)*/0} {}
struct UserInfo_PosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfo_PosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfo_PosDefaultTypeInternal() {}
  union {
    UserInfo_Pos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfo_PosDefaultTypeInternal _UserInfo_Pos_default_instance_;
PROTOBUF_CONSTEXPR UserInfo_Vel::UserInfo_Vel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vecx_)*/0
  , /*decltype(_impl_.vecy_)*/0
  , /*decltype(_impl_.vecz_)*/0} {}
struct UserInfo_VelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfo_VelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfo_VelDefaultTypeInternal() {}
  union {
    UserInfo_Vel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfo_VelDefaultTypeInternal _UserInfo_Vel_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.vec_)*/nullptr
  , /*decltype(_impl_.id_)*/0} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR CS_Send_User_Info::CS_Send_User_Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userinfo_)*/nullptr} {}
struct CS_Send_User_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_Send_User_InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_Send_User_InfoDefaultTypeInternal() {}
  union {
    CS_Send_User_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_Send_User_InfoDefaultTypeInternal _CS_Send_User_Info_default_instance_;
PROTOBUF_CONSTEXPR SC_Response_User_Info::SC_Response_User_Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userinfo_)*/nullptr} {}
struct SC_Response_User_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_Response_User_InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_Response_User_InfoDefaultTypeInternal() {}
  union {
    SC_Response_User_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_Response_User_InfoDefaultTypeInternal _SC_Response_User_Info_default_instance_;
PROTOBUF_CONSTEXPR SC_Broadcast_User_Info::SC_Broadcast_User_Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.usersinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_Broadcast_User_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_Broadcast_User_InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_Broadcast_User_InfoDefaultTypeInternal() {}
  union {
    SC_Broadcast_User_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_Broadcast_User_InfoDefaultTypeInternal _SC_Broadcast_User_Info_default_instance_;
PROTOBUF_CONSTEXPR SC_Add_User::SC_Add_User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.usersinfo_)*/nullptr} {}
struct SC_Add_UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_Add_UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_Add_UserDefaultTypeInternal() {}
  union {
    SC_Add_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_Add_UserDefaultTypeInternal _SC_Add_User_default_instance_;
}  // namespace msgTest
static ::_pb::Metadata file_level_metadata_messageTest_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_messageTest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messageTest_2eproto = nullptr;

const uint32_t TableStruct_messageTest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Pos, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Pos, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Pos, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Pos, _impl_.posz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Vel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Vel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Vel, _impl_.vecx_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Vel, _impl_.vecy_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo_Vel, _impl_.vecz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _impl_.vec_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msgTest::CS_Send_User_Info, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::CS_Send_User_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::CS_Send_User_Info, _impl_.userinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Response_User_Info, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Response_User_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Response_User_Info, _impl_.userinfo_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Broadcast_User_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Broadcast_User_Info, _impl_.usersinfo_),
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Add_User, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Add_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Add_User, _impl_.usersinfo_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::msgTest::UserInfo_Pos)},
  { 12, 21, -1, sizeof(::msgTest::UserInfo_Vel)},
  { 24, 33, -1, sizeof(::msgTest::UserInfo)},
  { 36, 43, -1, sizeof(::msgTest::CS_Send_User_Info)},
  { 44, 51, -1, sizeof(::msgTest::SC_Response_User_Info)},
  { 52, -1, -1, sizeof(::msgTest::SC_Broadcast_User_Info)},
  { 59, 66, -1, sizeof(::msgTest::SC_Add_User)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msgTest::_UserInfo_Pos_default_instance_._instance,
  &::msgTest::_UserInfo_Vel_default_instance_._instance,
  &::msgTest::_UserInfo_default_instance_._instance,
  &::msgTest::_CS_Send_User_Info_default_instance_._instance,
  &::msgTest::_SC_Response_User_Info_default_instance_._instance,
  &::msgTest::_SC_Broadcast_User_Info_default_instance_._instance,
  &::msgTest::_SC_Add_User_default_instance_._instance,
};

const char descriptor_table_protodef_messageTest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021messageTest.proto\022\007msgTest\"\322\001\n\010UserInf"
  "o\022\n\n\002id\030\001 \002(\005\022\"\n\003pos\030\002 \002(\0132\025.msgTest.Use"
  "rInfo.Pos\022\"\n\003vec\030\003 \002(\0132\025.msgTest.UserInf"
  "o.Vel\0328\n\003Pos\022\017\n\004posX\030\001 \001(\005:\0010\022\017\n\004posY\030\002 "
  "\001(\005:\0010\022\017\n\004posZ\030\003 \001(\005:\0010\0328\n\003Vel\022\017\n\004vecX\030\001"
  " \001(\005:\0010\022\017\n\004vecY\030\002 \001(\005:\0010\022\017\n\004vecZ\030\003 \001(\005:\001"
  "0\"8\n\021CS_Send_User_Info\022#\n\010userInfo\030\001 \002(\013"
  "2\021.msgTest.UserInfo\"<\n\025SC_Response_User_"
  "Info\022#\n\010userInfo\030\001 \002(\0132\021.msgTest.UserInf"
  "o\">\n\026SC_Broadcast_User_Info\022$\n\tusersInfo"
  "\030\001 \003(\0132\021.msgTest.UserInfo\"3\n\013SC_Add_User"
  "\022$\n\tusersInfo\030\001 \002(\0132\021.msgTest.UserInfo"
  ;
static ::_pbi::once_flag descriptor_table_messageTest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messageTest_2eproto = {
    false, false, 478, descriptor_table_protodef_messageTest_2eproto,
    "messageTest.proto",
    &descriptor_table_messageTest_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_messageTest_2eproto::offsets,
    file_level_metadata_messageTest_2eproto, file_level_enum_descriptors_messageTest_2eproto,
    file_level_service_descriptors_messageTest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messageTest_2eproto_getter() {
  return &descriptor_table_messageTest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messageTest_2eproto(&descriptor_table_messageTest_2eproto);
namespace msgTest {

// ===================================================================

class UserInfo_Pos::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfo_Pos>()._impl_._has_bits_);
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UserInfo_Pos::UserInfo_Pos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.UserInfo.Pos)
}
UserInfo_Pos::UserInfo_Pos(const UserInfo_Pos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo_Pos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:msgTest.UserInfo.Pos)
}

inline void UserInfo_Pos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.posx_){0}
    , decltype(_impl_.posy_){0}
    , decltype(_impl_.posz_){0}
  };
}

UserInfo_Pos::~UserInfo_Pos() {
  // @@protoc_insertion_point(destructor:msgTest.UserInfo.Pos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo_Pos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserInfo_Pos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo_Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.UserInfo.Pos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.posx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.posz_) -
        reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo_Pos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 posX = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_posx(&has_bits);
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 posY = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_posy(&has_bits);
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 posZ = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_posz(&has_bits);
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo_Pos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.UserInfo.Pos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 posX = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_posx(), target);
  }

  // optional int32 posY = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_posy(), target);
  }

  // optional int32 posZ = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.UserInfo.Pos)
  return target;
}

size_t UserInfo_Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.UserInfo.Pos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 posX = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posx());
    }

    // optional int32 posY = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posy());
    }

    // optional int32 posZ = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo_Pos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo_Pos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo_Pos::GetClassData() const { return &_class_data_; }


void UserInfo_Pos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo_Pos*>(&to_msg);
  auto& from = static_cast<const UserInfo_Pos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.UserInfo.Pos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.posx_ = from._impl_.posx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.posy_ = from._impl_.posy_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.posz_ = from._impl_.posz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo_Pos::CopyFrom(const UserInfo_Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.UserInfo.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo_Pos::IsInitialized() const {
  return true;
}

void UserInfo_Pos::InternalSwap(UserInfo_Pos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo_Pos, _impl_.posz_)
      + sizeof(UserInfo_Pos::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(UserInfo_Pos, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo_Pos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[0]);
}

// ===================================================================

class UserInfo_Vel::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfo_Vel>()._impl_._has_bits_);
  static void set_has_vecx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vecy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vecz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UserInfo_Vel::UserInfo_Vel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.UserInfo.Vel)
}
UserInfo_Vel::UserInfo_Vel(const UserInfo_Vel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo_Vel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vecx_){}
    , decltype(_impl_.vecy_){}
    , decltype(_impl_.vecz_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vecx_, &from._impl_.vecx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vecz_) -
    reinterpret_cast<char*>(&_impl_.vecx_)) + sizeof(_impl_.vecz_));
  // @@protoc_insertion_point(copy_constructor:msgTest.UserInfo.Vel)
}

inline void UserInfo_Vel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vecx_){0}
    , decltype(_impl_.vecy_){0}
    , decltype(_impl_.vecz_){0}
  };
}

UserInfo_Vel::~UserInfo_Vel() {
  // @@protoc_insertion_point(destructor:msgTest.UserInfo.Vel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo_Vel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserInfo_Vel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo_Vel::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.UserInfo.Vel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.vecx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vecz_) -
        reinterpret_cast<char*>(&_impl_.vecx_)) + sizeof(_impl_.vecz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo_Vel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 vecX = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vecx(&has_bits);
          _impl_.vecx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vecY = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vecy(&has_bits);
          _impl_.vecy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vecZ = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vecz(&has_bits);
          _impl_.vecz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo_Vel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.UserInfo.Vel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 vecX = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vecx(), target);
  }

  // optional int32 vecY = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vecy(), target);
  }

  // optional int32 vecZ = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_vecz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.UserInfo.Vel)
  return target;
}

size_t UserInfo_Vel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.UserInfo.Vel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 vecX = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vecx());
    }

    // optional int32 vecY = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vecy());
    }

    // optional int32 vecZ = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vecz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo_Vel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo_Vel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo_Vel::GetClassData() const { return &_class_data_; }


void UserInfo_Vel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo_Vel*>(&to_msg);
  auto& from = static_cast<const UserInfo_Vel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.UserInfo.Vel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.vecx_ = from._impl_.vecx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vecy_ = from._impl_.vecy_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.vecz_ = from._impl_.vecz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo_Vel::CopyFrom(const UserInfo_Vel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.UserInfo.Vel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo_Vel::IsInitialized() const {
  return true;
}

void UserInfo_Vel::InternalSwap(UserInfo_Vel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo_Vel, _impl_.vecz_)
      + sizeof(UserInfo_Vel::_impl_.vecz_)
      - PROTOBUF_FIELD_OFFSET(UserInfo_Vel, _impl_.vecx_)>(
          reinterpret_cast<char*>(&_impl_.vecx_),
          reinterpret_cast<char*>(&other->_impl_.vecx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo_Vel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[1]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfo>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msgTest::UserInfo_Pos& pos(const UserInfo* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msgTest::UserInfo_Vel& vec(const UserInfo* msg);
  static void set_has_vec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::msgTest::UserInfo_Pos&
UserInfo::_Internal::pos(const UserInfo* msg) {
  return *msg->_impl_.pos_;
}
const ::msgTest::UserInfo_Vel&
UserInfo::_Internal::vec(const UserInfo* msg) {
  return *msg->_impl_.vec_;
}
UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vec_){nullptr}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::msgTest::UserInfo_Pos(*from._impl_.pos_);
  }
  if (from._internal_has_vec()) {
    _this->_impl_.vec_ = new ::msgTest::UserInfo_Vel(*from._impl_.vec_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:msgTest.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vec_){nullptr}
    , decltype(_impl_.id_){0}
  };
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:msgTest.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.vec_;
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vec_ != nullptr);
      _impl_.vec_->Clear();
    }
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .msgTest.UserInfo.Pos pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .msgTest.UserInfo.Vel vec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required .msgTest.UserInfo.Pos pos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // required .msgTest.UserInfo.Vel vec = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vec(this),
        _Internal::vec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.UserInfo)
  return target;
}

size_t UserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msgTest.UserInfo)
  size_t total_size = 0;

  if (_internal_has_pos()) {
    // required .msgTest.UserInfo.Pos pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  if (_internal_has_vec()) {
    // required .msgTest.UserInfo.Vel vec = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vec_);
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return total_size;
}
size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.UserInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .msgTest.UserInfo.Pos pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);

    // required .msgTest.UserInfo.Vel vec = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vec_);

    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pos()->::msgTest::UserInfo_Pos::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vec()->::msgTest::UserInfo_Vel::MergeFrom(
          from._internal_vec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.id_)
      + sizeof(UserInfo::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[2]);
}

// ===================================================================

class CS_Send_User_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<CS_Send_User_Info>()._impl_._has_bits_);
  static const ::msgTest::UserInfo& userinfo(const CS_Send_User_Info* msg);
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::msgTest::UserInfo&
CS_Send_User_Info::_Internal::userinfo(const CS_Send_User_Info* msg) {
  return *msg->_impl_.userinfo_;
}
CS_Send_User_Info::CS_Send_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.CS_Send_User_Info)
}
CS_Send_User_Info::CS_Send_User_Info(const CS_Send_User_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_Send_User_Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::msgTest::UserInfo(*from._impl_.userinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:msgTest.CS_Send_User_Info)
}

inline void CS_Send_User_Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}
  };
}

CS_Send_User_Info::~CS_Send_User_Info() {
  // @@protoc_insertion_point(destructor:msgTest.CS_Send_User_Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_Send_User_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.userinfo_;
}

void CS_Send_User_Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_Send_User_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.CS_Send_User_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.userinfo_ != nullptr);
    _impl_.userinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_Send_User_Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .msgTest.UserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_Send_User_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.CS_Send_User_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .msgTest.UserInfo userInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.CS_Send_User_Info)
  return target;
}

size_t CS_Send_User_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.CS_Send_User_Info)
  size_t total_size = 0;

  // required .msgTest.UserInfo userInfo = 1;
  if (_internal_has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_Send_User_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_Send_User_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_Send_User_Info::GetClassData() const { return &_class_data_; }


void CS_Send_User_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_Send_User_Info*>(&to_msg);
  auto& from = static_cast<const CS_Send_User_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.CS_Send_User_Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userinfo()) {
    _this->_internal_mutable_userinfo()->::msgTest::UserInfo::MergeFrom(
        from._internal_userinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_Send_User_Info::CopyFrom(const CS_Send_User_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.CS_Send_User_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Send_User_Info::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_userinfo()) {
    if (!_impl_.userinfo_->IsInitialized()) return false;
  }
  return true;
}

void CS_Send_User_Info::InternalSwap(CS_Send_User_Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.userinfo_, other->_impl_.userinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_Send_User_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[3]);
}

// ===================================================================

class SC_Response_User_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<SC_Response_User_Info>()._impl_._has_bits_);
  static const ::msgTest::UserInfo& userinfo(const SC_Response_User_Info* msg);
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::msgTest::UserInfo&
SC_Response_User_Info::_Internal::userinfo(const SC_Response_User_Info* msg) {
  return *msg->_impl_.userinfo_;
}
SC_Response_User_Info::SC_Response_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.SC_Response_User_Info)
}
SC_Response_User_Info::SC_Response_User_Info(const SC_Response_User_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Response_User_Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::msgTest::UserInfo(*from._impl_.userinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:msgTest.SC_Response_User_Info)
}

inline void SC_Response_User_Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}
  };
}

SC_Response_User_Info::~SC_Response_User_Info() {
  // @@protoc_insertion_point(destructor:msgTest.SC_Response_User_Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Response_User_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.userinfo_;
}

void SC_Response_User_Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Response_User_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.SC_Response_User_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.userinfo_ != nullptr);
    _impl_.userinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Response_User_Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .msgTest.UserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Response_User_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.SC_Response_User_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .msgTest.UserInfo userInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.SC_Response_User_Info)
  return target;
}

size_t SC_Response_User_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.SC_Response_User_Info)
  size_t total_size = 0;

  // required .msgTest.UserInfo userInfo = 1;
  if (_internal_has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Response_User_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Response_User_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Response_User_Info::GetClassData() const { return &_class_data_; }


void SC_Response_User_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Response_User_Info*>(&to_msg);
  auto& from = static_cast<const SC_Response_User_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.SC_Response_User_Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userinfo()) {
    _this->_internal_mutable_userinfo()->::msgTest::UserInfo::MergeFrom(
        from._internal_userinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Response_User_Info::CopyFrom(const SC_Response_User_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.SC_Response_User_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Response_User_Info::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_userinfo()) {
    if (!_impl_.userinfo_->IsInitialized()) return false;
  }
  return true;
}

void SC_Response_User_Info::InternalSwap(SC_Response_User_Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.userinfo_, other->_impl_.userinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Response_User_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[4]);
}

// ===================================================================

class SC_Broadcast_User_Info::_Internal {
 public:
};

SC_Broadcast_User_Info::SC_Broadcast_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.SC_Broadcast_User_Info)
}
SC_Broadcast_User_Info::SC_Broadcast_User_Info(const SC_Broadcast_User_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Broadcast_User_Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.usersinfo_){from._impl_.usersinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgTest.SC_Broadcast_User_Info)
}

inline void SC_Broadcast_User_Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.usersinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_Broadcast_User_Info::~SC_Broadcast_User_Info() {
  // @@protoc_insertion_point(destructor:msgTest.SC_Broadcast_User_Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Broadcast_User_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.usersinfo_.~RepeatedPtrField();
}

void SC_Broadcast_User_Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Broadcast_User_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.SC_Broadcast_User_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usersinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Broadcast_User_Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msgTest.UserInfo usersInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usersinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Broadcast_User_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.SC_Broadcast_User_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msgTest.UserInfo usersInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_usersinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_usersinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.SC_Broadcast_User_Info)
  return target;
}

size_t SC_Broadcast_User_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.SC_Broadcast_User_Info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgTest.UserInfo usersInfo = 1;
  total_size += 1UL * this->_internal_usersinfo_size();
  for (const auto& msg : this->_impl_.usersinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Broadcast_User_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Broadcast_User_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Broadcast_User_Info::GetClassData() const { return &_class_data_; }


void SC_Broadcast_User_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Broadcast_User_Info*>(&to_msg);
  auto& from = static_cast<const SC_Broadcast_User_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.SC_Broadcast_User_Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.usersinfo_.MergeFrom(from._impl_.usersinfo_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Broadcast_User_Info::CopyFrom(const SC_Broadcast_User_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.SC_Broadcast_User_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Broadcast_User_Info::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.usersinfo_))
    return false;
  return true;
}

void SC_Broadcast_User_Info::InternalSwap(SC_Broadcast_User_Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.usersinfo_.InternalSwap(&other->_impl_.usersinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Broadcast_User_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[5]);
}

// ===================================================================

class SC_Add_User::_Internal {
 public:
  using HasBits = decltype(std::declval<SC_Add_User>()._impl_._has_bits_);
  static const ::msgTest::UserInfo& usersinfo(const SC_Add_User* msg);
  static void set_has_usersinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::msgTest::UserInfo&
SC_Add_User::_Internal::usersinfo(const SC_Add_User* msg) {
  return *msg->_impl_.usersinfo_;
}
SC_Add_User::SC_Add_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.SC_Add_User)
}
SC_Add_User::SC_Add_User(const SC_Add_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Add_User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.usersinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_usersinfo()) {
    _this->_impl_.usersinfo_ = new ::msgTest::UserInfo(*from._impl_.usersinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:msgTest.SC_Add_User)
}

inline void SC_Add_User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.usersinfo_){nullptr}
  };
}

SC_Add_User::~SC_Add_User() {
  // @@protoc_insertion_point(destructor:msgTest.SC_Add_User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Add_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.usersinfo_;
}

void SC_Add_User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Add_User::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.SC_Add_User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.usersinfo_ != nullptr);
    _impl_.usersinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Add_User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .msgTest.UserInfo usersInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_usersinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Add_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.SC_Add_User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .msgTest.UserInfo usersInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::usersinfo(this),
        _Internal::usersinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.SC_Add_User)
  return target;
}

size_t SC_Add_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.SC_Add_User)
  size_t total_size = 0;

  // required .msgTest.UserInfo usersInfo = 1;
  if (_internal_has_usersinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usersinfo_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Add_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Add_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Add_User::GetClassData() const { return &_class_data_; }


void SC_Add_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Add_User*>(&to_msg);
  auto& from = static_cast<const SC_Add_User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.SC_Add_User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_usersinfo()) {
    _this->_internal_mutable_usersinfo()->::msgTest::UserInfo::MergeFrom(
        from._internal_usersinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Add_User::CopyFrom(const SC_Add_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.SC_Add_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Add_User::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_usersinfo()) {
    if (!_impl_.usersinfo_->IsInitialized()) return false;
  }
  return true;
}

void SC_Add_User::InternalSwap(SC_Add_User* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.usersinfo_, other->_impl_.usersinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Add_User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msgTest::UserInfo_Pos*
Arena::CreateMaybeMessage< ::msgTest::UserInfo_Pos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::UserInfo_Pos >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::UserInfo_Vel*
Arena::CreateMaybeMessage< ::msgTest::UserInfo_Vel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::UserInfo_Vel >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::UserInfo*
Arena::CreateMaybeMessage< ::msgTest::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::CS_Send_User_Info*
Arena::CreateMaybeMessage< ::msgTest::CS_Send_User_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::CS_Send_User_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::SC_Response_User_Info*
Arena::CreateMaybeMessage< ::msgTest::SC_Response_User_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::SC_Response_User_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::SC_Broadcast_User_Info*
Arena::CreateMaybeMessage< ::msgTest::SC_Broadcast_User_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::SC_Broadcast_User_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::SC_Add_User*
Arena::CreateMaybeMessage< ::msgTest::SC_Add_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::SC_Add_User >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
