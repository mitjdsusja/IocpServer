// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageTest.proto

#include "messageTest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msgTest {
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR Direction::Direction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct DirectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectionDefaultTypeInternal() {}
  union {
    Direction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectionDefaultTypeInternal _Direction_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.direction_)*/nullptr
  , /*decltype(_impl_.id_)*/0} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR MoveState::MoveState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.direction_)*/nullptr
  , /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct MoveStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveStateDefaultTypeInternal() {}
  union {
    MoveState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveStateDefaultTypeInternal _MoveState_default_instance_;
PROTOBUF_CONSTEXPR CS_Connect_Server::CS_Connect_Server(
    ::_pbi::ConstantInitialized) {}
struct CS_Connect_ServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_Connect_ServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_Connect_ServerDefaultTypeInternal() {}
  union {
    CS_Connect_Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_Connect_ServerDefaultTypeInternal _CS_Connect_Server_default_instance_;
PROTOBUF_CONSTEXPR CS_Request_Server_State::CS_Request_Server_State(
    ::_pbi::ConstantInitialized) {}
struct CS_Request_Server_StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_Request_Server_StateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_Request_Server_StateDefaultTypeInternal() {}
  union {
    CS_Request_Server_State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_Request_Server_StateDefaultTypeInternal _CS_Request_Server_State_default_instance_;
PROTOBUF_CONSTEXPR CS_Move_User::CS_Move_User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.movestate_)*/nullptr} {}
struct CS_Move_UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_Move_UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_Move_UserDefaultTypeInternal() {}
  union {
    CS_Move_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_Move_UserDefaultTypeInternal _CS_Move_User_default_instance_;
PROTOBUF_CONSTEXPR SC_Accept_Client::SC_Accept_Client(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userinfo_)*/nullptr} {}
struct SC_Accept_ClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_Accept_ClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_Accept_ClientDefaultTypeInternal() {}
  union {
    SC_Accept_Client _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_Accept_ClientDefaultTypeInternal _SC_Accept_Client_default_instance_;
PROTOBUF_CONSTEXPR SC_Response_Server_State::SC_Response_Server_State(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userinfos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_Response_Server_StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_Response_Server_StateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_Response_Server_StateDefaultTypeInternal() {}
  union {
    SC_Response_Server_State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_Response_Server_StateDefaultTypeInternal _SC_Response_Server_State_default_instance_;
PROTOBUF_CONSTEXPR SC_Result_Move_User::SC_Result_Move_User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userinfo_)*/nullptr} {}
struct SC_Result_Move_UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_Result_Move_UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_Result_Move_UserDefaultTypeInternal() {}
  union {
    SC_Result_Move_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_Result_Move_UserDefaultTypeInternal _SC_Result_Move_User_default_instance_;
PROTOBUF_CONSTEXPR SC_Connect_Other_User::SC_Connect_Other_User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userinfo_)*/nullptr} {}
struct SC_Connect_Other_UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_Connect_Other_UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_Connect_Other_UserDefaultTypeInternal() {}
  union {
    SC_Connect_Other_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_Connect_Other_UserDefaultTypeInternal _SC_Connect_Other_User_default_instance_;
PROTOBUF_CONSTEXPR SC_Broadcast_User_Info::SC_Broadcast_User_Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userinfos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_Broadcast_User_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_Broadcast_User_InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_Broadcast_User_InfoDefaultTypeInternal() {}
  union {
    SC_Broadcast_User_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_Broadcast_User_InfoDefaultTypeInternal _SC_Broadcast_User_Info_default_instance_;
}  // namespace msgTest
static ::_pb::Metadata file_level_metadata_messageTest_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_messageTest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messageTest_2eproto = nullptr;

const uint32_t TableStruct_messageTest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::msgTest::Position, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::Position, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::msgTest::Position, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::msgTest::Position, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msgTest::Direction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::Direction, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::msgTest::Direction, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::msgTest::Direction, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::msgTest::UserInfo, _impl_.direction_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msgTest::MoveState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::MoveState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::MoveState, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::msgTest::MoveState, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::msgTest::MoveState, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::msgTest::MoveState, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::msgTest::MoveState, _impl_.timestamp_),
  2,
  0,
  1,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgTest::CS_Connect_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgTest::CS_Request_Server_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::CS_Move_User, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::CS_Move_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::CS_Move_User, _impl_.movestate_),
  0,
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Accept_Client, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Accept_Client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Accept_Client, _impl_.userinfo_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Response_Server_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Response_Server_State, _impl_.userinfos_),
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Result_Move_User, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Result_Move_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Result_Move_User, _impl_.userinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Connect_Other_User, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Connect_Other_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Connect_Other_User, _impl_.userinfo_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Broadcast_User_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgTest::SC_Broadcast_User_Info, _impl_.userinfos_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::msgTest::Position)},
  { 12, 21, -1, sizeof(::msgTest::Direction)},
  { 24, 33, -1, sizeof(::msgTest::UserInfo)},
  { 36, 47, -1, sizeof(::msgTest::MoveState)},
  { 52, -1, -1, sizeof(::msgTest::CS_Connect_Server)},
  { 58, -1, -1, sizeof(::msgTest::CS_Request_Server_State)},
  { 64, 71, -1, sizeof(::msgTest::CS_Move_User)},
  { 72, 79, -1, sizeof(::msgTest::SC_Accept_Client)},
  { 80, -1, -1, sizeof(::msgTest::SC_Response_Server_State)},
  { 87, 94, -1, sizeof(::msgTest::SC_Result_Move_User)},
  { 95, 102, -1, sizeof(::msgTest::SC_Connect_Other_User)},
  { 103, -1, -1, sizeof(::msgTest::SC_Broadcast_User_Info)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msgTest::_Position_default_instance_._instance,
  &::msgTest::_Direction_default_instance_._instance,
  &::msgTest::_UserInfo_default_instance_._instance,
  &::msgTest::_MoveState_default_instance_._instance,
  &::msgTest::_CS_Connect_Server_default_instance_._instance,
  &::msgTest::_CS_Request_Server_State_default_instance_._instance,
  &::msgTest::_CS_Move_User_default_instance_._instance,
  &::msgTest::_SC_Accept_Client_default_instance_._instance,
  &::msgTest::_SC_Response_Server_State_default_instance_._instance,
  &::msgTest::_SC_Result_Move_User_default_instance_._instance,
  &::msgTest::_SC_Connect_Other_User_default_instance_._instance,
  &::msgTest::_SC_Broadcast_User_Info_default_instance_._instance,
};

const char descriptor_table_protodef_messageTest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021messageTest.proto\022\007msgTest\"4\n\010Position"
  "\022\014\n\001x\030\001 \001(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\022\014\n\001z\030\003 \001(\002:"
  "\0010\"5\n\tDirection\022\014\n\001x\030\001 \001(\002:\0010\022\014\n\001y\030\002 \001(\002"
  ":\0010\022\014\n\001z\030\003 \001(\002:\0010\"b\n\010UserInfo\022\n\n\002id\030\001 \002("
  "\005\022#\n\010position\030\002 \002(\0132\021.msgTest.Position\022%"
  "\n\tdirection\030\003 \002(\0132\022.msgTest.Direction\"\211\001"
  "\n\tMoveState\022\016\n\006userId\030\001 \002(\005\022#\n\010position\030"
  "\002 \002(\0132\021.msgTest.Position\022%\n\tdirection\030\003 "
  "\002(\0132\022.msgTest.Direction\022\r\n\005speed\030\004 \002(\002\022\021"
  "\n\ttimestamp\030\005 \002(\003\"\023\n\021CS_Connect_Server\"\031"
  "\n\027CS_Request_Server_State\"5\n\014CS_Move_Use"
  "r\022%\n\tmoveState\030\001 \002(\0132\022.msgTest.MoveState"
  "\"7\n\020SC_Accept_Client\022#\n\010userInfo\030\001 \002(\0132\021"
  ".msgTest.UserInfo\"@\n\030SC_Response_Server_"
  "State\022$\n\tuserInfos\030\001 \003(\0132\021.msgTest.UserI"
  "nfo\":\n\023SC_Result_Move_User\022#\n\010userInfo\030\001"
  " \002(\0132\021.msgTest.UserInfo\"<\n\025SC_Connect_Ot"
  "her_User\022#\n\010userInfo\030\001 \002(\0132\021.msgTest.Use"
  "rInfo\">\n\026SC_Broadcast_User_Info\022$\n\tuserI"
  "nfos\030\001 \003(\0132\021.msgTest.UserInfo"
  ;
static ::_pbi::once_flag descriptor_table_messageTest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messageTest_2eproto = {
    false, false, 789, descriptor_table_protodef_messageTest_2eproto,
    "messageTest.proto",
    &descriptor_table_messageTest_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_messageTest_2eproto::offsets,
    file_level_metadata_messageTest_2eproto, file_level_enum_descriptors_messageTest_2eproto,
    file_level_service_descriptors_messageTest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messageTest_2eproto_getter() {
  return &descriptor_table_messageTest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messageTest_2eproto(&descriptor_table_messageTest_2eproto);
namespace msgTest {

// ===================================================================

class Position::_Internal {
 public:
  using HasBits = decltype(std::declval<Position>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:msgTest.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:msgTest.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.z_)
      + sizeof(Position::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[0]);
}

// ===================================================================

class Direction::_Internal {
 public:
  using HasBits = decltype(std::declval<Direction>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Direction::Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.Direction)
}
Direction::Direction(const Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Direction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:msgTest.Direction)
}

inline void Direction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

Direction::~Direction() {
  // @@protoc_insertion_point(destructor:msgTest.Direction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Direction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Direction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.Direction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Direction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Direction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.Direction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.Direction)
  return target;
}

size_t Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.Direction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Direction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Direction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Direction::GetClassData() const { return &_class_data_; }


void Direction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Direction*>(&to_msg);
  auto& from = static_cast<const Direction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.Direction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Direction::CopyFrom(const Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Direction::IsInitialized() const {
  return true;
}

void Direction::InternalSwap(Direction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Direction, _impl_.z_)
      + sizeof(Direction::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Direction, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Direction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[1]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfo>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msgTest::Position& position(const UserInfo* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msgTest::Direction& direction(const UserInfo* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::msgTest::Position&
UserInfo::_Internal::position(const UserInfo* msg) {
  return *msg->_impl_.position_;
}
const ::msgTest::Direction&
UserInfo::_Internal::direction(const UserInfo* msg) {
  return *msg->_impl_.direction_;
}
UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::msgTest::Position(*from._impl_.position_);
  }
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::msgTest::Direction(*from._impl_.direction_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:msgTest.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.id_){0}
  };
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:msgTest.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.direction_;
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.direction_ != nullptr);
      _impl_.direction_->Clear();
    }
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .msgTest.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .msgTest.Direction direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required .msgTest.Position position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // required .msgTest.Direction direction = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.UserInfo)
  return target;
}

size_t UserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msgTest.UserInfo)
  size_t total_size = 0;

  if (_internal_has_position()) {
    // required .msgTest.Position position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  if (_internal_has_direction()) {
    // required .msgTest.Direction direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return total_size;
}
size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.UserInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .msgTest.Position position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);

    // required .msgTest.Direction direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);

    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::msgTest::Position::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_direction()->::msgTest::Direction::MergeFrom(
          from._internal_direction());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.id_)
      + sizeof(UserInfo::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[2]);
}

// ===================================================================

class MoveState::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveState>()._impl_._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msgTest::Position& position(const MoveState* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msgTest::Direction& direction(const MoveState* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::msgTest::Position&
MoveState::_Internal::position(const MoveState* msg) {
  return *msg->_impl_.position_;
}
const ::msgTest::Direction&
MoveState::_Internal::direction(const MoveState* msg) {
  return *msg->_impl_.direction_;
}
MoveState::MoveState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.MoveState)
}
MoveState::MoveState(const MoveState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::msgTest::Position(*from._impl_.position_);
  }
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::msgTest::Direction(*from._impl_.direction_);
  }
  ::memcpy(&_impl_.userid_, &from._impl_.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:msgTest.MoveState)
}

inline void MoveState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.userid_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

MoveState::~MoveState() {
  // @@protoc_insertion_point(destructor:msgTest.MoveState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.direction_;
}

void MoveState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveState::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.MoveState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.direction_ != nullptr);
      _impl_.direction_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .msgTest.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .msgTest.Direction direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.MoveState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 userId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // required .msgTest.Position position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // required .msgTest.Direction direction = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // required float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  // required int64 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.MoveState)
  return target;
}

size_t MoveState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msgTest.MoveState)
  size_t total_size = 0;

  if (_internal_has_position()) {
    // required .msgTest.Position position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  if (_internal_has_direction()) {
    // required .msgTest.Direction direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);
  }

  if (_internal_has_userid()) {
    // required int32 userId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  if (_internal_has_speed()) {
    // required float speed = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_timestamp()) {
    // required int64 timestamp = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return total_size;
}
size_t MoveState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.MoveState)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .msgTest.Position position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);

    // required .msgTest.Direction direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);

    // required int32 userId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());

    // required float speed = 4;
    total_size += 1 + 4;

    // required int64 timestamp = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveState::GetClassData() const { return &_class_data_; }


void MoveState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveState*>(&to_msg);
  auto& from = static_cast<const MoveState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.MoveState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::msgTest::Position::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_direction()->::msgTest::Direction::MergeFrom(
          from._internal_direction());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveState::CopyFrom(const MoveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.MoveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MoveState::InternalSwap(MoveState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveState, _impl_.timestamp_)
      + sizeof(MoveState::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(MoveState, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[3]);
}

// ===================================================================

class CS_Connect_Server::_Internal {
 public:
};

CS_Connect_Server::CS_Connect_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgTest.CS_Connect_Server)
}
CS_Connect_Server::CS_Connect_Server(const CS_Connect_Server& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CS_Connect_Server* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgTest.CS_Connect_Server)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_Connect_Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_Connect_Server::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CS_Connect_Server::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[4]);
}

// ===================================================================

class CS_Request_Server_State::_Internal {
 public:
};

CS_Request_Server_State::CS_Request_Server_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgTest.CS_Request_Server_State)
}
CS_Request_Server_State::CS_Request_Server_State(const CS_Request_Server_State& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CS_Request_Server_State* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgTest.CS_Request_Server_State)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_Request_Server_State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_Request_Server_State::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CS_Request_Server_State::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[5]);
}

// ===================================================================

class CS_Move_User::_Internal {
 public:
  using HasBits = decltype(std::declval<CS_Move_User>()._impl_._has_bits_);
  static const ::msgTest::MoveState& movestate(const CS_Move_User* msg);
  static void set_has_movestate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::msgTest::MoveState&
CS_Move_User::_Internal::movestate(const CS_Move_User* msg) {
  return *msg->_impl_.movestate_;
}
CS_Move_User::CS_Move_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.CS_Move_User)
}
CS_Move_User::CS_Move_User(const CS_Move_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_Move_User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movestate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movestate()) {
    _this->_impl_.movestate_ = new ::msgTest::MoveState(*from._impl_.movestate_);
  }
  // @@protoc_insertion_point(copy_constructor:msgTest.CS_Move_User)
}

inline void CS_Move_User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movestate_){nullptr}
  };
}

CS_Move_User::~CS_Move_User() {
  // @@protoc_insertion_point(destructor:msgTest.CS_Move_User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_Move_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.movestate_;
}

void CS_Move_User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_Move_User::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.CS_Move_User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.movestate_ != nullptr);
    _impl_.movestate_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_Move_User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .msgTest.MoveState moveState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_movestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_Move_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.CS_Move_User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .msgTest.MoveState moveState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::movestate(this),
        _Internal::movestate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.CS_Move_User)
  return target;
}

size_t CS_Move_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.CS_Move_User)
  size_t total_size = 0;

  // required .msgTest.MoveState moveState = 1;
  if (_internal_has_movestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.movestate_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_Move_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_Move_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_Move_User::GetClassData() const { return &_class_data_; }


void CS_Move_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_Move_User*>(&to_msg);
  auto& from = static_cast<const CS_Move_User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.CS_Move_User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_movestate()) {
    _this->_internal_mutable_movestate()->::msgTest::MoveState::MergeFrom(
        from._internal_movestate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_Move_User::CopyFrom(const CS_Move_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.CS_Move_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Move_User::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_movestate()) {
    if (!_impl_.movestate_->IsInitialized()) return false;
  }
  return true;
}

void CS_Move_User::InternalSwap(CS_Move_User* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.movestate_, other->_impl_.movestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_Move_User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[6]);
}

// ===================================================================

class SC_Accept_Client::_Internal {
 public:
  using HasBits = decltype(std::declval<SC_Accept_Client>()._impl_._has_bits_);
  static const ::msgTest::UserInfo& userinfo(const SC_Accept_Client* msg);
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::msgTest::UserInfo&
SC_Accept_Client::_Internal::userinfo(const SC_Accept_Client* msg) {
  return *msg->_impl_.userinfo_;
}
SC_Accept_Client::SC_Accept_Client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.SC_Accept_Client)
}
SC_Accept_Client::SC_Accept_Client(const SC_Accept_Client& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Accept_Client* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::msgTest::UserInfo(*from._impl_.userinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:msgTest.SC_Accept_Client)
}

inline void SC_Accept_Client::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}
  };
}

SC_Accept_Client::~SC_Accept_Client() {
  // @@protoc_insertion_point(destructor:msgTest.SC_Accept_Client)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Accept_Client::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.userinfo_;
}

void SC_Accept_Client::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Accept_Client::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.SC_Accept_Client)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.userinfo_ != nullptr);
    _impl_.userinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Accept_Client::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .msgTest.UserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Accept_Client::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.SC_Accept_Client)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .msgTest.UserInfo userInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.SC_Accept_Client)
  return target;
}

size_t SC_Accept_Client::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.SC_Accept_Client)
  size_t total_size = 0;

  // required .msgTest.UserInfo userInfo = 1;
  if (_internal_has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Accept_Client::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Accept_Client::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Accept_Client::GetClassData() const { return &_class_data_; }


void SC_Accept_Client::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Accept_Client*>(&to_msg);
  auto& from = static_cast<const SC_Accept_Client&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.SC_Accept_Client)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userinfo()) {
    _this->_internal_mutable_userinfo()->::msgTest::UserInfo::MergeFrom(
        from._internal_userinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Accept_Client::CopyFrom(const SC_Accept_Client& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.SC_Accept_Client)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Accept_Client::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_userinfo()) {
    if (!_impl_.userinfo_->IsInitialized()) return false;
  }
  return true;
}

void SC_Accept_Client::InternalSwap(SC_Accept_Client* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.userinfo_, other->_impl_.userinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Accept_Client::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[7]);
}

// ===================================================================

class SC_Response_Server_State::_Internal {
 public:
};

SC_Response_Server_State::SC_Response_Server_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.SC_Response_Server_State)
}
SC_Response_Server_State::SC_Response_Server_State(const SC_Response_Server_State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Response_Server_State* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userinfos_){from._impl_.userinfos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgTest.SC_Response_Server_State)
}

inline void SC_Response_Server_State::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userinfos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_Response_Server_State::~SC_Response_Server_State() {
  // @@protoc_insertion_point(destructor:msgTest.SC_Response_Server_State)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Response_Server_State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userinfos_.~RepeatedPtrField();
}

void SC_Response_Server_State::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Response_Server_State::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.SC_Response_Server_State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userinfos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Response_Server_State::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msgTest.UserInfo userInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_userinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Response_Server_State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.SC_Response_Server_State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msgTest.UserInfo userInfos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_userinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_userinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.SC_Response_Server_State)
  return target;
}

size_t SC_Response_Server_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.SC_Response_Server_State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgTest.UserInfo userInfos = 1;
  total_size += 1UL * this->_internal_userinfos_size();
  for (const auto& msg : this->_impl_.userinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Response_Server_State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Response_Server_State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Response_Server_State::GetClassData() const { return &_class_data_; }


void SC_Response_Server_State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Response_Server_State*>(&to_msg);
  auto& from = static_cast<const SC_Response_Server_State&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.SC_Response_Server_State)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.userinfos_.MergeFrom(from._impl_.userinfos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Response_Server_State::CopyFrom(const SC_Response_Server_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.SC_Response_Server_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Response_Server_State::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.userinfos_))
    return false;
  return true;
}

void SC_Response_Server_State::InternalSwap(SC_Response_Server_State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.userinfos_.InternalSwap(&other->_impl_.userinfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Response_Server_State::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[8]);
}

// ===================================================================

class SC_Result_Move_User::_Internal {
 public:
  using HasBits = decltype(std::declval<SC_Result_Move_User>()._impl_._has_bits_);
  static const ::msgTest::UserInfo& userinfo(const SC_Result_Move_User* msg);
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::msgTest::UserInfo&
SC_Result_Move_User::_Internal::userinfo(const SC_Result_Move_User* msg) {
  return *msg->_impl_.userinfo_;
}
SC_Result_Move_User::SC_Result_Move_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.SC_Result_Move_User)
}
SC_Result_Move_User::SC_Result_Move_User(const SC_Result_Move_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Result_Move_User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::msgTest::UserInfo(*from._impl_.userinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:msgTest.SC_Result_Move_User)
}

inline void SC_Result_Move_User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}
  };
}

SC_Result_Move_User::~SC_Result_Move_User() {
  // @@protoc_insertion_point(destructor:msgTest.SC_Result_Move_User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Result_Move_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.userinfo_;
}

void SC_Result_Move_User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Result_Move_User::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.SC_Result_Move_User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.userinfo_ != nullptr);
    _impl_.userinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Result_Move_User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .msgTest.UserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Result_Move_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.SC_Result_Move_User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .msgTest.UserInfo userInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.SC_Result_Move_User)
  return target;
}

size_t SC_Result_Move_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.SC_Result_Move_User)
  size_t total_size = 0;

  // required .msgTest.UserInfo userInfo = 1;
  if (_internal_has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Result_Move_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Result_Move_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Result_Move_User::GetClassData() const { return &_class_data_; }


void SC_Result_Move_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Result_Move_User*>(&to_msg);
  auto& from = static_cast<const SC_Result_Move_User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.SC_Result_Move_User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userinfo()) {
    _this->_internal_mutable_userinfo()->::msgTest::UserInfo::MergeFrom(
        from._internal_userinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Result_Move_User::CopyFrom(const SC_Result_Move_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.SC_Result_Move_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Result_Move_User::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_userinfo()) {
    if (!_impl_.userinfo_->IsInitialized()) return false;
  }
  return true;
}

void SC_Result_Move_User::InternalSwap(SC_Result_Move_User* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.userinfo_, other->_impl_.userinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Result_Move_User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[9]);
}

// ===================================================================

class SC_Connect_Other_User::_Internal {
 public:
  using HasBits = decltype(std::declval<SC_Connect_Other_User>()._impl_._has_bits_);
  static const ::msgTest::UserInfo& userinfo(const SC_Connect_Other_User* msg);
  static void set_has_userinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::msgTest::UserInfo&
SC_Connect_Other_User::_Internal::userinfo(const SC_Connect_Other_User* msg) {
  return *msg->_impl_.userinfo_;
}
SC_Connect_Other_User::SC_Connect_Other_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.SC_Connect_Other_User)
}
SC_Connect_Other_User::SC_Connect_Other_User(const SC_Connect_Other_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Connect_Other_User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_userinfo()) {
    _this->_impl_.userinfo_ = new ::msgTest::UserInfo(*from._impl_.userinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:msgTest.SC_Connect_Other_User)
}

inline void SC_Connect_Other_User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userinfo_){nullptr}
  };
}

SC_Connect_Other_User::~SC_Connect_Other_User() {
  // @@protoc_insertion_point(destructor:msgTest.SC_Connect_Other_User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Connect_Other_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.userinfo_;
}

void SC_Connect_Other_User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Connect_Other_User::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.SC_Connect_Other_User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.userinfo_ != nullptr);
    _impl_.userinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Connect_Other_User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .msgTest.UserInfo userInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Connect_Other_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.SC_Connect_Other_User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .msgTest.UserInfo userInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::userinfo(this),
        _Internal::userinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.SC_Connect_Other_User)
  return target;
}

size_t SC_Connect_Other_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.SC_Connect_Other_User)
  size_t total_size = 0;

  // required .msgTest.UserInfo userInfo = 1;
  if (_internal_has_userinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userinfo_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Connect_Other_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Connect_Other_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Connect_Other_User::GetClassData() const { return &_class_data_; }


void SC_Connect_Other_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Connect_Other_User*>(&to_msg);
  auto& from = static_cast<const SC_Connect_Other_User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.SC_Connect_Other_User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userinfo()) {
    _this->_internal_mutable_userinfo()->::msgTest::UserInfo::MergeFrom(
        from._internal_userinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Connect_Other_User::CopyFrom(const SC_Connect_Other_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.SC_Connect_Other_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Connect_Other_User::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_userinfo()) {
    if (!_impl_.userinfo_->IsInitialized()) return false;
  }
  return true;
}

void SC_Connect_Other_User::InternalSwap(SC_Connect_Other_User* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.userinfo_, other->_impl_.userinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Connect_Other_User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[10]);
}

// ===================================================================

class SC_Broadcast_User_Info::_Internal {
 public:
};

SC_Broadcast_User_Info::SC_Broadcast_User_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msgTest.SC_Broadcast_User_Info)
}
SC_Broadcast_User_Info::SC_Broadcast_User_Info(const SC_Broadcast_User_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_Broadcast_User_Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userinfos_){from._impl_.userinfos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgTest.SC_Broadcast_User_Info)
}

inline void SC_Broadcast_User_Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userinfos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_Broadcast_User_Info::~SC_Broadcast_User_Info() {
  // @@protoc_insertion_point(destructor:msgTest.SC_Broadcast_User_Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_Broadcast_User_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userinfos_.~RepeatedPtrField();
}

void SC_Broadcast_User_Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_Broadcast_User_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:msgTest.SC_Broadcast_User_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userinfos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_Broadcast_User_Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msgTest.UserInfo userInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_userinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_Broadcast_User_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgTest.SC_Broadcast_User_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msgTest.UserInfo userInfos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_userinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_userinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgTest.SC_Broadcast_User_Info)
  return target;
}

size_t SC_Broadcast_User_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgTest.SC_Broadcast_User_Info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgTest.UserInfo userInfos = 1;
  total_size += 1UL * this->_internal_userinfos_size();
  for (const auto& msg : this->_impl_.userinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_Broadcast_User_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_Broadcast_User_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_Broadcast_User_Info::GetClassData() const { return &_class_data_; }


void SC_Broadcast_User_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_Broadcast_User_Info*>(&to_msg);
  auto& from = static_cast<const SC_Broadcast_User_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msgTest.SC_Broadcast_User_Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.userinfos_.MergeFrom(from._impl_.userinfos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_Broadcast_User_Info::CopyFrom(const SC_Broadcast_User_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgTest.SC_Broadcast_User_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Broadcast_User_Info::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.userinfos_))
    return false;
  return true;
}

void SC_Broadcast_User_Info::InternalSwap(SC_Broadcast_User_Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.userinfos_.InternalSwap(&other->_impl_.userinfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_Broadcast_User_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messageTest_2eproto_getter, &descriptor_table_messageTest_2eproto_once,
      file_level_metadata_messageTest_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msgTest::Position*
Arena::CreateMaybeMessage< ::msgTest::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::Direction*
Arena::CreateMaybeMessage< ::msgTest::Direction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::UserInfo*
Arena::CreateMaybeMessage< ::msgTest::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::MoveState*
Arena::CreateMaybeMessage< ::msgTest::MoveState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::MoveState >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::CS_Connect_Server*
Arena::CreateMaybeMessage< ::msgTest::CS_Connect_Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::CS_Connect_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::CS_Request_Server_State*
Arena::CreateMaybeMessage< ::msgTest::CS_Request_Server_State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::CS_Request_Server_State >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::CS_Move_User*
Arena::CreateMaybeMessage< ::msgTest::CS_Move_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::CS_Move_User >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::SC_Accept_Client*
Arena::CreateMaybeMessage< ::msgTest::SC_Accept_Client >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::SC_Accept_Client >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::SC_Response_Server_State*
Arena::CreateMaybeMessage< ::msgTest::SC_Response_Server_State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::SC_Response_Server_State >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::SC_Result_Move_User*
Arena::CreateMaybeMessage< ::msgTest::SC_Result_Move_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::SC_Result_Move_User >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::SC_Connect_Other_User*
Arena::CreateMaybeMessage< ::msgTest::SC_Connect_Other_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::SC_Connect_Other_User >(arena);
}
template<> PROTOBUF_NOINLINE ::msgTest::SC_Broadcast_User_Info*
Arena::CreateMaybeMessage< ::msgTest::SC_Broadcast_User_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgTest::SC_Broadcast_User_Info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
